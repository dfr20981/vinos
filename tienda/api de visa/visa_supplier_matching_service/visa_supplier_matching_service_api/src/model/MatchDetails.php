<?php
/**
 * MatchDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  sms_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Supplier Matching Service API
 *
 * Visa Supplier Matching Service
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sms_100\model;

use \ArrayAccess;

/**
 * MatchDetails Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     sms_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MatchDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'matchDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mcc' => 'string',
        'l2' => 'string',
        'l3s' => 'string',
        'l3li' => 'string',
        'fleet_ind' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'mcc' => 'mcc',
        'l2' => 'l2',
        'l3s' => 'l3s',
        'l3li' => 'l3li',
        'fleet_ind' => 'fleetInd'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'mcc' => 'setMcc',
        'l2' => 'setL2',
        'l3s' => 'setL3s',
        'l3li' => 'setL3li',
        'fleet_ind' => 'setFleetInd'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'mcc' => 'getMcc',
        'l2' => 'getL2',
        'l3s' => 'getL3s',
        'l3li' => 'getL3li',
        'fleet_ind' => 'getFleetInd'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mcc'] = isset($data['mcc']) ? $data['mcc'] : null;
        $this->container['l2'] = isset($data['l2']) ? $data['l2'] : null;
        $this->container['l3s'] = isset($data['l3s']) ? $data['l3s'] : null;
        $this->container['l3li'] = isset($data['l3li']) ? $data['l3li'] : null;
        $this->container['fleet_ind'] = isset($data['fleet_ind']) ? $data['fleet_ind'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets mcc
     * @return string
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     * @param string $mcc 
     * @return $this
     */
    public function setMcc($mcc)
    {
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets l2
     * @return string
     */
    public function getL2()
    {
        return $this->container['l2'];
    }

    /**
     * Sets l2
     * @param string $l2 
     * @return $this
     */
    public function setL2($l2)
    {
        $this->container['l2'] = $l2;

        return $this;
    }

    /**
     * Gets l3s
     * @return string
     */
    public function getL3s()
    {
        return $this->container['l3s'];
    }

    /**
     * Sets l3s
     * @param string $l3s 
     * @return $this
     */
    public function setL3s($l3s)
    {
        $this->container['l3s'] = $l3s;

        return $this;
    }

    /**
     * Gets l3li
     * @return string
     */
    public function getL3li()
    {
        return $this->container['l3li'];
    }

    /**
     * Sets l3li
     * @param string $l3li 
     * @return $this
     */
    public function setL3li($l3li)
    {
        $this->container['l3li'] = $l3li;

        return $this;
    }

    /**
     * Gets fleet_ind
     * @return string
     */
    public function getFleetInd()
    {
        return $this->container['fleet_ind'];
    }

    /**
     * Sets fleet_ind
     * @param string $fleet_ind 
     * @return $this
     */
    public function setFleetInd($fleet_ind)
    {
        $this->container['fleet_ind'] = $fleet_ind;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\sms_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\sms_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/