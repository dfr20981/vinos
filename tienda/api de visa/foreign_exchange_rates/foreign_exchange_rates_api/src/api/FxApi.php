<?php
/**
 * FxApi
 * PHP version 5
 *
 * @category Class
 * @package  fx_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Foreign Exchange Rates API
 *
 * The Foreign Exchange Rates API provides an easy access to the Visa daily currency conversion rate for a given currency pair.  This is an indicative rate which is dependent on the currency pair as well as the amount, and may be different from the actual rate for settlement of transaction.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace fx_100\api;

use \fx_100\ApiClient;
use \fx_100\ApiException;
use \fx_100\Configuration;
use \fx_100\ObjectSerializer;

/**
 * FxApi Class Doc Comment
 *
 * @category Class
 * @package  fx_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FxApi
{
    /**
     * API Client
     *
     * @var \fx_100\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \fx_100\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\fx_100\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \fx_100\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \fx_100\ApiClient $apiClient set the API client
     *
     * @return FxApi
     */
    public function setApiClient(\fx_100\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation postforeignexchangelookup
     *
     * 
     *
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload Use a 3-character alpha currency code.&lt;br&gt;Refer to &lt;a href&#x3D;\&quot;/request_response_codes#iso_country_and_currency_codes\&quot;&gt;ISO Codes&lt;/a&gt; (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload2 Use a 3-character alpha currency code .&lt;br&gt;Refer to &lt;a href&#x3D;\&quot;/request_response_codes#iso_country_and_currency_codes\&quot;&gt;ISO Codes&lt;/a&gt; (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload3 The amount to be converted. This should be in the source currency denomination. Minor digits of the source amount must be less than or equal to the sourceCurrencyCode minor digits. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload4 The FX mark up rate to be applied. Required if the client wants certain FX rate applied.&lt;br&gt; Example: A value of 0.07 will have 0.07% FX markup rate applied. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload5 This is an optional field. It is recommended that the clients of Funds Transfer APIs provide systemsTraceAuditNumber to tie the calls with a single funds transfer transaction. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload6 This is an optional field. It is recommended that the clients of Funds Transfer APIs provide retrievalReferenceNumber to tie the calls with a single funds transfer transaction. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload7 This is an optional field. The clients of Funds Transfer APIs can choose to provide acquiringBin for reporting purpose.&lt;/br&gt;The Bank Identification Number (BIN) under which your Funds Transfer is registered. This must match the information provided during enrollment. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload8 This is an optional field. If acquiringBin is provided, it is highly recommended that acquirerCountryCode is also provided.&lt;/br&gt;The clients of Funds Transfer APIs can choose to provide acquirerCountryCode for reporting purpose.&lt;/br&gt;Use a 3-digit numeric country code for the country where the Funds Transfer solution is registered. This must match the information provided during program enrollment.&lt;br&gt;Refer to &lt;a href&#x3D;\&quot;/request_response_codes#iso_country_and_currency_codes\&quot;&gt;ISO Codes&lt;/a&gt; (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload9 This is an optional field. The clients of Funds Transfer APIs can choose to provide card acceptor information for reporting purposes. (required)
     * @throws \fx_100\ApiException on non-2xx response
     * @return \fx_100\model\ForeignexchangelookuppostResponse
     */
    public function postforeignexchangelookup($foreignexchangelookuppost_payload, $foreignexchangelookuppost_payload2, $foreignexchangelookuppost_payload3, $foreignexchangelookuppost_payload4, $foreignexchangelookuppost_payload5, $foreignexchangelookuppost_payload6, $foreignexchangelookuppost_payload7, $foreignexchangelookuppost_payload8, $foreignexchangelookuppost_payload9)
    {
        list($response) = $this->postforeignexchangelookupWithHttpInfo($foreignexchangelookuppost_payload, $foreignexchangelookuppost_payload2, $foreignexchangelookuppost_payload3, $foreignexchangelookuppost_payload4, $foreignexchangelookuppost_payload5, $foreignexchangelookuppost_payload6, $foreignexchangelookuppost_payload7, $foreignexchangelookuppost_payload8, $foreignexchangelookuppost_payload9);
        return $response;
    }

    /**
     * Operation postforeignexchangelookupWithHttpInfo
     *
     * 
     *
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload Use a 3-character alpha currency code.&lt;br&gt;Refer to &lt;a href&#x3D;\&quot;/request_response_codes#iso_country_and_currency_codes\&quot;&gt;ISO Codes&lt;/a&gt; (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload2 Use a 3-character alpha currency code .&lt;br&gt;Refer to &lt;a href&#x3D;\&quot;/request_response_codes#iso_country_and_currency_codes\&quot;&gt;ISO Codes&lt;/a&gt; (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload3 The amount to be converted. This should be in the source currency denomination. Minor digits of the source amount must be less than or equal to the sourceCurrencyCode minor digits. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload4 The FX mark up rate to be applied. Required if the client wants certain FX rate applied.&lt;br&gt; Example: A value of 0.07 will have 0.07% FX markup rate applied. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload5 This is an optional field. It is recommended that the clients of Funds Transfer APIs provide systemsTraceAuditNumber to tie the calls with a single funds transfer transaction. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload6 This is an optional field. It is recommended that the clients of Funds Transfer APIs provide retrievalReferenceNumber to tie the calls with a single funds transfer transaction. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload7 This is an optional field. The clients of Funds Transfer APIs can choose to provide acquiringBin for reporting purpose.&lt;/br&gt;The Bank Identification Number (BIN) under which your Funds Transfer is registered. This must match the information provided during enrollment. (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload8 This is an optional field. If acquiringBin is provided, it is highly recommended that acquirerCountryCode is also provided.&lt;/br&gt;The clients of Funds Transfer APIs can choose to provide acquirerCountryCode for reporting purpose.&lt;/br&gt;Use a 3-digit numeric country code for the country where the Funds Transfer solution is registered. This must match the information provided during program enrollment.&lt;br&gt;Refer to &lt;a href&#x3D;\&quot;/request_response_codes#iso_country_and_currency_codes\&quot;&gt;ISO Codes&lt;/a&gt; (required)
     * @param \fx_100\model\ForeignexchangelookuppostPayload $foreignexchangelookuppost_payload9 This is an optional field. The clients of Funds Transfer APIs can choose to provide card acceptor information for reporting purposes. (required)
     * @throws \fx_100\ApiException on non-2xx response
     * @return array of \fx_100\model\ForeignexchangelookuppostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postforeignexchangelookupWithHttpInfo($foreignexchangelookuppost_payload, $foreignexchangelookuppost_payload2, $foreignexchangelookuppost_payload3, $foreignexchangelookuppost_payload4, $foreignexchangelookuppost_payload5, $foreignexchangelookuppost_payload6, $foreignexchangelookuppost_payload7, $foreignexchangelookuppost_payload8, $foreignexchangelookuppost_payload9)
    {
        // verify the required parameter 'foreignexchangelookuppost_payload' is set
        if ($foreignexchangelookuppost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload2' is set
        if ($foreignexchangelookuppost_payload2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload2 when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload3' is set
        if ($foreignexchangelookuppost_payload3 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload3 when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload4' is set
        if ($foreignexchangelookuppost_payload4 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload4 when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload5' is set
        if ($foreignexchangelookuppost_payload5 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload5 when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload6' is set
        if ($foreignexchangelookuppost_payload6 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload6 when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload7' is set
        if ($foreignexchangelookuppost_payload7 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload7 when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload8' is set
        if ($foreignexchangelookuppost_payload8 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload8 when calling postforeignexchangelookup');
        }
        // verify the required parameter 'foreignexchangelookuppost_payload9' is set
        if ($foreignexchangelookuppost_payload9 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $foreignexchangelookuppost_payload9 when calling postforeignexchangelookup');
        }
        // parse inputs
        $path = "/forexrates/v1/foreignexchangerates";
        $resourcePath = "foreignexchangerates";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload)) {
            $_tempBody = $foreignexchangelookuppost_payload;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload2)) {
            $_tempBody = $foreignexchangelookuppost_payload2;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload3)) {
            $_tempBody = $foreignexchangelookuppost_payload3;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload4)) {
            $_tempBody = $foreignexchangelookuppost_payload4;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload5)) {
            $_tempBody = $foreignexchangelookuppost_payload5;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload6)) {
            $_tempBody = $foreignexchangelookuppost_payload6;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload7)) {
            $_tempBody = $foreignexchangelookuppost_payload7;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload8)) {
            $_tempBody = $foreignexchangelookuppost_payload8;
        }
// body params
        $_tempBody = null;
        if (isset($foreignexchangelookuppost_payload9)) {
            $_tempBody = $foreignexchangelookuppost_payload9;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\fx_100\model\ForeignexchangelookuppostResponse',
                '/forexrates/v1/foreignexchangerates'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\fx_100\model\ForeignexchangelookuppostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\fx_100\model\ForeignexchangelookuppostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/