<?php
/**
 * ForeignexchangelookuppostResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  fx_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Foreign Exchange Rates API
 *
 * The Foreign Exchange Rates API provides an easy access to the Visa daily currency conversion rate for a given currency pair.  This is an indicative rate which is dependent on the currency pair as well as the amount, and may be different from the actual rate for settlement of transaction.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace fx_100\model;

use \ArrayAccess;

/**
 * ForeignexchangelookuppostResponse Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     fx_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ForeignexchangelookuppostResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'foreignexchangelookuppostResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conversion_rate' => 'double',
        'original_destn_amt_before_mark_up' => 'string',
        'mark_up_rate_applied' => 'string',
        'destination_amount' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'conversion_rate' => 'conversionRate',
        'original_destn_amt_before_mark_up' => 'originalDestnAmtBeforeMarkUp',
        'mark_up_rate_applied' => 'markUpRateApplied',
        'destination_amount' => 'destinationAmount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'conversion_rate' => 'setConversionRate',
        'original_destn_amt_before_mark_up' => 'setOriginalDestnAmtBeforeMarkUp',
        'mark_up_rate_applied' => 'setMarkUpRateApplied',
        'destination_amount' => 'setDestinationAmount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'conversion_rate' => 'getConversionRate',
        'original_destn_amt_before_mark_up' => 'getOriginalDestnAmtBeforeMarkUp',
        'mark_up_rate_applied' => 'getMarkUpRateApplied',
        'destination_amount' => 'getDestinationAmount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversion_rate'] = isset($data['conversion_rate']) ? $data['conversion_rate'] : null;
        $this->container['original_destn_amt_before_mark_up'] = isset($data['original_destn_amt_before_mark_up']) ? $data['original_destn_amt_before_mark_up'] : null;
        $this->container['mark_up_rate_applied'] = isset($data['mark_up_rate_applied']) ? $data['mark_up_rate_applied'] : null;
        $this->container['destination_amount'] = isset($data['destination_amount']) ? $data['destination_amount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['conversion_rate'] === null) {
            $invalid_properties[] = "'conversion_rate' can't be null";
        }
        if ($this->container['destination_amount'] === null) {
            $invalid_properties[] = "'destination_amount' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['conversion_rate'] === null) {
            return false;
        }
        if ($this->container['destination_amount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets conversion_rate
     * @return double
     */
    public function getConversionRate()
    {
        return $this->container['conversion_rate'];
    }

    /**
     * Sets conversion_rate
     * @param double $conversion_rate The Visa daily conversion rate value based on sender's currency and recipient's currency.
     * @return $this
     */
    public function setConversionRate($conversion_rate)
    {
        $this->container['conversion_rate'] = $conversion_rate;

        return $this;
    }

    /**
     * Gets original_destn_amt_before_mark_up
     * @return string
     */
    public function getOriginalDestnAmtBeforeMarkUp()
    {
        return $this->container['original_destn_amt_before_mark_up'];
    }

    /**
     * Sets original_destn_amt_before_mark_up
     * @param string $original_destn_amt_before_mark_up The amount denominated in the destination currency without mark up rate applied.
     * @return $this
     */
    public function setOriginalDestnAmtBeforeMarkUp($original_destn_amt_before_mark_up)
    {
        $this->container['original_destn_amt_before_mark_up'] = $original_destn_amt_before_mark_up;

        return $this;
    }

    /**
     * Gets mark_up_rate_applied
     * @return string
     */
    public function getMarkUpRateApplied()
    {
        return $this->container['mark_up_rate_applied'];
    }

    /**
     * Sets mark_up_rate_applied
     * @param string $mark_up_rate_applied The FX mark up rate that was applied. Example: A value of 0.07 will have 0.07% FX markup rate applied.
     * @return $this
     */
    public function setMarkUpRateApplied($mark_up_rate_applied)
    {
        $this->container['mark_up_rate_applied'] = $mark_up_rate_applied;

        return $this;
    }

    /**
     * Gets destination_amount
     * @return string
     */
    public function getDestinationAmount()
    {
        return $this->container['destination_amount'];
    }

    /**
     * Sets destination_amount
     * @param string $destination_amount The transaction amount denominated in the recipient's currency.
     * @return $this
     */
    public function setDestinationAmount($destination_amount)
    {
        $this->container['destination_amount'] = $destination_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\fx_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\fx_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/