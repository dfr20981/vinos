<?php
/**
 * OwnershipDetailsInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  vba_102
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Company API
 *
 * The VISA B2B Connect REST API allows developers to perform operations from a company or bank perspective.  The VISA B2B Connect API allows you to create and update profiles or retreive information that is relevant to you.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vba_102\model;

use \ArrayAccess;

/**
 * OwnershipDetailsInner Class Doc Comment
 *
 * @category    Class
 * @package     vba_102
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OwnershipDetailsInner implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ownershipDetails_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entity_owner' => 'string',
        'country_of_residence' => 'string',
        'owner_individuals' => '\vba_102\model\OwnerIndividuals',
        'entity_name' => 'string',
        'nationality_country_code_iso' => 'int',
        'email' => 'string',
        'is_individual' => 'bool',
        'address' => 'string',
        'full_name' => 'string',
        'nationality_country_code' => 'string',
        'is_active' => 'bool',
        'country_of_residence_iso' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_owner' => 'entityOwner',
        'country_of_residence' => 'countryOfResidence',
        'owner_individuals' => 'ownerIndividuals',
        'entity_name' => 'entityName',
        'nationality_country_code_iso' => 'nationalityCountryCodeISO',
        'email' => 'email',
        'is_individual' => 'isIndividual',
        'address' => 'address',
        'full_name' => 'fullName',
        'nationality_country_code' => 'nationalityCountryCode',
        'is_active' => 'isActive',
        'country_of_residence_iso' => 'countryOfResidenceISO'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'entity_owner' => 'setEntityOwner',
        'country_of_residence' => 'setCountryOfResidence',
        'owner_individuals' => 'setOwnerIndividuals',
        'entity_name' => 'setEntityName',
        'nationality_country_code_iso' => 'setNationalityCountryCodeIso',
        'email' => 'setEmail',
        'is_individual' => 'setIsIndividual',
        'address' => 'setAddress',
        'full_name' => 'setFullName',
        'nationality_country_code' => 'setNationalityCountryCode',
        'is_active' => 'setIsActive',
        'country_of_residence_iso' => 'setCountryOfResidenceIso'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'entity_owner' => 'getEntityOwner',
        'country_of_residence' => 'getCountryOfResidence',
        'owner_individuals' => 'getOwnerIndividuals',
        'entity_name' => 'getEntityName',
        'nationality_country_code_iso' => 'getNationalityCountryCodeIso',
        'email' => 'getEmail',
        'is_individual' => 'getIsIndividual',
        'address' => 'getAddress',
        'full_name' => 'getFullName',
        'nationality_country_code' => 'getNationalityCountryCode',
        'is_active' => 'getIsActive',
        'country_of_residence_iso' => 'getCountryOfResidenceIso'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity_owner'] = isset($data['entity_owner']) ? $data['entity_owner'] : null;
        $this->container['country_of_residence'] = isset($data['country_of_residence']) ? $data['country_of_residence'] : null;
        $this->container['owner_individuals'] = isset($data['owner_individuals']) ? $data['owner_individuals'] : null;
        $this->container['entity_name'] = isset($data['entity_name']) ? $data['entity_name'] : null;
        $this->container['nationality_country_code_iso'] = isset($data['nationality_country_code_iso']) ? $data['nationality_country_code_iso'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['is_individual'] = isset($data['is_individual']) ? $data['is_individual'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['nationality_country_code'] = isset($data['nationality_country_code']) ? $data['nationality_country_code'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['country_of_residence_iso'] = isset($data['country_of_residence_iso']) ? $data['country_of_residence_iso'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['entity_owner'] === null) {
            $invalid_properties[] = "'entity_owner' can't be null";
        }
        if ($this->container['country_of_residence'] === null) {
            $invalid_properties[] = "'country_of_residence' can't be null";
        }
        if ($this->container['entity_name'] === null) {
            $invalid_properties[] = "'entity_name' can't be null";
        }
        if ($this->container['nationality_country_code_iso'] === null) {
            $invalid_properties[] = "'nationality_country_code_iso' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['is_individual'] === null) {
            $invalid_properties[] = "'is_individual' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalid_properties[] = "'address' can't be null";
        }
        if ($this->container['full_name'] === null) {
            $invalid_properties[] = "'full_name' can't be null";
        }
        if ($this->container['nationality_country_code'] === null) {
            $invalid_properties[] = "'nationality_country_code' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalid_properties[] = "'is_active' can't be null";
        }
        if ($this->container['country_of_residence_iso'] === null) {
            $invalid_properties[] = "'country_of_residence_iso' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['entity_owner'] === null) {
            return false;
        }
        if ($this->container['country_of_residence'] === null) {
            return false;
        }
        if ($this->container['entity_name'] === null) {
            return false;
        }
        if ($this->container['nationality_country_code_iso'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['is_individual'] === null) {
            return false;
        }
        if ($this->container['address'] === null) {
            return false;
        }
        if ($this->container['full_name'] === null) {
            return false;
        }
        if ($this->container['nationality_country_code'] === null) {
            return false;
        }
        if ($this->container['is_active'] === null) {
            return false;
        }
        if ($this->container['country_of_residence_iso'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets entity_owner
     * @return string
     */
    public function getEntityOwner()
    {
        return $this->container['entity_owner'];
    }

    /**
     * Sets entity_owner
     * @param string $entity_owner 
     * @return $this
     */
    public function setEntityOwner($entity_owner)
    {
        $this->container['entity_owner'] = $entity_owner;

        return $this;
    }

    /**
     * Gets country_of_residence
     * @return string
     */
    public function getCountryOfResidence()
    {
        return $this->container['country_of_residence'];
    }

    /**
     * Sets country_of_residence
     * @param string $country_of_residence 
     * @return $this
     */
    public function setCountryOfResidence($country_of_residence)
    {
        $this->container['country_of_residence'] = $country_of_residence;

        return $this;
    }

    /**
     * Gets owner_individuals
     * @return \vba_102\model\OwnerIndividuals
     */
    public function getOwnerIndividuals()
    {
        return $this->container['owner_individuals'];
    }

    /**
     * Sets owner_individuals
     * @param \vba_102\model\OwnerIndividuals $owner_individuals
     * @return $this
     */
    public function setOwnerIndividuals($owner_individuals)
    {
        $this->container['owner_individuals'] = $owner_individuals;

        return $this;
    }

    /**
     * Gets entity_name
     * @return string
     */
    public function getEntityName()
    {
        return $this->container['entity_name'];
    }

    /**
     * Sets entity_name
     * @param string $entity_name 
     * @return $this
     */
    public function setEntityName($entity_name)
    {
        $this->container['entity_name'] = $entity_name;

        return $this;
    }

    /**
     * Gets nationality_country_code_iso
     * @return int
     */
    public function getNationalityCountryCodeIso()
    {
        return $this->container['nationality_country_code_iso'];
    }

    /**
     * Sets nationality_country_code_iso
     * @param int $nationality_country_code_iso 
     * @return $this
     */
    public function setNationalityCountryCodeIso($nationality_country_code_iso)
    {
        $this->container['nationality_country_code_iso'] = $nationality_country_code_iso;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets is_individual
     * @return bool
     */
    public function getIsIndividual()
    {
        return $this->container['is_individual'];
    }

    /**
     * Sets is_individual
     * @param bool $is_individual 
     * @return $this
     */
    public function setIsIndividual($is_individual)
    {
        $this->container['is_individual'] = $is_individual;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address 
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets full_name
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     * @param string $full_name 
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets nationality_country_code
     * @return string
     */
    public function getNationalityCountryCode()
    {
        return $this->container['nationality_country_code'];
    }

    /**
     * Sets nationality_country_code
     * @param string $nationality_country_code 
     * @return $this
     */
    public function setNationalityCountryCode($nationality_country_code)
    {
        $this->container['nationality_country_code'] = $nationality_country_code;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active 
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets country_of_residence_iso
     * @return int
     */
    public function getCountryOfResidenceIso()
    {
        return $this->container['country_of_residence_iso'];
    }

    /**
     * Sets country_of_residence_iso
     * @param int $country_of_residence_iso 
     * @return $this
     */
    public function setCountryOfResidenceIso($country_of_residence_iso)
    {
        $this->container['country_of_residence_iso'] = $country_of_residence_iso;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vba_102\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vba_102\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/