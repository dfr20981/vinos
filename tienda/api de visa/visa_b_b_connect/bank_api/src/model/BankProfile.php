<?php
/**
 * BankProfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  vba_101
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bank API
 *
 * The VISA B2B Connect REST API allows developers to perform operations from a company or bank perspective. The VISA B2B Connect API allows you to create and update profiles or retreive information that is relevant to you.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vba_101\model;

use \ArrayAccess;

/**
 * BankProfile Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     vba_101
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BankProfile implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'bankProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bank_bic' => '\vba_101\model\BankBic',
        'default_currency' => 'string',
        'bank_name' => 'string',
        'unified_payment_id' => '\vba_101\model\UnifiedPaymentId',
        'recipient_email' => 'string',
        'default_currency_iso_code' => 'int',
        'address' => '\vba_101\model\Address',
        'primary_contact' => '\vba_101\model\PrimaryContact',
        'frequency_type' => 'string',
        'secondary_contact' => '\vba_101\model\SecondaryContact'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_bic' => 'bankBic',
        'default_currency' => 'defaultCurrency',
        'bank_name' => 'bankName',
        'unified_payment_id' => 'unifiedPaymentId',
        'recipient_email' => 'recipientEmail',
        'default_currency_iso_code' => 'defaultCurrencyIsoCode',
        'address' => 'address',
        'primary_contact' => 'primaryContact',
        'frequency_type' => 'frequencyType',
        'secondary_contact' => 'secondaryContact'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bank_bic' => 'setBankBic',
        'default_currency' => 'setDefaultCurrency',
        'bank_name' => 'setBankName',
        'unified_payment_id' => 'setUnifiedPaymentId',
        'recipient_email' => 'setRecipientEmail',
        'default_currency_iso_code' => 'setDefaultCurrencyIsoCode',
        'address' => 'setAddress',
        'primary_contact' => 'setPrimaryContact',
        'frequency_type' => 'setFrequencyType',
        'secondary_contact' => 'setSecondaryContact'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bank_bic' => 'getBankBic',
        'default_currency' => 'getDefaultCurrency',
        'bank_name' => 'getBankName',
        'unified_payment_id' => 'getUnifiedPaymentId',
        'recipient_email' => 'getRecipientEmail',
        'default_currency_iso_code' => 'getDefaultCurrencyIsoCode',
        'address' => 'getAddress',
        'primary_contact' => 'getPrimaryContact',
        'frequency_type' => 'getFrequencyType',
        'secondary_contact' => 'getSecondaryContact'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bank_bic'] = isset($data['bank_bic']) ? $data['bank_bic'] : null;
        $this->container['default_currency'] = isset($data['default_currency']) ? $data['default_currency'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['unified_payment_id'] = isset($data['unified_payment_id']) ? $data['unified_payment_id'] : null;
        $this->container['recipient_email'] = isset($data['recipient_email']) ? $data['recipient_email'] : null;
        $this->container['default_currency_iso_code'] = isset($data['default_currency_iso_code']) ? $data['default_currency_iso_code'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['primary_contact'] = isset($data['primary_contact']) ? $data['primary_contact'] : null;
        $this->container['frequency_type'] = isset($data['frequency_type']) ? $data['frequency_type'] : null;
        $this->container['secondary_contact'] = isset($data['secondary_contact']) ? $data['secondary_contact'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['default_currency'] === null) {
            $invalid_properties[] = "'default_currency' can't be null";
        }
        if ($this->container['bank_name'] === null) {
            $invalid_properties[] = "'bank_name' can't be null";
        }
        if ($this->container['unified_payment_id'] === null) {
            $invalid_properties[] = "'unified_payment_id' can't be null";
        }
        if ($this->container['default_currency_iso_code'] === null) {
            $invalid_properties[] = "'default_currency_iso_code' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalid_properties[] = "'address' can't be null";
        }
        if ($this->container['primary_contact'] === null) {
            $invalid_properties[] = "'primary_contact' can't be null";
        }
        if ($this->container['secondary_contact'] === null) {
            $invalid_properties[] = "'secondary_contact' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['default_currency'] === null) {
            return false;
        }
        if ($this->container['bank_name'] === null) {
            return false;
        }
        if ($this->container['unified_payment_id'] === null) {
            return false;
        }
        if ($this->container['default_currency_iso_code'] === null) {
            return false;
        }
        if ($this->container['address'] === null) {
            return false;
        }
        if ($this->container['primary_contact'] === null) {
            return false;
        }
        if ($this->container['secondary_contact'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bank_bic
     * @return \vba_101\model\BankBic
     */
    public function getBankBic()
    {
        return $this->container['bank_bic'];
    }

    /**
     * Sets bank_bic
     * @param \vba_101\model\BankBic $bank_bic
     * @return $this
     */
    public function setBankBic($bank_bic)
    {
        $this->container['bank_bic'] = $bank_bic;

        return $this;
    }

    /**
     * Gets default_currency
     * @return string
     */
    public function getDefaultCurrency()
    {
        return $this->container['default_currency'];
    }

    /**
     * Sets default_currency
     * @param string $default_currency 
     * @return $this
     */
    public function setDefaultCurrency($default_currency)
    {
        $this->container['default_currency'] = $default_currency;

        return $this;
    }

    /**
     * Gets bank_name
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     * @param string $bank_name The name of the bank in question.
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets unified_payment_id
     * @return \vba_101\model\UnifiedPaymentId
     */
    public function getUnifiedPaymentId()
    {
        return $this->container['unified_payment_id'];
    }

    /**
     * Sets unified_payment_id
     * @param \vba_101\model\UnifiedPaymentId $unified_payment_id
     * @return $this
     */
    public function setUnifiedPaymentId($unified_payment_id)
    {
        $this->container['unified_payment_id'] = $unified_payment_id;

        return $this;
    }

    /**
     * Gets recipient_email
     * @return string
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     * @param string $recipient_email The email of the recipient
     * @return $this
     */
    public function setRecipientEmail($recipient_email)
    {
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets default_currency_iso_code
     * @return int
     */
    public function getDefaultCurrencyIsoCode()
    {
        return $this->container['default_currency_iso_code'];
    }

    /**
     * Sets default_currency_iso_code
     * @param int $default_currency_iso_code 
     * @return $this
     */
    public function setDefaultCurrencyIsoCode($default_currency_iso_code)
    {
        $this->container['default_currency_iso_code'] = $default_currency_iso_code;

        return $this;
    }

    /**
     * Gets address
     * @return \vba_101\model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param \vba_101\model\Address $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets primary_contact
     * @return \vba_101\model\PrimaryContact
     */
    public function getPrimaryContact()
    {
        return $this->container['primary_contact'];
    }

    /**
     * Sets primary_contact
     * @param \vba_101\model\PrimaryContact $primary_contact
     * @return $this
     */
    public function setPrimaryContact($primary_contact)
    {
        $this->container['primary_contact'] = $primary_contact;

        return $this;
    }

    /**
     * Gets frequency_type
     * @return string
     */
    public function getFrequencyType()
    {
        return $this->container['frequency_type'];
    }

    /**
     * Sets frequency_type
     * @param string $frequency_type The category of the frequency that is being requested, possible values are: Every Day and Upon Payment
     * @return $this
     */
    public function setFrequencyType($frequency_type)
    {
        $this->container['frequency_type'] = $frequency_type;

        return $this;
    }

    /**
     * Gets secondary_contact
     * @return \vba_101\model\SecondaryContact
     */
    public function getSecondaryContact()
    {
        return $this->container['secondary_contact'];
    }

    /**
     * Sets secondary_contact
     * @param \vba_101\model\SecondaryContact $secondary_contact
     * @return $this
     */
    public function setSecondaryContact($secondary_contact)
    {
        $this->container['secondary_contact'] = $secondary_contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vba_101\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vba_101\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/