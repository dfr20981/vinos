<?php
/**
 * GetBankgetResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  vba_101
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bank API
 *
 * The VISA B2B Connect REST API allows developers to perform operations from a company or bank perspective. The VISA B2B Connect API allows you to create and update profiles or retreive information that is relevant to you.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vba_101\model;

use \ArrayAccess;

/**
 * GetBankgetResponse Class Doc Comment
 *
 * @category    Class
 * @description Successful request
 * @package     vba_101
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetBankgetResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getBankgetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status_text' => 'string',
        'bank_profile' => '\vba_101\model\BankProfile',
        'last_updated' => 'string',
        'blocked_corridors' => '\vba_101\model\BlockedCorridors',
        'bank_id' => 'string',
        'supported_currencies' => '\vba_101\model\SupportedCurrencies',
        'transaction_limits' => '\vba_101\model\TransactionLimits'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'status_text' => 'statusText',
        'bank_profile' => 'bankProfile',
        'last_updated' => 'lastUpdated',
        'blocked_corridors' => 'blockedCorridors',
        'bank_id' => 'bankId',
        'supported_currencies' => 'supportedCurrencies',
        'transaction_limits' => 'transactionLimits'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'status_text' => 'setStatusText',
        'bank_profile' => 'setBankProfile',
        'last_updated' => 'setLastUpdated',
        'blocked_corridors' => 'setBlockedCorridors',
        'bank_id' => 'setBankId',
        'supported_currencies' => 'setSupportedCurrencies',
        'transaction_limits' => 'setTransactionLimits'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'status_text' => 'getStatusText',
        'bank_profile' => 'getBankProfile',
        'last_updated' => 'getLastUpdated',
        'blocked_corridors' => 'getBlockedCorridors',
        'bank_id' => 'getBankId',
        'supported_currencies' => 'getSupportedCurrencies',
        'transaction_limits' => 'getTransactionLimits'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status_text'] = isset($data['status_text']) ? $data['status_text'] : null;
        $this->container['bank_profile'] = isset($data['bank_profile']) ? $data['bank_profile'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['blocked_corridors'] = isset($data['blocked_corridors']) ? $data['blocked_corridors'] : null;
        $this->container['bank_id'] = isset($data['bank_id']) ? $data['bank_id'] : null;
        $this->container['supported_currencies'] = isset($data['supported_currencies']) ? $data['supported_currencies'] : null;
        $this->container['transaction_limits'] = isset($data['transaction_limits']) ? $data['transaction_limits'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['status_text'] === null) {
            $invalid_properties[] = "'status_text' can't be null";
        }
        if ($this->container['bank_profile'] === null) {
            $invalid_properties[] = "'bank_profile' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalid_properties[] = "'last_updated' can't be null";
        }
        if ($this->container['blocked_corridors'] === null) {
            $invalid_properties[] = "'blocked_corridors' can't be null";
        }
        if ($this->container['bank_id'] === null) {
            $invalid_properties[] = "'bank_id' can't be null";
        }
        if ($this->container['supported_currencies'] === null) {
            $invalid_properties[] = "'supported_currencies' can't be null";
        }
        if ($this->container['transaction_limits'] === null) {
            $invalid_properties[] = "'transaction_limits' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['status_text'] === null) {
            return false;
        }
        if ($this->container['bank_profile'] === null) {
            return false;
        }
        if ($this->container['last_updated'] === null) {
            return false;
        }
        if ($this->container['blocked_corridors'] === null) {
            return false;
        }
        if ($this->container['bank_id'] === null) {
            return false;
        }
        if ($this->container['supported_currencies'] === null) {
            return false;
        }
        if ($this->container['transaction_limits'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets status_text
     * @return string
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     * @param string $status_text 
     * @return $this
     */
    public function setStatusText($status_text)
    {
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets bank_profile
     * @return \vba_101\model\BankProfile
     */
    public function getBankProfile()
    {
        return $this->container['bank_profile'];
    }

    /**
     * Sets bank_profile
     * @param \vba_101\model\BankProfile $bank_profile
     * @return $this
     */
    public function setBankProfile($bank_profile)
    {
        $this->container['bank_profile'] = $bank_profile;

        return $this;
    }

    /**
     * Gets last_updated
     * @return string
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     * @param string $last_updated format - date-time
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets blocked_corridors
     * @return \vba_101\model\BlockedCorridors
     */
    public function getBlockedCorridors()
    {
        return $this->container['blocked_corridors'];
    }

    /**
     * Sets blocked_corridors
     * @param \vba_101\model\BlockedCorridors $blocked_corridors
     * @return $this
     */
    public function setBlockedCorridors($blocked_corridors)
    {
        $this->container['blocked_corridors'] = $blocked_corridors;

        return $this;
    }

    /**
     * Gets bank_id
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     * @param string $bank_id The BID (Visa issued Business ID) of the bank.
     * @return $this
     */
    public function setBankId($bank_id)
    {
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets supported_currencies
     * @return \vba_101\model\SupportedCurrencies
     */
    public function getSupportedCurrencies()
    {
        return $this->container['supported_currencies'];
    }

    /**
     * Sets supported_currencies
     * @param \vba_101\model\SupportedCurrencies $supported_currencies
     * @return $this
     */
    public function setSupportedCurrencies($supported_currencies)
    {
        $this->container['supported_currencies'] = $supported_currencies;

        return $this;
    }

    /**
     * Gets transaction_limits
     * @return \vba_101\model\TransactionLimits
     */
    public function getTransactionLimits()
    {
        return $this->container['transaction_limits'];
    }

    /**
     * Sets transaction_limits
     * @param \vba_101\model\TransactionLimits $transaction_limits
     * @return $this
     */
    public function setTransactionLimits($transaction_limits)
    {
        $this->container['transaction_limits'] = $transaction_limits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vba_101\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vba_101\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/