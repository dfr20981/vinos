<?php
/**
 * BlockedCorridors
 *
 * PHP version 5
 *
 * @category Class
 * @package  vba_101
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bank API
 *
 * The VISA B2B Connect REST API allows developers to perform operations from a company or bank perspective. The VISA B2B Connect API allows you to create and update profiles or retreive information that is relevant to you.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vba_101\model;

use \ArrayAccess;

/**
 * BlockedCorridors Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     vba_101
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BlockedCorridors implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'blockedCorridors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'blocked_desc' => 'string',
        'country_display_name' => 'string',
        'iso_country_code' => 'int',
        'country_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'blocked_desc' => 'blockedDesc',
        'country_display_name' => 'countryDisplayName',
        'iso_country_code' => 'isoCountryCode',
        'country_code' => 'countryCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'blocked_desc' => 'setBlockedDesc',
        'country_display_name' => 'setCountryDisplayName',
        'iso_country_code' => 'setIsoCountryCode',
        'country_code' => 'setCountryCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'blocked_desc' => 'getBlockedDesc',
        'country_display_name' => 'getCountryDisplayName',
        'iso_country_code' => 'getIsoCountryCode',
        'country_code' => 'getCountryCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['blocked_desc'] = isset($data['blocked_desc']) ? $data['blocked_desc'] : null;
        $this->container['country_display_name'] = isset($data['country_display_name']) ? $data['country_display_name'] : null;
        $this->container['iso_country_code'] = isset($data['iso_country_code']) ? $data['iso_country_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['blocked_desc'] === null) {
            $invalid_properties[] = "'blocked_desc' can't be null";
        }
        if ($this->container['country_display_name'] === null) {
            $invalid_properties[] = "'country_display_name' can't be null";
        }
        if ($this->container['iso_country_code'] === null) {
            $invalid_properties[] = "'iso_country_code' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalid_properties[] = "'country_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['blocked_desc'] === null) {
            return false;
        }
        if ($this->container['country_display_name'] === null) {
            return false;
        }
        if ($this->container['iso_country_code'] === null) {
            return false;
        }
        if ($this->container['country_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets blocked_desc
     * @return string
     */
    public function getBlockedDesc()
    {
        return $this->container['blocked_desc'];
    }

    /**
     * Sets blocked_desc
     * @param string $blocked_desc Indicates if a country is blocked and what category of entity blocked it. Statuses are:  visaBlocked, bankBlocked, companyBlocked and unblocked.
     * @return $this
     */
    public function setBlockedDesc($blocked_desc)
    {
        $this->container['blocked_desc'] = $blocked_desc;

        return $this;
    }

    /**
     * Gets country_display_name
     * @return string
     */
    public function getCountryDisplayName()
    {
        return $this->container['country_display_name'];
    }

    /**
     * Sets country_display_name
     * @param string $country_display_name 
     * @return $this
     */
    public function setCountryDisplayName($country_display_name)
    {
        $this->container['country_display_name'] = $country_display_name;

        return $this;
    }

    /**
     * Gets iso_country_code
     * @return int
     */
    public function getIsoCountryCode()
    {
        return $this->container['iso_country_code'];
    }

    /**
     * Sets iso_country_code
     * @param int $iso_country_code 
     * @return $this
     */
    public function setIsoCountryCode($iso_country_code)
    {
        $this->container['iso_country_code'] = $iso_country_code;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code 
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vba_101\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vba_101\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/