<?php
/**
 * Visa_card_eligibility_serviceApi
 * PHP version 5
 *
 * @category Class
 * @package  vces_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Card Eligibility Service
 *
 * Visa Card Eligibility Service REST API
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vces_100\api;

use \vces_100\ApiClient;
use \vces_100\ApiException;
use \vces_100\Configuration;
use \vces_100\ObjectSerializer;

/**
 * Visa_card_eligibility_serviceApi Class Doc Comment
 *
 * @category Class
 * @package  vces_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Visa_card_eligibility_serviceApi
{
    /**
     * API Client
     *
     * @var \vces_100\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \vces_100\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\vces_100\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \vces_100\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \vces_100\ApiClient $apiClient set the API client
     *
     * @return Visa_card_eligibility_serviceApi
     */
    public function setApiClient(\vces_100\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation postprepay
     *
     * 
     *
     * @param \vces_100\model\PrepaypostPayload $prepaypost_payload Request body (required)
     * @throws \vces_100\ApiException on non-2xx response
     * @return \vces_100\model\PrepaypostResponse
     */
    public function postprepay($prepaypost_payload)
    {
        list($response) = $this->postprepayWithHttpInfo($prepaypost_payload);
        return $response;
    }

    /**
     * Operation postprepayWithHttpInfo
     *
     * 
     *
     * @param \vces_100\model\PrepaypostPayload $prepaypost_payload Request body (required)
     * @throws \vces_100\ApiException on non-2xx response
     * @return array of \vces_100\model\PrepaypostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postprepayWithHttpInfo($prepaypost_payload)
    {
        // verify the required parameter 'prepaypost_payload' is set
        if ($prepaypost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $prepaypost_payload when calling postprepay');
        }
        // parse inputs
        $path = "/visacardeligibilityservices/v1/cardeligibility/prepay";
        $resourcePath = "cardeligibility/prepay";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($prepaypost_payload)) {
            $_tempBody = $prepaypost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vces_100\model\PrepaypostResponse',
                '/visacardeligibilityservices/v1/cardeligibility/prepay'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vces_100\model\PrepaypostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vces_100\model\PrepaypostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postredeemOffer
     *
     * 
     *
     * @param \vces_100\model\RedeemOfferpostPayload $redeem_offerpost_payload Request body (required)
     * @throws \vces_100\ApiException on non-2xx response
     * @return \vces_100\model\RedeemOfferpostResponse
     */
    public function postredeemOffer($redeem_offerpost_payload)
    {
        list($response) = $this->postredeemOfferWithHttpInfo($redeem_offerpost_payload);
        return $response;
    }

    /**
     * Operation postredeemOfferWithHttpInfo
     *
     * 
     *
     * @param \vces_100\model\RedeemOfferpostPayload $redeem_offerpost_payload Request body (required)
     * @throws \vces_100\ApiException on non-2xx response
     * @return array of \vces_100\model\RedeemOfferpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postredeemOfferWithHttpInfo($redeem_offerpost_payload)
    {
        // verify the required parameter 'redeem_offerpost_payload' is set
        if ($redeem_offerpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $redeem_offerpost_payload when calling postredeemOffer');
        }
        // parse inputs
        $path = "/visacardeligibilityservices/v1/promo/redeem";
        $resourcePath = "promo/redeem";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($redeem_offerpost_payload)) {
            $_tempBody = $redeem_offerpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vces_100\model\RedeemOfferpostResponse',
                '/visacardeligibilityservices/v1/promo/redeem'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vces_100\model\RedeemOfferpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vces_100\model\RedeemOfferpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postvalidateCardEligibility
     *
     * 
     *
     * @param \vces_100\model\ValidateCardEligibilitypostPayload $validate_card_eligibilitypost_payload Request body (required)
     * @throws \vces_100\ApiException on non-2xx response
     * @return \vces_100\model\ValidateCardEligibilitypostResponse
     */
    public function postvalidateCardEligibility($validate_card_eligibilitypost_payload)
    {
        list($response) = $this->postvalidateCardEligibilityWithHttpInfo($validate_card_eligibilitypost_payload);
        return $response;
    }

    /**
     * Operation postvalidateCardEligibilityWithHttpInfo
     *
     * 
     *
     * @param \vces_100\model\ValidateCardEligibilitypostPayload $validate_card_eligibilitypost_payload Request body (required)
     * @throws \vces_100\ApiException on non-2xx response
     * @return array of \vces_100\model\ValidateCardEligibilitypostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postvalidateCardEligibilityWithHttpInfo($validate_card_eligibilitypost_payload)
    {
        // verify the required parameter 'validate_card_eligibilitypost_payload' is set
        if ($validate_card_eligibilitypost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $validate_card_eligibilitypost_payload when calling postvalidateCardEligibility');
        }
        // parse inputs
        $path = "/visacardeligibilityservices/v1/cardeligibility/validate";
        $resourcePath = "cardeligibility/validate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($validate_card_eligibilitypost_payload)) {
            $_tempBody = $validate_card_eligibilitypost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vces_100\model\ValidateCardEligibilitypostResponse',
                '/visacardeligibilityservices/v1/cardeligibility/validate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vces_100\model\ValidateCardEligibilitypostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vces_100\model\ValidateCardEligibilitypostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/