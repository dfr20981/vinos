<?php
/**
 * PpgsNetworkInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  ca_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Funds Transfer Attributes Inquiry API
 *
 * The Funds Transfer Attributes Inquiry API is often used with a funds transfer to/from a Visa payment account to determine key characteristics of a recipient card before initiating the transfer like country, card-type, block status, etc.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ca_100\model;

use \ArrayAccess;

/**
 * PpgsNetworkInfo Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     ca_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PpgsNetworkInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ppgsNetworkInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'network_id' => 'int',
        'oct_xb_participant' => 'string',
        'billing_currency_code' => 'int',
        'billing_currency_code_minor_digits' => 'string',
        'oct_dom_participant' => 'string',
        'aft_dom_participant' => 'string',
        'card_issuer_country_code' => 'string',
        'card_platform_code' => 'string',
        'aft_xb_participant' => 'string',
        'card_type_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'network_id' => 'networkId',
        'oct_xb_participant' => 'octXbParticipant',
        'billing_currency_code' => 'billingCurrencyCode',
        'billing_currency_code_minor_digits' => 'billingCurrencyCodeMinorDigits',
        'oct_dom_participant' => 'octDomParticipant',
        'aft_dom_participant' => 'aftDomParticipant',
        'card_issuer_country_code' => 'cardIssuerCountryCode',
        'card_platform_code' => 'cardPlatformCode',
        'aft_xb_participant' => 'aftXbParticipant',
        'card_type_code' => 'cardTypeCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'network_id' => 'setNetworkId',
        'oct_xb_participant' => 'setOctXbParticipant',
        'billing_currency_code' => 'setBillingCurrencyCode',
        'billing_currency_code_minor_digits' => 'setBillingCurrencyCodeMinorDigits',
        'oct_dom_participant' => 'setOctDomParticipant',
        'aft_dom_participant' => 'setAftDomParticipant',
        'card_issuer_country_code' => 'setCardIssuerCountryCode',
        'card_platform_code' => 'setCardPlatformCode',
        'aft_xb_participant' => 'setAftXbParticipant',
        'card_type_code' => 'setCardTypeCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'network_id' => 'getNetworkId',
        'oct_xb_participant' => 'getOctXbParticipant',
        'billing_currency_code' => 'getBillingCurrencyCode',
        'billing_currency_code_minor_digits' => 'getBillingCurrencyCodeMinorDigits',
        'oct_dom_participant' => 'getOctDomParticipant',
        'aft_dom_participant' => 'getAftDomParticipant',
        'card_issuer_country_code' => 'getCardIssuerCountryCode',
        'card_platform_code' => 'getCardPlatformCode',
        'aft_xb_participant' => 'getAftXbParticipant',
        'card_type_code' => 'getCardTypeCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['oct_xb_participant'] = isset($data['oct_xb_participant']) ? $data['oct_xb_participant'] : null;
        $this->container['billing_currency_code'] = isset($data['billing_currency_code']) ? $data['billing_currency_code'] : null;
        $this->container['billing_currency_code_minor_digits'] = isset($data['billing_currency_code_minor_digits']) ? $data['billing_currency_code_minor_digits'] : null;
        $this->container['oct_dom_participant'] = isset($data['oct_dom_participant']) ? $data['oct_dom_participant'] : null;
        $this->container['aft_dom_participant'] = isset($data['aft_dom_participant']) ? $data['aft_dom_participant'] : null;
        $this->container['card_issuer_country_code'] = isset($data['card_issuer_country_code']) ? $data['card_issuer_country_code'] : null;
        $this->container['card_platform_code'] = isset($data['card_platform_code']) ? $data['card_platform_code'] : null;
        $this->container['aft_xb_participant'] = isset($data['aft_xb_participant']) ? $data['aft_xb_participant'] : null;
        $this->container['card_type_code'] = isset($data['card_type_code']) ? $data['card_type_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['network_id'] === null) {
            $invalid_properties[] = "'network_id' can't be null";
        }
        if ($this->container['oct_xb_participant'] === null) {
            $invalid_properties[] = "'oct_xb_participant' can't be null";
        }
        if ($this->container['billing_currency_code'] === null) {
            $invalid_properties[] = "'billing_currency_code' can't be null";
        }
        if ($this->container['billing_currency_code_minor_digits'] === null) {
            $invalid_properties[] = "'billing_currency_code_minor_digits' can't be null";
        }
        if ($this->container['oct_dom_participant'] === null) {
            $invalid_properties[] = "'oct_dom_participant' can't be null";
        }
        if ($this->container['aft_dom_participant'] === null) {
            $invalid_properties[] = "'aft_dom_participant' can't be null";
        }
        if ($this->container['card_issuer_country_code'] === null) {
            $invalid_properties[] = "'card_issuer_country_code' can't be null";
        }
        if ($this->container['aft_xb_participant'] === null) {
            $invalid_properties[] = "'aft_xb_participant' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['network_id'] === null) {
            return false;
        }
        if ($this->container['oct_xb_participant'] === null) {
            return false;
        }
        if ($this->container['billing_currency_code'] === null) {
            return false;
        }
        if ($this->container['billing_currency_code_minor_digits'] === null) {
            return false;
        }
        if ($this->container['oct_dom_participant'] === null) {
            return false;
        }
        if ($this->container['aft_dom_participant'] === null) {
            return false;
        }
        if ($this->container['card_issuer_country_code'] === null) {
            return false;
        }
        if ($this->container['aft_xb_participant'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets network_id
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     * @param int $network_id This contains a code that identifies the network.<br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Network Id</a>
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets oct_xb_participant
     * @return string
     */
    public function getOctXbParticipant()
    {
        return $this->container['oct_xb_participant'];
    }

    /**
     * Sets oct_xb_participant
     * @param string $oct_xb_participant Push Funds(OCT) Cross Border Indicator.<br> <b> Note:</b>  <br> Supported only in US for domestic transactions involving Push Payments Gateway Service.
     * @return $this
     */
    public function setOctXbParticipant($oct_xb_participant)
    {
        $this->container['oct_xb_participant'] = $oct_xb_participant;

        return $this;
    }

    /**
     * Gets billing_currency_code
     * @return int
     */
    public function getBillingCurrencyCode()
    {
        return $this->container['billing_currency_code'];
    }

    /**
     * Sets billing_currency_code
     * @param int $billing_currency_code Use a 3-digit numeric currency code for the card billing currency of the PAN.<br>Refer to <a href=\"/request_response_codes#currency_codes\">ISO Codes</a>
     * @return $this
     */
    public function setBillingCurrencyCode($billing_currency_code)
    {
        $this->container['billing_currency_code'] = $billing_currency_code;

        return $this;
    }

    /**
     * Gets billing_currency_code_minor_digits
     * @return string
     */
    public function getBillingCurrencyCodeMinorDigits()
    {
        return $this->container['billing_currency_code_minor_digits'];
    }

    /**
     * Sets billing_currency_code_minor_digits
     * @param string $billing_currency_code_minor_digits Identifies the number of decimal positions that should be present in any amounts for the requested card's billing currency.
     * @return $this
     */
    public function setBillingCurrencyCodeMinorDigits($billing_currency_code_minor_digits)
    {
        $this->container['billing_currency_code_minor_digits'] = $billing_currency_code_minor_digits;

        return $this;
    }

    /**
     * Gets oct_dom_participant
     * @return string
     */
    public function getOctDomParticipant()
    {
        return $this->container['oct_dom_participant'];
    }

    /**
     * Sets oct_dom_participant
     * @param string $oct_dom_participant Push Funds(OCT) Domestic Indicator.<br> <b> Note:</b>  <br> Supported only in US for domestic transactions involving Push Payments Gateway Service.
     * @return $this
     */
    public function setOctDomParticipant($oct_dom_participant)
    {
        $this->container['oct_dom_participant'] = $oct_dom_participant;

        return $this;
    }

    /**
     * Gets aft_dom_participant
     * @return string
     */
    public function getAftDomParticipant()
    {
        return $this->container['aft_dom_participant'];
    }

    /**
     * Sets aft_dom_participant
     * @param string $aft_dom_participant Pull Funds(AFT) Domestic Indicator.<br> <b> Note:</b>  <br> Supported only in US for domestic transactions involving Push Payments Gateway Service.
     * @return $this
     */
    public function setAftDomParticipant($aft_dom_participant)
    {
        $this->container['aft_dom_participant'] = $aft_dom_participant;

        return $this;
    }

    /**
     * Gets card_issuer_country_code
     * @return string
     */
    public function getCardIssuerCountryCode()
    {
        return $this->container['card_issuer_country_code'];
    }

    /**
     * Sets card_issuer_country_code
     * @param string $card_issuer_country_code Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>
     * @return $this
     */
    public function setCardIssuerCountryCode($card_issuer_country_code)
    {
        $this->container['card_issuer_country_code'] = $card_issuer_country_code;

        return $this;
    }

    /**
     * Gets card_platform_code
     * @return string
     */
    public function getCardPlatformCode()
    {
        return $this->container['card_platform_code'];
    }

    /**
     * Sets card_platform_code
     * @param string $card_platform_code Indicates the type of card. This is a 2-character alphabetic code.<br>BZ -  Business.<br>CN -  Consumer.<br>CO -  Commercial.<br>GV -  Government.
     * @return $this
     */
    public function setCardPlatformCode($card_platform_code)
    {
        $this->container['card_platform_code'] = $card_platform_code;

        return $this;
    }

    /**
     * Gets aft_xb_participant
     * @return string
     */
    public function getAftXbParticipant()
    {
        return $this->container['aft_xb_participant'];
    }

    /**
     * Sets aft_xb_participant
     * @param string $aft_xb_participant Pull Funds(AFT) Cross Border Indicator.<br> <b> Note:</b>  <br> Supported only in US for domestic transactions involving Push Payments Gateway Service.
     * @return $this
     */
    public function setAftXbParticipant($aft_xb_participant)
    {
        $this->container['aft_xb_participant'] = $aft_xb_participant;

        return $this;
    }

    /**
     * Gets card_type_code
     * @return string
     */
    public function getCardTypeCode()
    {
        return $this->container['card_type_code'];
    }

    /**
     * Sets card_type_code
     * @param string $card_type_code The code of account funding source for the card, e.g. Credit, Debit, Prepaid, Charge, Deferred Debit.<br>Refer to <a href=\"/request_response_codes#cardTypeCode\">cardTypeCode</a>
     * @return $this
     */
    public function setCardTypeCode($card_type_code)
    {
        $this->container['card_type_code'] = $card_type_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ca_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ca_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/