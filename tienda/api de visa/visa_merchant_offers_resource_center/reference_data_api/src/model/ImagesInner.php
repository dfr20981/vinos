<?php
/**
 * ImagesInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  vmorc_101
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reference Data API
 *
 * The Reference Data API provides developers the set of available reference data from VMORC. Use the &quot;key&quot; information of each reference data option to conduct filtered offer requests.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vmorc_101\model;

use \ArrayAccess;

/**
 * ImagesInner Class Doc Comment
 *
 * @category    Class
 * @package     vmorc_101
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ImagesInner implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'images_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_file_width' => 'string',
        'image_resolution' => 'string',
        'promotion_ids' => 'string',
        'description' => 'string',
        'languages' => 'string',
        'image_file_size' => 'string',
        'logo_alt_tag' => 'string',
        'promotion_channels' => 'string',
        'file_name' => 'string',
        'promotion_channel' => 'string',
        'file_location' => 'string',
        'key' => 'int',
        'language_ids' => 'string',
        'image_file_height' => 'string',
        'promotion_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'image_file_width' => 'imageFileWidth',
        'image_resolution' => 'imageResolution',
        'promotion_ids' => 'promotionIds',
        'description' => 'description',
        'languages' => 'languages',
        'image_file_size' => 'imageFileSize',
        'logo_alt_tag' => 'logoAltTag',
        'promotion_channels' => 'promotionChannels',
        'file_name' => 'fileName',
        'promotion_channel' => 'promotionChannel',
        'file_location' => 'fileLocation',
        'key' => 'key',
        'language_ids' => 'languageIds',
        'image_file_height' => 'imageFileHeight',
        'promotion_id' => 'promotionId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'image_file_width' => 'setImageFileWidth',
        'image_resolution' => 'setImageResolution',
        'promotion_ids' => 'setPromotionIds',
        'description' => 'setDescription',
        'languages' => 'setLanguages',
        'image_file_size' => 'setImageFileSize',
        'logo_alt_tag' => 'setLogoAltTag',
        'promotion_channels' => 'setPromotionChannels',
        'file_name' => 'setFileName',
        'promotion_channel' => 'setPromotionChannel',
        'file_location' => 'setFileLocation',
        'key' => 'setKey',
        'language_ids' => 'setLanguageIds',
        'image_file_height' => 'setImageFileHeight',
        'promotion_id' => 'setPromotionId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'image_file_width' => 'getImageFileWidth',
        'image_resolution' => 'getImageResolution',
        'promotion_ids' => 'getPromotionIds',
        'description' => 'getDescription',
        'languages' => 'getLanguages',
        'image_file_size' => 'getImageFileSize',
        'logo_alt_tag' => 'getLogoAltTag',
        'promotion_channels' => 'getPromotionChannels',
        'file_name' => 'getFileName',
        'promotion_channel' => 'getPromotionChannel',
        'file_location' => 'getFileLocation',
        'key' => 'getKey',
        'language_ids' => 'getLanguageIds',
        'image_file_height' => 'getImageFileHeight',
        'promotion_id' => 'getPromotionId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_file_width'] = isset($data['image_file_width']) ? $data['image_file_width'] : null;
        $this->container['image_resolution'] = isset($data['image_resolution']) ? $data['image_resolution'] : null;
        $this->container['promotion_ids'] = isset($data['promotion_ids']) ? $data['promotion_ids'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['image_file_size'] = isset($data['image_file_size']) ? $data['image_file_size'] : null;
        $this->container['logo_alt_tag'] = isset($data['logo_alt_tag']) ? $data['logo_alt_tag'] : null;
        $this->container['promotion_channels'] = isset($data['promotion_channels']) ? $data['promotion_channels'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['promotion_channel'] = isset($data['promotion_channel']) ? $data['promotion_channel'] : null;
        $this->container['file_location'] = isset($data['file_location']) ? $data['file_location'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['language_ids'] = isset($data['language_ids']) ? $data['language_ids'] : null;
        $this->container['image_file_height'] = isset($data['image_file_height']) ? $data['image_file_height'] : null;
        $this->container['promotion_id'] = isset($data['promotion_id']) ? $data['promotion_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets image_file_width
     * @return string
     */
    public function getImageFileWidth()
    {
        return $this->container['image_file_width'];
    }

    /**
     * Sets image_file_width
     * @param string $image_file_width the pixel width of the image | Non-browser supported image (EPS, TIF) will return an empty String for this field.
     * @return $this
     */
    public function setImageFileWidth($image_file_width)
    {
        $this->container['image_file_width'] = $image_file_width;

        return $this;
    }

    /**
     * Gets image_resolution
     * @return string
     */
    public function getImageResolution()
    {
        return $this->container['image_resolution'];
    }

    /**
     * Sets image_resolution
     * @param string $image_resolution a description provided for the image. Max length: 6 characters
     * @return $this
     */
    public function setImageResolution($image_resolution)
    {
        $this->container['image_resolution'] = $image_resolution;

        return $this;
    }

    /**
     * Gets promotion_ids
     * @return string
     */
    public function getPromotionIds()
    {
        return $this->container['promotion_ids'];
    }

    /**
     * Sets promotion_ids
     * @param string $promotion_ids returns all keys for the promotion channels associated with the image
     * @return $this
     */
    public function setPromotionIds($promotion_ids)
    {
        $this->container['promotion_ids'] = $promotion_ids;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description a description provided for the image. May return an empty String. Max length: 1024 characters
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets languages
     * @return string
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     * @param string $languages returns all languages associated with the logo
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets image_file_size
     * @return string
     */
    public function getImageFileSize()
    {
        return $this->container['image_file_size'];
    }

    /**
     * Sets image_file_size
     * @param string $image_file_size the size of the image file (in KB)
     * @return $this
     */
    public function setImageFileSize($image_file_size)
    {
        $this->container['image_file_size'] = $image_file_size;

        return $this;
    }

    /**
     * Gets logo_alt_tag
     * @return string
     */
    public function getLogoAltTag()
    {
        return $this->container['logo_alt_tag'];
    }

    /**
     * Sets logo_alt_tag
     * @param string $logo_alt_tag the alt tag for the image. May return an empty String
     * @return $this
     */
    public function setLogoAltTag($logo_alt_tag)
    {
        $this->container['logo_alt_tag'] = $logo_alt_tag;

        return $this;
    }

    /**
     * Gets promotion_channels
     * @return string
     */
    public function getPromotionChannels()
    {
        return $this->container['promotion_channels'];
    }

    /**
     * Sets promotion_channels
     * @param string $promotion_channels returns all promotion channels associated with the image
     * @return $this
     */
    public function setPromotionChannels($promotion_channels)
    {
        $this->container['promotion_channels'] = $promotion_channels;

        return $this;
    }

    /**
     * Gets file_name
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     * @param string $file_name name provided for the file. Max length: 50 characters
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets promotion_channel
     * @return string
     */
    public function getPromotionChannel()
    {
        return $this->container['promotion_channel'];
    }

    /**
     * Sets promotion_channel
     * @param string $promotion_channel Deprecated; promotionChannels returns a complete list | Returns a single promotion channel associated with the image
     * @return $this
     */
    public function setPromotionChannel($promotion_channel)
    {
        $this->container['promotion_channel'] = $promotion_channel;

        return $this;
    }

    /**
     * Gets file_location
     * @return string
     */
    public function getFileLocation()
    {
        return $this->container['file_location'];
    }

    /**
     * Sets file_location
     * @param string $file_location the external location for the merchant image file
     * @return $this
     */
    public function setFileLocation($file_location)
    {
        $this->container['file_location'] = $file_location;

        return $this;
    }

    /**
     * Gets key
     * @return int
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     * @param int $key an identifer for the key
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets language_ids
     * @return string
     */
    public function getLanguageIds()
    {
        return $this->container['language_ids'];
    }

    /**
     * Sets language_ids
     * @param string $language_ids returns all keys for the languages associated with the logo
     * @return $this
     */
    public function setLanguageIds($language_ids)
    {
        $this->container['language_ids'] = $language_ids;

        return $this;
    }

    /**
     * Gets image_file_height
     * @return string
     */
    public function getImageFileHeight()
    {
        return $this->container['image_file_height'];
    }

    /**
     * Sets image_file_height
     * @param string $image_file_height the pixel height of the image | Non-browser supported image (EPS, TIF) will return an empty String for this field.
     * @return $this
     */
    public function setImageFileHeight($image_file_height)
    {
        $this->container['image_file_height'] = $image_file_height;

        return $this;
    }

    /**
     * Gets promotion_id
     * @return int
     */
    public function getPromotionId()
    {
        return $this->container['promotion_id'];
    }

    /**
     * Sets promotion_id
     * @param int $promotion_id Deprecated; promotionIds returns a complete list | Returns a single key for the promotion channel associated with the image
     * @return $this
     */
    public function setPromotionId($promotion_id)
    {
        $this->container['promotion_id'] = $promotion_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vmorc_101\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vmorc_101\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/