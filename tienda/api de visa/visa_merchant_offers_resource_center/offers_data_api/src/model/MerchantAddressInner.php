<?php
/**
 * MerchantAddressInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  vmorc_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Offers Data API
 *
 * The Offers Data API provides developers a quick and easy way to retrieve offer information from VMORC. The API allows you to retrieve all your available offers or retrieve specific offers. In an offer-specific request, you may choose to filter your accessible offers by certain offer attributes or you may request for offers by its identifiers.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vmorc_100\model;

use \ArrayAccess;

/**
 * MerchantAddressInner Class Doc Comment
 *
 * @category    Class
 * @package     vmorc_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MerchantAddressInner implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'merchantAddress_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'city' => 'string',
        'languages' => 'string',
        'index_number' => 'int',
        'merchant_key' => 'int',
        'distance' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'longtitude' => 'string',
        'country_name' => 'string',
        'latitude' => 'string',
        'state' => 'string',
        'key' => 'int',
        'language_name' => 'string',
        'postal_code' => 'string',
        'merchant_value' => 'string',
        'language_ids' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'city' => 'city',
        'languages' => 'languages',
        'index_number' => 'indexNumber',
        'merchant_key' => 'merchantKey',
        'distance' => 'distance',
        'address1' => 'address1',
        'address2' => 'address2',
        'longtitude' => 'longtitude',
        'country_name' => 'countryName',
        'latitude' => 'latitude',
        'state' => 'state',
        'key' => 'key',
        'language_name' => 'languageName',
        'postal_code' => 'postalCode',
        'merchant_value' => 'merchantValue',
        'language_ids' => 'languageIds'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'city' => 'setCity',
        'languages' => 'setLanguages',
        'index_number' => 'setIndexNumber',
        'merchant_key' => 'setMerchantKey',
        'distance' => 'setDistance',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'longtitude' => 'setLongtitude',
        'country_name' => 'setCountryName',
        'latitude' => 'setLatitude',
        'state' => 'setState',
        'key' => 'setKey',
        'language_name' => 'setLanguageName',
        'postal_code' => 'setPostalCode',
        'merchant_value' => 'setMerchantValue',
        'language_ids' => 'setLanguageIds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'city' => 'getCity',
        'languages' => 'getLanguages',
        'index_number' => 'getIndexNumber',
        'merchant_key' => 'getMerchantKey',
        'distance' => 'getDistance',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'longtitude' => 'getLongtitude',
        'country_name' => 'getCountryName',
        'latitude' => 'getLatitude',
        'state' => 'getState',
        'key' => 'getKey',
        'language_name' => 'getLanguageName',
        'postal_code' => 'getPostalCode',
        'merchant_value' => 'getMerchantValue',
        'language_ids' => 'getLanguageIds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['index_number'] = isset($data['index_number']) ? $data['index_number'] : null;
        $this->container['merchant_key'] = isset($data['merchant_key']) ? $data['merchant_key'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['longtitude'] = isset($data['longtitude']) ? $data['longtitude'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['language_name'] = isset($data['language_name']) ? $data['language_name'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['merchant_value'] = isset($data['merchant_value']) ? $data['merchant_value'] : null;
        $this->container['language_ids'] = isset($data['language_ids']) ? $data['language_ids'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city the city of the merchant address
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets languages
     * @return string
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     * @param string $languages returns all languages associated with the address
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets index_number
     * @return int
     */
    public function getIndexNumber()
    {
        return $this->container['index_number'];
    }

    /**
     * Sets index_number
     * @param int $index_number an integer identifier to signify the result index for the merchant address (specific to your request). Only displayed for a merchant address reference data request
     * @return $this
     */
    public function setIndexNumber($index_number)
    {
        $this->container['index_number'] = $index_number;

        return $this;
    }

    /**
     * Gets merchant_key
     * @return int
     */
    public function getMerchantKey()
    {
        return $this->container['merchant_key'];
    }

    /**
     * Sets merchant_key
     * @param int $merchant_key the identifying value of the merchant. Only displayed for a merchant address reference data request
     * @return $this
     */
    public function setMerchantKey($merchant_key)
    {
        $this->container['merchant_key'] = $merchant_key;

        return $this;
    }

    /**
     * Gets distance
     * @return string
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     * @param string $distance the distance from the origin to the merchant address. Only displayed when a geolocation filter has been applied and the address has valid latitude and longitude coordinates Max length: Computed - should be less than 20 bytes + distance unit
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param string $address1 the first line of the merchant address. Max length: 200 characters
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 the second line of the merchant. May return an empty String
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets longtitude
     * @return string
     */
    public function getLongtitude()
    {
        return $this->container['longtitude'];
    }

    /**
     * Sets longtitude
     * @param string $longtitude the longitude of the address
     * @return $this
     */
    public function setLongtitude($longtitude)
    {
        $this->container['longtitude'] = $longtitude;

        return $this;
    }

    /**
     * Gets country_name
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     * @param string $country_name the country name
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets latitude
     * @return string
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     * @param string $latitude the latitude of the address
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state the state/province/territory of the merchant address
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets key
     * @return int
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     * @param int $key the identifying value of the merchant address
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets language_name
     * @return string
     */
    public function getLanguageName()
    {
        return $this->container['language_name'];
    }

    /**
     * Sets language_name
     * @param string $language_name Deprecated; languages returns a complete list | A single language associated to the merchant address
     * @return $this
     */
    public function setLanguageName($language_name)
    {
        $this->container['language_name'] = $language_name;

        return $this;
    }

    /**
     * Gets postal_code
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     * @param string $postal_code the postal code/zip code
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets merchant_value
     * @return string
     */
    public function getMerchantValue()
    {
        return $this->container['merchant_value'];
    }

    /**
     * Sets merchant_value
     * @param string $merchant_value the default merchant name. Only displayed for a merchant address reference data request
     * @return $this
     */
    public function setMerchantValue($merchant_value)
    {
        $this->container['merchant_value'] = $merchant_value;

        return $this;
    }

    /**
     * Gets language_ids
     * @return string
     */
    public function getLanguageIds()
    {
        return $this->container['language_ids'];
    }

    /**
     * Sets language_ids
     * @param string $language_ids returns all keys for the languages associated with the address
     * @return $this
     */
    public function setLanguageIds($language_ids)
    {
        $this->container['language_ids'] = $language_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vmorc_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vmorc_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/