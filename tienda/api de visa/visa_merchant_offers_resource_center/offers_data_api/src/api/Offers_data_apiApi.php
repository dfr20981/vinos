<?php
/**
 * Offers_data_apiApi
 * PHP version 5
 *
 * @category Class
 * @package  vmorc_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Offers Data API
 *
 * The Offers Data API provides developers a quick and easy way to retrieve offer information from VMORC. The API allows you to retrieve all your available offers or retrieve specific offers. In an offer-specific request, you may choose to filter your accessible offers by certain offer attributes or you may request for offers by its identifiers.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vmorc_100\api;

use \vmorc_100\ApiClient;
use \vmorc_100\ApiException;
use \vmorc_100\Configuration;
use \vmorc_100\ObjectSerializer;

/**
 * Offers_data_apiApi Class Doc Comment
 *
 * @category Class
 * @package  vmorc_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offers_data_apiApi
{
    /**
     * API Client
     *
     * @var \vmorc_100\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \vmorc_100\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\vmorc_100\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \vmorc_100\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \vmorc_100\ApiClient $apiClient set the API client
     *
     * @return Offers_data_apiApi
     */
    public function setApiClient(\vmorc_100\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getretrieveAllOffers
     *
     * 
     *
     * @param string $start_index A maximum of 500 offer results may be returned in the response. The parameter specifies the index of the total available offer results to start returning in the response. (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return \vmorc_100\model\RetrieveAllOffersgetResponse
     */
    public function getretrieveAllOffers($start_index = null, $max_offers = null)
    {
        list($response) = $this->getretrieveAllOffersWithHttpInfo($start_index, $max_offers);
        return $response;
    }

    /**
     * Operation getretrieveAllOffersWithHttpInfo
     *
     * 
     *
     * @param string $start_index A maximum of 500 offer results may be returned in the response. The parameter specifies the index of the total available offer results to start returning in the response. (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return array of \vmorc_100\model\RetrieveAllOffersgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getretrieveAllOffersWithHttpInfo($start_index = null, $max_offers = null)
    {
        // parse inputs
        $path = "/vmorc/offers/v1/all";
        $resourcePath = "all";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start_index !== null) {
            $queryParams['start_index'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($max_offers !== null) {
            $queryParams['max_offers'] = $this->apiClient->getSerializer()->toQueryValue($max_offers);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vmorc_100\model\RetrieveAllOffersgetResponse',
                '/vmorc/offers/v1/all'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vmorc_100\model\RetrieveAllOffersgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vmorc_100\model\RetrieveAllOffersgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getretrieveOffersByContentId
     *
     * 
     *
     * @param string $contentid Retrieve offers by their content ids. Provide an content id integer or a comma-delimited string of content id integers (required)
     * @param string $updatefrom Request for offers that are updated after a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $updateto Request for offers that are updated before a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $start_index Optional. A maximum of 500 offer results are returned in the offer response. The index indicates which offer within the sorted offer results to start returning in the offer response. Accepts an integer. Default set to 1 (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return \vmorc_100\model\RetrieveOffersByContentIdgetResponse
     */
    public function getretrieveOffersByContentId($contentid, $updatefrom = null, $updateto = null, $start_index = null, $max_offers = null)
    {
        list($response) = $this->getretrieveOffersByContentIdWithHttpInfo($contentid, $updatefrom, $updateto, $start_index, $max_offers);
        return $response;
    }

    /**
     * Operation getretrieveOffersByContentIdWithHttpInfo
     *
     * 
     *
     * @param string $contentid Retrieve offers by their content ids. Provide an content id integer or a comma-delimited string of content id integers (required)
     * @param string $updatefrom Request for offers that are updated after a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $updateto Request for offers that are updated before a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $start_index Optional. A maximum of 500 offer results are returned in the offer response. The index indicates which offer within the sorted offer results to start returning in the offer response. Accepts an integer. Default set to 1 (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return array of \vmorc_100\model\RetrieveOffersByContentIdgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getretrieveOffersByContentIdWithHttpInfo($contentid, $updatefrom = null, $updateto = null, $start_index = null, $max_offers = null)
    {
        // verify the required parameter 'contentid' is set
        if ($contentid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contentid when calling getretrieveOffersByContentId');
        }
        // parse inputs
        $path = "/vmorc/offers/v1/bycontentid";
        $resourcePath = "bycontentid";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($contentid !== null) {
            $queryParams['contentid'] = $this->apiClient->getSerializer()->toQueryValue($contentid);
        }
        // query params
        if ($updatefrom !== null) {
            $queryParams['updatefrom'] = $this->apiClient->getSerializer()->toQueryValue($updatefrom);
        }
        // query params
        if ($updateto !== null) {
            $queryParams['updateto'] = $this->apiClient->getSerializer()->toQueryValue($updateto);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['start_index'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($max_offers !== null) {
            $queryParams['max_offers'] = $this->apiClient->getSerializer()->toQueryValue($max_offers);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vmorc_100\model\RetrieveOffersByContentIdgetResponse',
                '/vmorc/offers/v1/bycontentid'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vmorc_100\model\RetrieveOffersByContentIdgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vmorc_100\model\RetrieveOffersByContentIdgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getretrieveOffersByFilter
     *
     * 
     *
     * @param string $business_segment Filter offers by business segments. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#business_segments\&quot;&gt;business_segments&lt;/a&gt; for sample values and keys. (optional)
     * @param string $card_payment_type Filter offers by card payment types. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#card_payment_types\&quot;&gt;card_payment_types&lt;/a&gt; for sample values and keys. (optional)
     * @param string $card_product Filter offers by card products. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#card_product\&quot;&gt;card_product&lt;/a&gt; for sample values and keys. (optional)
     * @param string $category Filter offers by offer categories. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#category_and_subcategory\&quot;&gt;category_subcategory&lt;/a&gt; for sample values and keys. (optional)
     * @param string $subcategory Filter offers by offer subcategories. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#category_and_subcategory\&quot;&gt;category_subcategory&lt;/a&gt; for sample values and keys. (optional)
     * @param string $merchant Filter offers by merchants. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers   Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#merchant\&quot;&gt;merchant&lt;/a&gt; for sample values and keys. (optional)
     * @param string $program Filter offers by programs. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#program\&quot;&gt;program&lt;/a&gt; for sample values and keys. (optional)
     * @param string $promotion_channel Filter offers by promotion channels. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers   Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#promotion_channel\&quot;&gt;promotion_channel&lt;/a&gt; for sample values and keys. (optional)
     * @param string $promoting_region Filter offers by promoting regions. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#region\&quot;&gt;region&lt;/a&gt; for sample values and keys. (optional)
     * @param string $promoting_country Filter offers by promoting countries. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers    Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#country\&quot;&gt;country&lt;/a&gt; for sample values and keys. (optional)
     * @param string $redemption_region Filter offers by redemption regions. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers    Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#region\&quot;&gt;region&lt;/a&gt; for sample values and keys. (optional)
     * @param string $redemption_country Filter offers by redemption countries. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#country\&quot;&gt;country&lt;/a&gt; for sample values and keys. (optional)
     * @param string $merchant_region Filter for offers that have been assigned a merchant address in at least one merchant address region parameter   Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#region\&quot;&gt;region&lt;/a&gt; for sample values and keys. (optional)
     * @param string $merchant_county Filter for offers that have been assigned a merchant address in at least one merchant address country parameter    Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#country\&quot;&gt;country&lt;/a&gt; for sample values and keys. (optional)
     * @param string $language Filter offers by offer languages. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers (optional)
     * @param string $expired Request for expired offers. Provide a boolean value. Default set to value to \&quot;false\&quot;. (optional)
     * @param string $validfrom Request for offers where the offer&#39;s redemption end date is on or after the provided date (in GMT). Accepts a date formatted by: yyyyMMdd e.g. 1, If validfrom&#x3D;20150101 is provided, this returns eligible offers that end on or after January 1, 2015 e.g. 2, If validfrom&#x3D;20150101&amp;validto&#x3D;20150131, this will return eligible offers that end on or after January 1, 2015 and start on or before January 31, 2015 (valid during at least one day in January 2015). (optional)
     * @param string $validto Request for offers where the offer’s redemption start date is before or on the provided date (in GMT). Accepts a date formatted   by: yyyyMMdd e.g. 1, If validto&#x3D;20150131 is provided, this will     return eligible offers that start before or on January 31,       2015 e.g. 2, If validfrom&#x3D;20150101&amp;validto&#x3D;20150131, this will return eligible offers that end on or after January 1, 2015 and start on or before January 31, 2015 (valid during at least one day in January 2015). (optional)
     * @param string $promotedfrom Request for offers where the offer’s promotion end date is on or  after the provided date (in GMT). Accepts a date formatted by: yyyyMMdd e.g. 1, If promotedfrom&#x3D;20150101 is provided, this will / return eligible offers where the promotion ends on or after January 1, 2015 e.g. 2, If promotedfrom&#x3D;20150101&amp;promotedto&#x3D;20150131, this will return eligible offers where the promotion ends on or after January 1, 2015 and start on or before January 31, 2015 (promoted at least one day in January 2015). (optional)
     * @param string $promotedto Request for offers where the offer’s promotion start date is before or on the provided date (in GMT). Accepts a date formatted by: yyyyMMdd e.g. 1, If promotedto&#x3D;20150131 is provided, this will return eligible offers where the promotion starts before or on January 31, 2015 e.g. 2, If promotedfrom&#x3D;20150101&amp;promotedto&#x3D;20150131, this will return eligible offers where the promotion ends on or after January 1, 2015 and start on or before January 31, 2015 (promoted at least one day in January 2015). (optional)
     * @param string $updatefrom Request for offers where the provided date is before or on an offer’s last modified date/time (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $updateto Request for offers where the provided date is after or on an       offer’s last modified date/time (in GMT). Accepts a date     formatted by: yyyyMMdd (optional)
     * @param string $featured Request for featured offers. Provide a boolean value. (optional)
     * @param string $start_index A maximum of 500 offer results are returned in the offer response. The index indicates which offer within the sorted offer results to start returning in the offer response. Accepts an integer. Default set to 1 (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @param string $bins Request for offers that fulfill one or more BIN options by inputting the exact desired bin value(s). Comma-delimit for multiple values (optional)
     * @param string $rpins Request for offers that fulfill one or more RPIN options by inputting the exact desired rpin value(s). Comma-delimit for multiple values (optional)
     * @param string $bins_to_rpins Request for offers that fulfill one or more BIN to RPIN pairing options by inputting the exact desired bin value, a tilde(\&quot;~\&quot;), and the exact rpin value. (optional)
     * @param string $accountranges Request for offers that fulfill a specific Account Range by     providing either  a \&quot;from\&quot; prefix value OR a \&quot;to\&quot; prefix value OR a \&quot;from\&quot; and a \&quot;to\&quot; prefix values. Each provided prefix value   must be a minimum of 4 digits. Each account range request must contain a colon(\&quot;:\&quot;) to distinguish between the \&quot;from\&quot; and \&quot;to\&quot; values (even if only one boundary is provided). (optional)
     * @param string $accountranges_to_rpins Request for offers that fulfill a specific Account Range to RPIN pairing by providing either a \&quot;from\&quot; prefix value ~ RPIN OR a \&quot;to\&quot; prefix value ~ RPIN OR a \&quot;from\&quot; and a \&quot;to\&quot; prefix values ~ RPIN. Each provided account range prefix value must be a minimum of 4 digits. Each account range portion of the request must contain a colon(\&quot;:\&quot;) to distinguish between the \&quot;from\&quot; and \&quot;to\&quot; values (even if only one boundary is provided). Use a tilde(\&quot;~\&quot;) to separate the account range from the exact desired rpin. (optional)
     * @param string $pans Request for offers by PAN (must be a minimum of 16 digits). The provided PAN is padded-right with \&quot;0\&quot; to a length of 21 digits. The system returns the offers where the padded value is within the subset of at least one of the offer&#39;s account range assignments. (optional)
     * @param string $non_card_attribute Request for offers that do not have assignments to card attribute fields. Provide a boolean value. Default sets value to \&quot;false\&quot;. (optional)
     * @param string $origin Required for applying a geolocation filter. Input the origin by specifying the latitude, a comma (\&quot;,\&quot;), and the longitude. Coordinates must be inputted in decimal degree format. The accepted range for latitude is between -90 and 90, inclusive. The accepted range for longitude is between -180 and 180, inclusive. (optional)
     * @param string $radius Optional for applying a geolocation filter.. A maximum radius of 1000 (kilometers) or 621.371 (miles) is accepted. Default sets to 60 miles (or 100 kilometers if the \&quot;unit\&quot; geolocation parameter has been set to \&quot;km\&quot;). (optional)
     * @param string $unit Optional for applying a geolocation filter.. Indicate the distance unit of miles or kilometers. Default sets to miles. To use kilometers, specify \&quot;km\&quot;. (optional)
     * @param string $non_geo Optional for applying a geolocation filter.. Request for offers that have not been assigned merchant addresses with geo-location(latitude/longitude) coordinates. At minimum, an origin must be also provided to call this flag. Accepts a boolean value - By default, the boolean value is set to false. (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return \vmorc_100\model\RetrieveOffersByFiltergetResponse
     */
    public function getretrieveOffersByFilter($business_segment = null, $card_payment_type = null, $card_product = null, $category = null, $subcategory = null, $merchant = null, $program = null, $promotion_channel = null, $promoting_region = null, $promoting_country = null, $redemption_region = null, $redemption_country = null, $merchant_region = null, $merchant_county = null, $language = null, $expired = null, $validfrom = null, $validto = null, $promotedfrom = null, $promotedto = null, $updatefrom = null, $updateto = null, $featured = null, $start_index = null, $max_offers = null, $bins = null, $rpins = null, $bins_to_rpins = null, $accountranges = null, $accountranges_to_rpins = null, $pans = null, $non_card_attribute = null, $origin = null, $radius = null, $unit = null, $non_geo = null)
    {
        list($response) = $this->getretrieveOffersByFilterWithHttpInfo($business_segment, $card_payment_type, $card_product, $category, $subcategory, $merchant, $program, $promotion_channel, $promoting_region, $promoting_country, $redemption_region, $redemption_country, $merchant_region, $merchant_county, $language, $expired, $validfrom, $validto, $promotedfrom, $promotedto, $updatefrom, $updateto, $featured, $start_index, $max_offers, $bins, $rpins, $bins_to_rpins, $accountranges, $accountranges_to_rpins, $pans, $non_card_attribute, $origin, $radius, $unit, $non_geo);
        return $response;
    }

    /**
     * Operation getretrieveOffersByFilterWithHttpInfo
     *
     * 
     *
     * @param string $business_segment Filter offers by business segments. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#business_segments\&quot;&gt;business_segments&lt;/a&gt; for sample values and keys. (optional)
     * @param string $card_payment_type Filter offers by card payment types. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#card_payment_types\&quot;&gt;card_payment_types&lt;/a&gt; for sample values and keys. (optional)
     * @param string $card_product Filter offers by card products. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#card_product\&quot;&gt;card_product&lt;/a&gt; for sample values and keys. (optional)
     * @param string $category Filter offers by offer categories. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#category_and_subcategory\&quot;&gt;category_subcategory&lt;/a&gt; for sample values and keys. (optional)
     * @param string $subcategory Filter offers by offer subcategories. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#category_and_subcategory\&quot;&gt;category_subcategory&lt;/a&gt; for sample values and keys. (optional)
     * @param string $merchant Filter offers by merchants. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers   Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#merchant\&quot;&gt;merchant&lt;/a&gt; for sample values and keys. (optional)
     * @param string $program Filter offers by programs. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#program\&quot;&gt;program&lt;/a&gt; for sample values and keys. (optional)
     * @param string $promotion_channel Filter offers by promotion channels. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers   Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#promotion_channel\&quot;&gt;promotion_channel&lt;/a&gt; for sample values and keys. (optional)
     * @param string $promoting_region Filter offers by promoting regions. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#region\&quot;&gt;region&lt;/a&gt; for sample values and keys. (optional)
     * @param string $promoting_country Filter offers by promoting countries. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers    Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#country\&quot;&gt;country&lt;/a&gt; for sample values and keys. (optional)
     * @param string $redemption_region Filter offers by redemption regions. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers    Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#region\&quot;&gt;region&lt;/a&gt; for sample values and keys. (optional)
     * @param string $redemption_country Filter offers by redemption countries. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers  Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#country\&quot;&gt;country&lt;/a&gt; for sample values and keys. (optional)
     * @param string $merchant_region Filter for offers that have been assigned a merchant address in at least one merchant address region parameter   Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#region\&quot;&gt;region&lt;/a&gt; for sample values and keys. (optional)
     * @param string $merchant_county Filter for offers that have been assigned a merchant address in at least one merchant address country parameter    Refer to &lt;a href&#x3D;\&quot;/guides/request_response_codes#country\&quot;&gt;country&lt;/a&gt; for sample values and keys. (optional)
     * @param string $language Filter offers by offer languages. Provide one \&quot;key\&quot; integer or a comma-delimited string of \&quot;key\&quot; integers (optional)
     * @param string $expired Request for expired offers. Provide a boolean value. Default set to value to \&quot;false\&quot;. (optional)
     * @param string $validfrom Request for offers where the offer&#39;s redemption end date is on or after the provided date (in GMT). Accepts a date formatted by: yyyyMMdd e.g. 1, If validfrom&#x3D;20150101 is provided, this returns eligible offers that end on or after January 1, 2015 e.g. 2, If validfrom&#x3D;20150101&amp;validto&#x3D;20150131, this will return eligible offers that end on or after January 1, 2015 and start on or before January 31, 2015 (valid during at least one day in January 2015). (optional)
     * @param string $validto Request for offers where the offer’s redemption start date is before or on the provided date (in GMT). Accepts a date formatted   by: yyyyMMdd e.g. 1, If validto&#x3D;20150131 is provided, this will     return eligible offers that start before or on January 31,       2015 e.g. 2, If validfrom&#x3D;20150101&amp;validto&#x3D;20150131, this will return eligible offers that end on or after January 1, 2015 and start on or before January 31, 2015 (valid during at least one day in January 2015). (optional)
     * @param string $promotedfrom Request for offers where the offer’s promotion end date is on or  after the provided date (in GMT). Accepts a date formatted by: yyyyMMdd e.g. 1, If promotedfrom&#x3D;20150101 is provided, this will / return eligible offers where the promotion ends on or after January 1, 2015 e.g. 2, If promotedfrom&#x3D;20150101&amp;promotedto&#x3D;20150131, this will return eligible offers where the promotion ends on or after January 1, 2015 and start on or before January 31, 2015 (promoted at least one day in January 2015). (optional)
     * @param string $promotedto Request for offers where the offer’s promotion start date is before or on the provided date (in GMT). Accepts a date formatted by: yyyyMMdd e.g. 1, If promotedto&#x3D;20150131 is provided, this will return eligible offers where the promotion starts before or on January 31, 2015 e.g. 2, If promotedfrom&#x3D;20150101&amp;promotedto&#x3D;20150131, this will return eligible offers where the promotion ends on or after January 1, 2015 and start on or before January 31, 2015 (promoted at least one day in January 2015). (optional)
     * @param string $updatefrom Request for offers where the provided date is before or on an offer’s last modified date/time (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $updateto Request for offers where the provided date is after or on an       offer’s last modified date/time (in GMT). Accepts a date     formatted by: yyyyMMdd (optional)
     * @param string $featured Request for featured offers. Provide a boolean value. (optional)
     * @param string $start_index A maximum of 500 offer results are returned in the offer response. The index indicates which offer within the sorted offer results to start returning in the offer response. Accepts an integer. Default set to 1 (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @param string $bins Request for offers that fulfill one or more BIN options by inputting the exact desired bin value(s). Comma-delimit for multiple values (optional)
     * @param string $rpins Request for offers that fulfill one or more RPIN options by inputting the exact desired rpin value(s). Comma-delimit for multiple values (optional)
     * @param string $bins_to_rpins Request for offers that fulfill one or more BIN to RPIN pairing options by inputting the exact desired bin value, a tilde(\&quot;~\&quot;), and the exact rpin value. (optional)
     * @param string $accountranges Request for offers that fulfill a specific Account Range by     providing either  a \&quot;from\&quot; prefix value OR a \&quot;to\&quot; prefix value OR a \&quot;from\&quot; and a \&quot;to\&quot; prefix values. Each provided prefix value   must be a minimum of 4 digits. Each account range request must contain a colon(\&quot;:\&quot;) to distinguish between the \&quot;from\&quot; and \&quot;to\&quot; values (even if only one boundary is provided). (optional)
     * @param string $accountranges_to_rpins Request for offers that fulfill a specific Account Range to RPIN pairing by providing either a \&quot;from\&quot; prefix value ~ RPIN OR a \&quot;to\&quot; prefix value ~ RPIN OR a \&quot;from\&quot; and a \&quot;to\&quot; prefix values ~ RPIN. Each provided account range prefix value must be a minimum of 4 digits. Each account range portion of the request must contain a colon(\&quot;:\&quot;) to distinguish between the \&quot;from\&quot; and \&quot;to\&quot; values (even if only one boundary is provided). Use a tilde(\&quot;~\&quot;) to separate the account range from the exact desired rpin. (optional)
     * @param string $pans Request for offers by PAN (must be a minimum of 16 digits). The provided PAN is padded-right with \&quot;0\&quot; to a length of 21 digits. The system returns the offers where the padded value is within the subset of at least one of the offer&#39;s account range assignments. (optional)
     * @param string $non_card_attribute Request for offers that do not have assignments to card attribute fields. Provide a boolean value. Default sets value to \&quot;false\&quot;. (optional)
     * @param string $origin Required for applying a geolocation filter. Input the origin by specifying the latitude, a comma (\&quot;,\&quot;), and the longitude. Coordinates must be inputted in decimal degree format. The accepted range for latitude is between -90 and 90, inclusive. The accepted range for longitude is between -180 and 180, inclusive. (optional)
     * @param string $radius Optional for applying a geolocation filter.. A maximum radius of 1000 (kilometers) or 621.371 (miles) is accepted. Default sets to 60 miles (or 100 kilometers if the \&quot;unit\&quot; geolocation parameter has been set to \&quot;km\&quot;). (optional)
     * @param string $unit Optional for applying a geolocation filter.. Indicate the distance unit of miles or kilometers. Default sets to miles. To use kilometers, specify \&quot;km\&quot;. (optional)
     * @param string $non_geo Optional for applying a geolocation filter.. Request for offers that have not been assigned merchant addresses with geo-location(latitude/longitude) coordinates. At minimum, an origin must be also provided to call this flag. Accepts a boolean value - By default, the boolean value is set to false. (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return array of \vmorc_100\model\RetrieveOffersByFiltergetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getretrieveOffersByFilterWithHttpInfo($business_segment = null, $card_payment_type = null, $card_product = null, $category = null, $subcategory = null, $merchant = null, $program = null, $promotion_channel = null, $promoting_region = null, $promoting_country = null, $redemption_region = null, $redemption_country = null, $merchant_region = null, $merchant_county = null, $language = null, $expired = null, $validfrom = null, $validto = null, $promotedfrom = null, $promotedto = null, $updatefrom = null, $updateto = null, $featured = null, $start_index = null, $max_offers = null, $bins = null, $rpins = null, $bins_to_rpins = null, $accountranges = null, $accountranges_to_rpins = null, $pans = null, $non_card_attribute = null, $origin = null, $radius = null, $unit = null, $non_geo = null)
    {
        // parse inputs
        $path = "/vmorc/offers/v1/byfilter";
        $resourcePath = "byfilter";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($business_segment !== null) {
            $queryParams['business_segment'] = $this->apiClient->getSerializer()->toQueryValue($business_segment);
        }
        // query params
        if ($card_payment_type !== null) {
            $queryParams['card_payment_type'] = $this->apiClient->getSerializer()->toQueryValue($card_payment_type);
        }
        // query params
        if ($card_product !== null) {
            $queryParams['card_product'] = $this->apiClient->getSerializer()->toQueryValue($card_product);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = $this->apiClient->getSerializer()->toQueryValue($category);
        }
        // query params
        if ($subcategory !== null) {
            $queryParams['subcategory'] = $this->apiClient->getSerializer()->toQueryValue($subcategory);
        }
        // query params
        if ($merchant !== null) {
            $queryParams['merchant'] = $this->apiClient->getSerializer()->toQueryValue($merchant);
        }
        // query params
        if ($program !== null) {
            $queryParams['program'] = $this->apiClient->getSerializer()->toQueryValue($program);
        }
        // query params
        if ($promotion_channel !== null) {
            $queryParams['promotion_channel'] = $this->apiClient->getSerializer()->toQueryValue($promotion_channel);
        }
        // query params
        if ($promoting_region !== null) {
            $queryParams['promoting_region'] = $this->apiClient->getSerializer()->toQueryValue($promoting_region);
        }
        // query params
        if ($promoting_country !== null) {
            $queryParams['promoting_country'] = $this->apiClient->getSerializer()->toQueryValue($promoting_country);
        }
        // query params
        if ($redemption_region !== null) {
            $queryParams['redemption_region'] = $this->apiClient->getSerializer()->toQueryValue($redemption_region);
        }
        // query params
        if ($redemption_country !== null) {
            $queryParams['redemption_country'] = $this->apiClient->getSerializer()->toQueryValue($redemption_country);
        }
        // query params
        if ($merchant_region !== null) {
            $queryParams['merchant_region'] = $this->apiClient->getSerializer()->toQueryValue($merchant_region);
        }
        // query params
        if ($merchant_county !== null) {
            $queryParams['merchant_county'] = $this->apiClient->getSerializer()->toQueryValue($merchant_county);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($expired !== null) {
            $queryParams['expired'] = $this->apiClient->getSerializer()->toQueryValue($expired);
        }
        // query params
        if ($validfrom !== null) {
            $queryParams['validfrom'] = $this->apiClient->getSerializer()->toQueryValue($validfrom);
        }
        // query params
        if ($validto !== null) {
            $queryParams['validto'] = $this->apiClient->getSerializer()->toQueryValue($validto);
        }
        // query params
        if ($promotedfrom !== null) {
            $queryParams['promotedfrom'] = $this->apiClient->getSerializer()->toQueryValue($promotedfrom);
        }
        // query params
        if ($promotedto !== null) {
            $queryParams['promotedto'] = $this->apiClient->getSerializer()->toQueryValue($promotedto);
        }
        // query params
        if ($updatefrom !== null) {
            $queryParams['updatefrom'] = $this->apiClient->getSerializer()->toQueryValue($updatefrom);
        }
        // query params
        if ($updateto !== null) {
            $queryParams['updateto'] = $this->apiClient->getSerializer()->toQueryValue($updateto);
        }
        // query params
        if ($featured !== null) {
            $queryParams['featured'] = $this->apiClient->getSerializer()->toQueryValue($featured);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['start_index'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($max_offers !== null) {
            $queryParams['max_offers'] = $this->apiClient->getSerializer()->toQueryValue($max_offers);
        }
        // query params
        if ($bins !== null) {
            $queryParams['bins'] = $this->apiClient->getSerializer()->toQueryValue($bins);
        }
        // query params
        if ($rpins !== null) {
            $queryParams['rpins'] = $this->apiClient->getSerializer()->toQueryValue($rpins);
        }
        // query params
        if ($bins_to_rpins !== null) {
            $queryParams['bins_to_rpins'] = $this->apiClient->getSerializer()->toQueryValue($bins_to_rpins);
        }
        // query params
        if ($accountranges !== null) {
            $queryParams['accountranges'] = $this->apiClient->getSerializer()->toQueryValue($accountranges);
        }
        // query params
        if ($accountranges_to_rpins !== null) {
            $queryParams['accountranges_to_rpins'] = $this->apiClient->getSerializer()->toQueryValue($accountranges_to_rpins);
        }
        // query params
        if ($pans !== null) {
            $queryParams['pans'] = $this->apiClient->getSerializer()->toQueryValue($pans);
        }
        // query params
        if ($non_card_attribute !== null) {
            $queryParams['non_cardAttribute'] = $this->apiClient->getSerializer()->toQueryValue($non_card_attribute);
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($unit !== null) {
            $queryParams['unit'] = $this->apiClient->getSerializer()->toQueryValue($unit);
        }
        // query params
        if ($non_geo !== null) {
            $queryParams['non_geo'] = $this->apiClient->getSerializer()->toQueryValue($non_geo);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vmorc_100\model\RetrieveOffersByFiltergetResponse',
                '/vmorc/offers/v1/byfilter'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vmorc_100\model\RetrieveOffersByFiltergetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vmorc_100\model\RetrieveOffersByFiltergetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getretrieveOffersByOfferId
     *
     * 
     *
     * @param string $offerid Retrieve offers by their offer ids. Provide an offer id integer or a comma-delimited string of offer id integers (required)
     * @param string $updatefrom Request for offers that are updated after a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $updateto Request for offers that are updated before a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $start_index Optional. A maximum of 500 offer results are returned in the offer response. The index indicates which offer within the sorted offer results to start returning in the offer response. Accepts an integer. Default set to 1 (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return \vmorc_100\model\RetrieveOffersByOfferIdgetResponse
     */
    public function getretrieveOffersByOfferId($offerid, $updatefrom = null, $updateto = null, $start_index = null, $max_offers = null)
    {
        list($response) = $this->getretrieveOffersByOfferIdWithHttpInfo($offerid, $updatefrom, $updateto, $start_index, $max_offers);
        return $response;
    }

    /**
     * Operation getretrieveOffersByOfferIdWithHttpInfo
     *
     * 
     *
     * @param string $offerid Retrieve offers by their offer ids. Provide an offer id integer or a comma-delimited string of offer id integers (required)
     * @param string $updatefrom Request for offers that are updated after a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $updateto Request for offers that are updated before a specified date (in GMT). Accepts a date formatted by: yyyyMMdd (optional)
     * @param string $start_index Optional. A maximum of 500 offer results are returned in the offer response. The index indicates which offer within the sorted offer results to start returning in the offer response. Accepts an integer. Default set to 1 (optional)
     * @param string $max_offers Optional. A maximum of 500 offer results are returned in the offer response. The index indicates the maximum number of offers to return in the response. Accepts an integer (greater than 0; less than or equal to 500). Default set to 500 (optional)
     * @throws \vmorc_100\ApiException on non-2xx response
     * @return array of \vmorc_100\model\RetrieveOffersByOfferIdgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getretrieveOffersByOfferIdWithHttpInfo($offerid, $updatefrom = null, $updateto = null, $start_index = null, $max_offers = null)
    {
        // verify the required parameter 'offerid' is set
        if ($offerid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offerid when calling getretrieveOffersByOfferId');
        }
        // parse inputs
        $path = "/vmorc/offers/v1/byofferid";
        $resourcePath = "byofferid";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offerid !== null) {
            $queryParams['offerid'] = $this->apiClient->getSerializer()->toQueryValue($offerid);
        }
        // query params
        if ($updatefrom !== null) {
            $queryParams['updatefrom'] = $this->apiClient->getSerializer()->toQueryValue($updatefrom);
        }
        // query params
        if ($updateto !== null) {
            $queryParams['updateto'] = $this->apiClient->getSerializer()->toQueryValue($updateto);
        }
        // query params
        if ($start_index !== null) {
            $queryParams['start_index'] = $this->apiClient->getSerializer()->toQueryValue($start_index);
        }
        // query params
        if ($max_offers !== null) {
            $queryParams['max_offers'] = $this->apiClient->getSerializer()->toQueryValue($max_offers);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vmorc_100\model\RetrieveOffersByOfferIdgetResponse',
                '/vmorc/offers/v1/byofferid'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vmorc_100\model\RetrieveOffersByOfferIdgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vmorc_100\model\RetrieveOffersByOfferIdgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/