<?php
/**
 * CardvalidationpostResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  cv_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Account Validation API
 *
 * The Payment Account Validation API allows applications to run validations of the payment account before processing a transaction ensuring greater probability of success and allowing for a more seamless transaction flow.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace cv_100\model;

use \ArrayAccess;

/**
 * CardvalidationpostResponse Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     cv_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CardvalidationpostResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'cardvalidationpostResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'approval_code' => 'string',
        'card_verification_results' => 'string',
        'card_authentication_results' => 'string',
        'transaction_identifier' => 'int',
        'cardholder_authentication_verification_results' => 'string',
        'cvv2_result_code' => 'string',
        'response_code' => 'string',
        'action_code' => 'string',
        'address_verification_results' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'approval_code' => 'approvalCode',
        'card_verification_results' => 'cardVerificationResults',
        'card_authentication_results' => 'cardAuthenticationResults',
        'transaction_identifier' => 'transactionIdentifier',
        'cardholder_authentication_verification_results' => 'cardholderAuthenticationVerificationResults',
        'cvv2_result_code' => 'cvv2ResultCode',
        'response_code' => 'responseCode',
        'action_code' => 'actionCode',
        'address_verification_results' => 'addressVerificationResults'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'approval_code' => 'setApprovalCode',
        'card_verification_results' => 'setCardVerificationResults',
        'card_authentication_results' => 'setCardAuthenticationResults',
        'transaction_identifier' => 'setTransactionIdentifier',
        'cardholder_authentication_verification_results' => 'setCardholderAuthenticationVerificationResults',
        'cvv2_result_code' => 'setCvv2ResultCode',
        'response_code' => 'setResponseCode',
        'action_code' => 'setActionCode',
        'address_verification_results' => 'setAddressVerificationResults'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'approval_code' => 'getApprovalCode',
        'card_verification_results' => 'getCardVerificationResults',
        'card_authentication_results' => 'getCardAuthenticationResults',
        'transaction_identifier' => 'getTransactionIdentifier',
        'cardholder_authentication_verification_results' => 'getCardholderAuthenticationVerificationResults',
        'cvv2_result_code' => 'getCvv2ResultCode',
        'response_code' => 'getResponseCode',
        'action_code' => 'getActionCode',
        'address_verification_results' => 'getAddressVerificationResults'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approval_code'] = isset($data['approval_code']) ? $data['approval_code'] : null;
        $this->container['card_verification_results'] = isset($data['card_verification_results']) ? $data['card_verification_results'] : null;
        $this->container['card_authentication_results'] = isset($data['card_authentication_results']) ? $data['card_authentication_results'] : null;
        $this->container['transaction_identifier'] = isset($data['transaction_identifier']) ? $data['transaction_identifier'] : null;
        $this->container['cardholder_authentication_verification_results'] = isset($data['cardholder_authentication_verification_results']) ? $data['cardholder_authentication_verification_results'] : null;
        $this->container['cvv2_result_code'] = isset($data['cvv2_result_code']) ? $data['cvv2_result_code'] : null;
        $this->container['response_code'] = isset($data['response_code']) ? $data['response_code'] : null;
        $this->container['action_code'] = isset($data['action_code']) ? $data['action_code'] : null;
        $this->container['address_verification_results'] = isset($data['address_verification_results']) ? $data['address_verification_results'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['transaction_identifier'] === null) {
            $invalid_properties[] = "'transaction_identifier' can't be null";
        }
        if ($this->container['response_code'] === null) {
            $invalid_properties[] = "'response_code' can't be null";
        }
        if ($this->container['action_code'] === null) {
            $invalid_properties[] = "'action_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['transaction_identifier'] === null) {
            return false;
        }
        if ($this->container['response_code'] === null) {
            return false;
        }
        if ($this->container['action_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets approval_code
     * @return string
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     * @param string $approval_code The authorization code from the issuer.
     * @return $this
     */
    public function setApprovalCode($approval_code)
    {
        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets card_verification_results
     * @return string
     */
    public function getCardVerificationResults()
    {
        return $this->container['card_verification_results'];
    }

    /**
     * Sets card_verification_results
     * @param string $card_verification_results A Visa-defined code indicating Card Verification Value (CVV), iCVV (Integrated Chip Card CVV) or dCVV (dynamic CVV) verification results. <br>Refer to <a href=\"/request_response_codes#cvv_icvv_results_codes\"> CVV/iCVV Results Codes.</a><br><b>Note: </b>Reserved for future use
     * @return $this
     */
    public function setCardVerificationResults($card_verification_results)
    {
        $this->container['card_verification_results'] = $card_verification_results;

        return $this;
    }

    /**
     * Gets card_authentication_results
     * @return string
     */
    public function getCardAuthenticationResults()
    {
        return $this->container['card_authentication_results'];
    }

    /**
     * Sets card_authentication_results
     * @param string $card_authentication_results A Visa-defined code indicating Online Card Authentication Method results. <br>Refer to <a href=\"/request_response_codes#card_authentication_results\">cardAuthenticationResults.</a><br><b>Note: </b>Reserved for future use
     * @return $this
     */
    public function setCardAuthenticationResults($card_authentication_results)
    {
        $this->container['card_authentication_results'] = $card_authentication_results;

        return $this;
    }

    /**
     * Gets transaction_identifier
     * @return int
     */
    public function getTransactionIdentifier()
    {
        return $this->container['transaction_identifier'];
    }

    /**
     * Sets transaction_identifier
     * @param int $transaction_identifier The VisaNet reference number for the transaction.
     * @return $this
     */
    public function setTransactionIdentifier($transaction_identifier)
    {
        $this->container['transaction_identifier'] = $transaction_identifier;

        return $this;
    }

    /**
     * Gets cardholder_authentication_verification_results
     * @return string
     */
    public function getCardholderAuthenticationVerificationResults()
    {
        return $this->container['cardholder_authentication_verification_results'];
    }

    /**
     * Sets cardholder_authentication_verification_results
     * @param string $cardholder_authentication_verification_results Results of the Cardholder Authentication Verification Value (CAVV) validation. <br>Refer to <a href=\"/request_response_codes#cardholder_authentication_verification_value\">CAVV Results Codes.</a><br><b>Note: </b>Reserved for future use
     * @return $this
     */
    public function setCardholderAuthenticationVerificationResults($cardholder_authentication_verification_results)
    {
        $this->container['cardholder_authentication_verification_results'] = $cardholder_authentication_verification_results;

        return $this;
    }

    /**
     * Gets cvv2_result_code
     * @return string
     */
    public function getCvv2ResultCode()
    {
        return $this->container['cvv2_result_code'];
    }

    /**
     * Sets cvv2_result_code
     * @param string $cvv2_result_code Results of the CVV2 validation for the primaryAccountNumber in the request.<br>Refer to <a href=\"/request_response_codes#card_verification2_results\">cvv2ResultsCode</a>
     * @return $this
     */
    public function setCvv2ResultCode($cvv2_result_code)
    {
        $this->container['cvv2_result_code'] = $cvv2_result_code;

        return $this;
    }

    /**
     * Gets response_code
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     * @param string $response_code The source for the response; typically, either the recipient issuer or a Visa system. <br>Refer to <a href=\"/request_response_codes#response_code\">Response Code</a>
     * @return $this
     */
    public function setResponseCode($response_code)
    {
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets action_code
     * @return string
     */
    public function getActionCode()
    {
        return $this->container['action_code'];
    }

    /**
     * Sets action_code
     * @param string $action_code The results of the transaction request.<br>Refer to <a href=\"/request_response_codes#action_code\">Action Code</a> <br><b>Note: </b>The VisaNet Response Code for the transaction
     * @return $this
     */
    public function setActionCode($action_code)
    {
        $this->container['action_code'] = $action_code;

        return $this;
    }

    /**
     * Gets address_verification_results
     * @return string
     */
    public function getAddressVerificationResults()
    {
        return $this->container['address_verification_results'];
    }

    /**
     * Sets address_verification_results
     * @param string $address_verification_results Results of the Address Verification Service (AVS) validation for the PrimaryAccountNumber in the request. <br>Refer to <a href=\"/request_response_codes#address_verification_results\">Address Verification Results</a>
     * @return $this
     */
    public function setAddressVerificationResults($address_verification_results)
    {
        $this->container['address_verification_results'] = $address_verification_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\cv_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\cv_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/