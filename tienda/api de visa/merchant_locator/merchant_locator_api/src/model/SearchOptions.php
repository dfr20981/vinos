<?php
/**
 * SearchOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  ml_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Locator API
 *
 * Find Visa accepting merchants around by geolocation
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ml_100\model;

use \ArrayAccess;

/**
 * SearchOptions Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     ml_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchOptions implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'searchOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wildcard' => 'string',
        'match_score' => 'bool',
        'max_records' => 'int',
        'proximity' => 'string',
        'match_indicators' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'wildcard' => 'wildcard',
        'match_score' => 'matchScore',
        'max_records' => 'maxRecords',
        'proximity' => 'proximity',
        'match_indicators' => 'matchIndicators'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'wildcard' => 'setWildcard',
        'match_score' => 'setMatchScore',
        'max_records' => 'setMaxRecords',
        'proximity' => 'setProximity',
        'match_indicators' => 'setMatchIndicators'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'wildcard' => 'getWildcard',
        'match_score' => 'getMatchScore',
        'max_records' => 'getMaxRecords',
        'proximity' => 'getProximity',
        'match_indicators' => 'getMatchIndicators'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wildcard'] = isset($data['wildcard']) ? $data['wildcard'] : null;
        $this->container['match_score'] = isset($data['match_score']) ? $data['match_score'] : null;
        $this->container['max_records'] = isset($data['max_records']) ? $data['max_records'] : null;
        $this->container['proximity'] = isset($data['proximity']) ? $data['proximity'] : null;
        $this->container['match_indicators'] = isset($data['match_indicators']) ? $data['match_indicators'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['wildcard'] === null) {
            $invalid_properties[] = "'wildcard' can't be null";
        }
        if ($this->container['match_score'] === null) {
            $invalid_properties[] = "'match_score' can't be null";
        }
        if ($this->container['max_records'] === null) {
            $invalid_properties[] = "'max_records' can't be null";
        }
        if ($this->container['proximity'] === null) {
            $invalid_properties[] = "'proximity' can't be null";
        }
        if ($this->container['match_indicators'] === null) {
            $invalid_properties[] = "'match_indicators' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['wildcard'] === null) {
            return false;
        }
        if ($this->container['match_score'] === null) {
            return false;
        }
        if ($this->container['max_records'] === null) {
            return false;
        }
        if ($this->container['proximity'] === null) {
            return false;
        }
        if ($this->container['match_indicators'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets wildcard
     * @return string
     */
    public function getWildcard()
    {
        return $this->container['wildcard'];
    }

    /**
     * Sets wildcard
     * @param string $wildcard Allows user to search on Merchant Name using wildcards
     * @return $this
     */
    public function setWildcard($wildcard)
    {
        $this->container['wildcard'] = $wildcard;

        return $this;
    }

    /**
     * Gets match_score
     * @return bool
     */
    public function getMatchScore()
    {
        return $this->container['match_score'];
    }

    /**
     * Sets match_score
     * @param bool $match_score Allows user to define if they would like to see the matchScore and receive the response in order of MatchScore
     * @return $this
     */
    public function setMatchScore($match_score)
    {
        $this->container['match_score'] = $match_score;

        return $this;
    }

    /**
     * Gets max_records
     * @return int
     */
    public function getMaxRecords()
    {
        return $this->container['max_records'];
    }

    /**
     * Sets max_records
     * @param int $max_records Allows user to define maximum number of records to be sent in the response. If the User doesn’t set the maxRecords the value will be set by default to 25. Note: Response records will be unique and sent in order of highest to lowest Match Score
     * @return $this
     */
    public function setMaxRecords($max_records)
    {
        $this->container['max_records'] = $max_records;

        return $this;
    }

    /**
     * Gets proximity
     * @return string
     */
    public function getProximity()
    {
        return $this->container['proximity'];
    }

    /**
     * Sets proximity
     * @param string $proximity Allows user to do a proximity search on Merchant Name (upto 1 spaces). Note: Proximity Search cannot be combined with Wildcard. If wildcards are used proximity will be ignored.
     * @return $this
     */
    public function setProximity($proximity)
    {
        $this->container['proximity'] = $proximity;

        return $this;
    }

    /**
     * Gets match_indicators
     * @return bool
     */
    public function getMatchIndicators()
    {
        return $this->container['match_indicators'];
    }

    /**
     * Sets match_indicators
     * @param bool $match_indicators Allows user to define if they would like to see which request attributes found a matching record
     * @return $this
     */
    public function setMatchIndicators($match_indicators)
    {
        $this->container['match_indicators'] = $match_indicators;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ml_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ml_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/