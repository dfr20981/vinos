<?php
/**
 * SearchAttrList
 *
 * PHP version 5
 *
 * @category Class
 * @package  ml_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Locator API
 *
 * Find Visa accepting merchants around by geolocation
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ml_100\model;

use \ArrayAccess;

/**
 * SearchAttrList Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     ml_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchAttrList implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'searchAttrList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'distance' => 'int',
        'merchant_street_address' => 'string',
        'merchant_category_code' => 'string',
        'merchant_name' => 'string',
        'merchant_city' => 'string',
        'merchant_state' => 'string',
        'longitude' => 'string',
        'latitude' => 'string',
        'merchant_country_code' => 'int',
        'distance_unit' => 'string',
        'merchant_postal_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'distance' => 'Distance',
        'merchant_street_address' => 'merchantStreetAddress',
        'merchant_category_code' => 'MerchantCategoryCode',
        'merchant_name' => 'merchantName',
        'merchant_city' => 'merchantCity',
        'merchant_state' => 'merchantState',
        'longitude' => 'longitude',
        'latitude' => 'latitude',
        'merchant_country_code' => 'merchantCountryCode',
        'distance_unit' => 'DistanceUnit',
        'merchant_postal_code' => 'merchantPostalCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'distance' => 'setDistance',
        'merchant_street_address' => 'setMerchantStreetAddress',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'merchant_name' => 'setMerchantName',
        'merchant_city' => 'setMerchantCity',
        'merchant_state' => 'setMerchantState',
        'longitude' => 'setLongitude',
        'latitude' => 'setLatitude',
        'merchant_country_code' => 'setMerchantCountryCode',
        'distance_unit' => 'setDistanceUnit',
        'merchant_postal_code' => 'setMerchantPostalCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'distance' => 'getDistance',
        'merchant_street_address' => 'getMerchantStreetAddress',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'merchant_name' => 'getMerchantName',
        'merchant_city' => 'getMerchantCity',
        'merchant_state' => 'getMerchantState',
        'longitude' => 'getLongitude',
        'latitude' => 'getLatitude',
        'merchant_country_code' => 'getMerchantCountryCode',
        'distance_unit' => 'getDistanceUnit',
        'merchant_postal_code' => 'getMerchantPostalCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['merchant_street_address'] = isset($data['merchant_street_address']) ? $data['merchant_street_address'] : null;
        $this->container['merchant_category_code'] = isset($data['merchant_category_code']) ? $data['merchant_category_code'] : null;
        $this->container['merchant_name'] = isset($data['merchant_name']) ? $data['merchant_name'] : null;
        $this->container['merchant_city'] = isset($data['merchant_city']) ? $data['merchant_city'] : null;
        $this->container['merchant_state'] = isset($data['merchant_state']) ? $data['merchant_state'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['merchant_country_code'] = isset($data['merchant_country_code']) ? $data['merchant_country_code'] : null;
        $this->container['distance_unit'] = isset($data['distance_unit']) ? $data['distance_unit'] : null;
        $this->container['merchant_postal_code'] = isset($data['merchant_postal_code']) ? $data['merchant_postal_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['distance'] === null) {
            $invalid_properties[] = "'distance' can't be null";
        }
        if ($this->container['merchant_street_address'] === null) {
            $invalid_properties[] = "'merchant_street_address' can't be null";
        }
        if ($this->container['merchant_category_code'] === null) {
            $invalid_properties[] = "'merchant_category_code' can't be null";
        }
        if ($this->container['merchant_name'] === null) {
            $invalid_properties[] = "'merchant_name' can't be null";
        }
        if ($this->container['merchant_city'] === null) {
            $invalid_properties[] = "'merchant_city' can't be null";
        }
        if ($this->container['merchant_state'] === null) {
            $invalid_properties[] = "'merchant_state' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalid_properties[] = "'longitude' can't be null";
        }
        if ($this->container['latitude'] === null) {
            $invalid_properties[] = "'latitude' can't be null";
        }
        if ($this->container['merchant_country_code'] === null) {
            $invalid_properties[] = "'merchant_country_code' can't be null";
        }
        if ($this->container['distance_unit'] === null) {
            $invalid_properties[] = "'distance_unit' can't be null";
        }
        if ($this->container['merchant_postal_code'] === null) {
            $invalid_properties[] = "'merchant_postal_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['distance'] === null) {
            return false;
        }
        if ($this->container['merchant_street_address'] === null) {
            return false;
        }
        if ($this->container['merchant_category_code'] === null) {
            return false;
        }
        if ($this->container['merchant_name'] === null) {
            return false;
        }
        if ($this->container['merchant_city'] === null) {
            return false;
        }
        if ($this->container['merchant_state'] === null) {
            return false;
        }
        if ($this->container['longitude'] === null) {
            return false;
        }
        if ($this->container['latitude'] === null) {
            return false;
        }
        if ($this->container['merchant_country_code'] === null) {
            return false;
        }
        if ($this->container['distance_unit'] === null) {
            return false;
        }
        if ($this->container['merchant_postal_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets distance
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     * @param int $distance Distance value should be in between 0 to 100
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets merchant_street_address
     * @return string
     */
    public function getMerchantStreetAddress()
    {
        return $this->container['merchant_street_address'];
    }

    /**
     * Sets merchant_street_address
     * @param string $merchant_street_address Address of the registered Merchant
     * @return $this
     */
    public function setMerchantStreetAddress($merchant_street_address)
    {
        $this->container['merchant_street_address'] = $merchant_street_address;

        return $this;
    }

    /**
     * Gets merchant_category_code
     * @return string
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     * @param string $merchant_category_code Category Code Array of the registered Merchant. Note: Merchant Name or Merchant Category Code is Mandatory, cannot have both. Merchant Category Code can be more than one with a comma separation
     * @return $this
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets merchant_name
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     * @param string $merchant_name Name of the Merchant or Supplier Name. Note: Optional when any one of VisaMerchantId or VisaStoreId or BusinessRegistrationId or MerchantUrl or AcquirerCardAcceptorId is provided.
     * @return $this
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets merchant_city
     * @return string
     */
    public function getMerchantCity()
    {
        return $this->container['merchant_city'];
    }

    /**
     * Sets merchant_city
     * @param string $merchant_city City of the registered Merchant
     * @return $this
     */
    public function setMerchantCity($merchant_city)
    {
        $this->container['merchant_city'] = $merchant_city;

        return $this;
    }

    /**
     * Gets merchant_state
     * @return string
     */
    public function getMerchantState()
    {
        return $this->container['merchant_state'];
    }

    /**
     * Sets merchant_state
     * @param string $merchant_state State of the registered Merchant. Ex: US
     * @return $this
     */
    public function setMerchantState($merchant_state)
    {
        $this->container['merchant_state'] = $merchant_state;

        return $this;
    }

    /**
     * Gets longitude
     * @return string
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     * @param string $longitude Longitude value should be  between -180 to +180. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets latitude
     * @return string
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     * @param string $latitude Latitude value should be between -90 to +90. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets merchant_country_code
     * @return int
     */
    public function getMerchantCountryCode()
    {
        return $this->container['merchant_country_code'];
    }

    /**
     * Sets merchant_country_code
     * @param int $merchant_country_code Country Code of the registered Merchant. Merchant Country code is mandatory with MerchantName. Note: Optional when Merchant Category Code is provided and Postal code is not provided
     * @return $this
     */
    public function setMerchantCountryCode($merchant_country_code)
    {
        $this->container['merchant_country_code'] = $merchant_country_code;

        return $this;
    }

    /**
     * Gets distance_unit
     * @return string
     */
    public function getDistanceUnit()
    {
        return $this->container['distance_unit'];
    }

    /**
     * Sets distance_unit
     * @param string $distance_unit Distance Unit should be either KM/M
     * @return $this
     */
    public function setDistanceUnit($distance_unit)
    {
        $this->container['distance_unit'] = $distance_unit;

        return $this;
    }

    /**
     * Gets merchant_postal_code
     * @return string
     */
    public function getMerchantPostalCode()
    {
        return $this->container['merchant_postal_code'];
    }

    /**
     * Sets merchant_postal_code
     * @param string $merchant_postal_code Postal Code of the registered Merchant. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both. Merchant Country Code is mandatory with Postal Code.
     * @return $this
     */
    public function setMerchantPostalCode($merchant_postal_code)
    {
        $this->container['merchant_postal_code'] = $merchant_postal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ml_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ml_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/