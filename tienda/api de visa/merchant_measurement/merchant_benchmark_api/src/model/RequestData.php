<?php
/**
 * RequestData
 *
 * PHP version 5
 *
 * @category Class
 * @package  mb_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Benchmark API
 *
 * Deliver Visa’s data insights and other key analytics to our clients through the Visa Developer Platform
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace mb_100\model;

use \ArrayAccess;

/**
 * RequestData Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     mb_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RequestData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'requestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group_list' => 'string',
        'msa_list' => 'string',
        'merchant_category_code_list' => 'string',
        'pos_entry_mode_list' => 'string',
        'postal_code_list' => 'string',
        'country_subdivision_list' => 'string',
        'card_present_indicator' => 'string',
        'account_funding_source_list' => 'string',
        'eci_indicator_list' => 'string',
        'merchant_category_groups_code_list' => 'string',
        'month_list' => 'string',
        'platform_id_list' => 'string',
        'merchant_country' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'group_list' => 'groupList',
        'msa_list' => 'msaList',
        'merchant_category_code_list' => 'merchantCategoryCodeList',
        'pos_entry_mode_list' => 'posEntryModeList',
        'postal_code_list' => 'postalCodeList',
        'country_subdivision_list' => 'countrySubdivisionList',
        'card_present_indicator' => 'cardPresentIndicator',
        'account_funding_source_list' => 'accountFundingSourceList',
        'eci_indicator_list' => 'eciIndicatorList',
        'merchant_category_groups_code_list' => 'merchantCategoryGroupsCodeList',
        'month_list' => 'monthList',
        'platform_id_list' => 'platformIDList',
        'merchant_country' => 'merchantCountry'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'group_list' => 'setGroupList',
        'msa_list' => 'setMsaList',
        'merchant_category_code_list' => 'setMerchantCategoryCodeList',
        'pos_entry_mode_list' => 'setPosEntryModeList',
        'postal_code_list' => 'setPostalCodeList',
        'country_subdivision_list' => 'setCountrySubdivisionList',
        'card_present_indicator' => 'setCardPresentIndicator',
        'account_funding_source_list' => 'setAccountFundingSourceList',
        'eci_indicator_list' => 'setEciIndicatorList',
        'merchant_category_groups_code_list' => 'setMerchantCategoryGroupsCodeList',
        'month_list' => 'setMonthList',
        'platform_id_list' => 'setPlatformIdList',
        'merchant_country' => 'setMerchantCountry'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'group_list' => 'getGroupList',
        'msa_list' => 'getMsaList',
        'merchant_category_code_list' => 'getMerchantCategoryCodeList',
        'pos_entry_mode_list' => 'getPosEntryModeList',
        'postal_code_list' => 'getPostalCodeList',
        'country_subdivision_list' => 'getCountrySubdivisionList',
        'card_present_indicator' => 'getCardPresentIndicator',
        'account_funding_source_list' => 'getAccountFundingSourceList',
        'eci_indicator_list' => 'getEciIndicatorList',
        'merchant_category_groups_code_list' => 'getMerchantCategoryGroupsCodeList',
        'month_list' => 'getMonthList',
        'platform_id_list' => 'getPlatformIdList',
        'merchant_country' => 'getMerchantCountry'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['group_list'] = isset($data['group_list']) ? $data['group_list'] : null;
        $this->container['msa_list'] = isset($data['msa_list']) ? $data['msa_list'] : null;
        $this->container['merchant_category_code_list'] = isset($data['merchant_category_code_list']) ? $data['merchant_category_code_list'] : null;
        $this->container['pos_entry_mode_list'] = isset($data['pos_entry_mode_list']) ? $data['pos_entry_mode_list'] : null;
        $this->container['postal_code_list'] = isset($data['postal_code_list']) ? $data['postal_code_list'] : null;
        $this->container['country_subdivision_list'] = isset($data['country_subdivision_list']) ? $data['country_subdivision_list'] : null;
        $this->container['card_present_indicator'] = isset($data['card_present_indicator']) ? $data['card_present_indicator'] : null;
        $this->container['account_funding_source_list'] = isset($data['account_funding_source_list']) ? $data['account_funding_source_list'] : null;
        $this->container['eci_indicator_list'] = isset($data['eci_indicator_list']) ? $data['eci_indicator_list'] : null;
        $this->container['merchant_category_groups_code_list'] = isset($data['merchant_category_groups_code_list']) ? $data['merchant_category_groups_code_list'] : null;
        $this->container['month_list'] = isset($data['month_list']) ? $data['month_list'] : null;
        $this->container['platform_id_list'] = isset($data['platform_id_list']) ? $data['platform_id_list'] : null;
        $this->container['merchant_country'] = isset($data['merchant_country']) ? $data['merchant_country'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['group_list'] === null) {
            $invalid_properties[] = "'group_list' can't be null";
        }
        if ($this->container['msa_list'] === null) {
            $invalid_properties[] = "'msa_list' can't be null";
        }
        if ($this->container['merchant_category_code_list'] === null) {
            $invalid_properties[] = "'merchant_category_code_list' can't be null";
        }
        if ($this->container['pos_entry_mode_list'] === null) {
            $invalid_properties[] = "'pos_entry_mode_list' can't be null";
        }
        if ($this->container['postal_code_list'] === null) {
            $invalid_properties[] = "'postal_code_list' can't be null";
        }
        if ($this->container['country_subdivision_list'] === null) {
            $invalid_properties[] = "'country_subdivision_list' can't be null";
        }
        if ($this->container['card_present_indicator'] === null) {
            $invalid_properties[] = "'card_present_indicator' can't be null";
        }
        if ($this->container['account_funding_source_list'] === null) {
            $invalid_properties[] = "'account_funding_source_list' can't be null";
        }
        if ($this->container['eci_indicator_list'] === null) {
            $invalid_properties[] = "'eci_indicator_list' can't be null";
        }
        if ($this->container['merchant_category_groups_code_list'] === null) {
            $invalid_properties[] = "'merchant_category_groups_code_list' can't be null";
        }
        if ($this->container['month_list'] === null) {
            $invalid_properties[] = "'month_list' can't be null";
        }
        if ($this->container['platform_id_list'] === null) {
            $invalid_properties[] = "'platform_id_list' can't be null";
        }
        if ($this->container['merchant_country'] === null) {
            $invalid_properties[] = "'merchant_country' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['group_list'] === null) {
            return false;
        }
        if ($this->container['msa_list'] === null) {
            return false;
        }
        if ($this->container['merchant_category_code_list'] === null) {
            return false;
        }
        if ($this->container['pos_entry_mode_list'] === null) {
            return false;
        }
        if ($this->container['postal_code_list'] === null) {
            return false;
        }
        if ($this->container['country_subdivision_list'] === null) {
            return false;
        }
        if ($this->container['card_present_indicator'] === null) {
            return false;
        }
        if ($this->container['account_funding_source_list'] === null) {
            return false;
        }
        if ($this->container['eci_indicator_list'] === null) {
            return false;
        }
        if ($this->container['merchant_category_groups_code_list'] === null) {
            return false;
        }
        if ($this->container['month_list'] === null) {
            return false;
        }
        if ($this->container['platform_id_list'] === null) {
            return false;
        }
        if ($this->container['merchant_country'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets group_list
     * @return string
     */
    public function getGroupList()
    {
        return $this->container['group_list'];
    }

    /**
     * Sets group_list
     * @param string $group_list Groups for which the end user is registered to the API. Example- Standard/Cardholder/cbreasoncode
     * @return $this
     */
    public function setGroupList($group_list)
    {
        $this->container['group_list'] = $group_list;

        return $this;
    }

    /**
     * Gets msa_list
     * @return string
     */
    public function getMsaList()
    {
        return $this->container['msa_list'];
    }

    /**
     * Sets msa_list
     * @param string $msa_list Valid Metropolitan Statistical Area in US
     * @return $this
     */
    public function setMsaList($msa_list)
    {
        $this->container['msa_list'] = $msa_list;

        return $this;
    }

    /**
     * Gets merchant_category_code_list
     * @return string
     */
    public function getMerchantCategoryCodeList()
    {
        return $this->container['merchant_category_code_list'];
    }

    /**
     * Sets merchant_category_code_list
     * @param string $merchant_category_code_list Any valid merchant category code.
     * @return $this
     */
    public function setMerchantCategoryCodeList($merchant_category_code_list)
    {
        $this->container['merchant_category_code_list'] = $merchant_category_code_list;

        return $this;
    }

    /**
     * Gets pos_entry_mode_list
     * @return string
     */
    public function getPosEntryModeList()
    {
        return $this->container['pos_entry_mode_list'];
    }

    /**
     * Sets pos_entry_mode_list
     * @param string $pos_entry_mode_list Valid Point of Sale Entry Mode
     * @return $this
     */
    public function setPosEntryModeList($pos_entry_mode_list)
    {
        $this->container['pos_entry_mode_list'] = $pos_entry_mode_list;

        return $this;
    }

    /**
     * Gets postal_code_list
     * @return string
     */
    public function getPostalCodeList()
    {
        return $this->container['postal_code_list'];
    }

    /**
     * Sets postal_code_list
     * @param string $postal_code_list Valid Postal Code in the United States
     * @return $this
     */
    public function setPostalCodeList($postal_code_list)
    {
        $this->container['postal_code_list'] = $postal_code_list;

        return $this;
    }

    /**
     * Gets country_subdivision_list
     * @return string
     */
    public function getCountrySubdivisionList()
    {
        return $this->container['country_subdivision_list'];
    }

    /**
     * Sets country_subdivision_list
     * @param string $country_subdivision_list Valid Country Sub Division List
     * @return $this
     */
    public function setCountrySubdivisionList($country_subdivision_list)
    {
        $this->container['country_subdivision_list'] = $country_subdivision_list;

        return $this;
    }

    /**
     * Gets card_present_indicator
     * @return string
     */
    public function getCardPresentIndicator()
    {
        return $this->container['card_present_indicator'];
    }

    /**
     * Sets card_present_indicator
     * @param string $card_present_indicator To differentiatiate between online and in store transactions.Example- CARDPRESENT/CARDNOTPRESENT/ALL
     * @return $this
     */
    public function setCardPresentIndicator($card_present_indicator)
    {
        $this->container['card_present_indicator'] = $card_present_indicator;

        return $this;
    }

    /**
     * Gets account_funding_source_list
     * @return string
     */
    public function getAccountFundingSourceList()
    {
        return $this->container['account_funding_source_list'];
    }

    /**
     * Sets account_funding_source_list
     * @param string $account_funding_source_list Type of Funding Source transactions.
     * @return $this
     */
    public function setAccountFundingSourceList($account_funding_source_list)
    {
        $this->container['account_funding_source_list'] = $account_funding_source_list;

        return $this;
    }

    /**
     * Gets eci_indicator_list
     * @return string
     */
    public function getEciIndicatorList()
    {
        return $this->container['eci_indicator_list'];
    }

    /**
     * Sets eci_indicator_list
     * @param string $eci_indicator_list Valid ECI Indicator.
     * @return $this
     */
    public function setEciIndicatorList($eci_indicator_list)
    {
        $this->container['eci_indicator_list'] = $eci_indicator_list;

        return $this;
    }

    /**
     * Gets merchant_category_groups_code_list
     * @return string
     */
    public function getMerchantCategoryGroupsCodeList()
    {
        return $this->container['merchant_category_groups_code_list'];
    }

    /**
     * Sets merchant_category_groups_code_list
     * @param string $merchant_category_groups_code_list Any valid merchant category group codes.
     * @return $this
     */
    public function setMerchantCategoryGroupsCodeList($merchant_category_groups_code_list)
    {
        $this->container['merchant_category_groups_code_list'] = $merchant_category_groups_code_list;

        return $this;
    }

    /**
     * Gets month_list
     * @return string
     */
    public function getMonthList()
    {
        return $this->container['month_list'];
    }

    /**
     * Sets month_list
     * @param string $month_list Valid Months. Ex: 201601 for Jan 2016
     * @return $this
     */
    public function setMonthList($month_list)
    {
        $this->container['month_list'] = $month_list;

        return $this;
    }

    /**
     * Gets platform_id_list
     * @return string
     */
    public function getPlatformIdList()
    {
        return $this->container['platform_id_list'];
    }

    /**
     * Sets platform_id_list
     * @param string $platform_id_list Valid Product Platform
     * @return $this
     */
    public function setPlatformIdList($platform_id_list)
    {
        $this->container['platform_id_list'] = $platform_id_list;

        return $this;
    }

    /**
     * Gets merchant_country
     * @return string
     */
    public function getMerchantCountry()
    {
        return $this->container['merchant_country'];
    }

    /**
     * Sets merchant_country
     * @param string $merchant_country Valid Merchant Country. Current API supports US only
     * @return $this
     */
    public function setMerchantCountry($merchant_country)
    {
        $this->container['merchant_country'] = $merchant_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\mb_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\mb_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/