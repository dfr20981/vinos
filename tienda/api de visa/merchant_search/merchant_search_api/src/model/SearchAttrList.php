<?php
/**
 * SearchAttrList
 *
 * PHP version 5
 *
 * @category Class
 * @package  ms_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant Search API
 *
 * Search for merchant identification data using the acquirer provide name and card acceptor identifiers
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ms_100\model;

use \ArrayAccess;

/**
 * SearchAttrList Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     ms_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchAttrList implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'searchAttrList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_city' => 'string',
        'merchant_street_address' => 'string',
        'merchant_name' => 'string',
        'merchant_state' => 'string',
        'acquiring_bin' => 'int',
        'merchant_url' => 'string',
        'acquirer_card_acceptor_id' => 'string',
        'merchant_country_code' => 'int',
        'merchant_postal_code' => 'string',
        'business_registration_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_city' => 'merchantCity',
        'merchant_street_address' => 'merchantStreetAddress',
        'merchant_name' => 'merchantName',
        'merchant_state' => 'merchantState',
        'acquiring_bin' => 'acquiringBin',
        'merchant_url' => 'merchantUrl',
        'acquirer_card_acceptor_id' => 'acquirerCardAcceptorId',
        'merchant_country_code' => 'merchantCountryCode',
        'merchant_postal_code' => 'merchantPostalCode',
        'business_registration_id' => 'businessRegistrationId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'merchant_city' => 'setMerchantCity',
        'merchant_street_address' => 'setMerchantStreetAddress',
        'merchant_name' => 'setMerchantName',
        'merchant_state' => 'setMerchantState',
        'acquiring_bin' => 'setAcquiringBin',
        'merchant_url' => 'setMerchantUrl',
        'acquirer_card_acceptor_id' => 'setAcquirerCardAcceptorId',
        'merchant_country_code' => 'setMerchantCountryCode',
        'merchant_postal_code' => 'setMerchantPostalCode',
        'business_registration_id' => 'setBusinessRegistrationId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'merchant_city' => 'getMerchantCity',
        'merchant_street_address' => 'getMerchantStreetAddress',
        'merchant_name' => 'getMerchantName',
        'merchant_state' => 'getMerchantState',
        'acquiring_bin' => 'getAcquiringBin',
        'merchant_url' => 'getMerchantUrl',
        'acquirer_card_acceptor_id' => 'getAcquirerCardAcceptorId',
        'merchant_country_code' => 'getMerchantCountryCode',
        'merchant_postal_code' => 'getMerchantPostalCode',
        'business_registration_id' => 'getBusinessRegistrationId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_city'] = isset($data['merchant_city']) ? $data['merchant_city'] : null;
        $this->container['merchant_street_address'] = isset($data['merchant_street_address']) ? $data['merchant_street_address'] : null;
        $this->container['merchant_name'] = isset($data['merchant_name']) ? $data['merchant_name'] : null;
        $this->container['merchant_state'] = isset($data['merchant_state']) ? $data['merchant_state'] : null;
        $this->container['acquiring_bin'] = isset($data['acquiring_bin']) ? $data['acquiring_bin'] : null;
        $this->container['merchant_url'] = isset($data['merchant_url']) ? $data['merchant_url'] : null;
        $this->container['acquirer_card_acceptor_id'] = isset($data['acquirer_card_acceptor_id']) ? $data['acquirer_card_acceptor_id'] : null;
        $this->container['merchant_country_code'] = isset($data['merchant_country_code']) ? $data['merchant_country_code'] : null;
        $this->container['merchant_postal_code'] = isset($data['merchant_postal_code']) ? $data['merchant_postal_code'] : null;
        $this->container['business_registration_id'] = isset($data['business_registration_id']) ? $data['business_registration_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['merchant_city'] === null) {
            $invalid_properties[] = "'merchant_city' can't be null";
        }
        if ($this->container['merchant_street_address'] === null) {
            $invalid_properties[] = "'merchant_street_address' can't be null";
        }
        if ($this->container['merchant_name'] === null) {
            $invalid_properties[] = "'merchant_name' can't be null";
        }
        if ($this->container['merchant_state'] === null) {
            $invalid_properties[] = "'merchant_state' can't be null";
        }
        if ($this->container['acquiring_bin'] === null) {
            $invalid_properties[] = "'acquiring_bin' can't be null";
        }
        if ($this->container['merchant_url'] === null) {
            $invalid_properties[] = "'merchant_url' can't be null";
        }
        if ($this->container['acquirer_card_acceptor_id'] === null) {
            $invalid_properties[] = "'acquirer_card_acceptor_id' can't be null";
        }
        if ($this->container['merchant_country_code'] === null) {
            $invalid_properties[] = "'merchant_country_code' can't be null";
        }
        if ($this->container['merchant_postal_code'] === null) {
            $invalid_properties[] = "'merchant_postal_code' can't be null";
        }
        if ($this->container['business_registration_id'] === null) {
            $invalid_properties[] = "'business_registration_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['merchant_city'] === null) {
            return false;
        }
        if ($this->container['merchant_street_address'] === null) {
            return false;
        }
        if ($this->container['merchant_name'] === null) {
            return false;
        }
        if ($this->container['merchant_state'] === null) {
            return false;
        }
        if ($this->container['acquiring_bin'] === null) {
            return false;
        }
        if ($this->container['merchant_url'] === null) {
            return false;
        }
        if ($this->container['acquirer_card_acceptor_id'] === null) {
            return false;
        }
        if ($this->container['merchant_country_code'] === null) {
            return false;
        }
        if ($this->container['merchant_postal_code'] === null) {
            return false;
        }
        if ($this->container['business_registration_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchant_city
     * @return string
     */
    public function getMerchantCity()
    {
        return $this->container['merchant_city'];
    }

    /**
     * Sets merchant_city
     * @param string $merchant_city City of the registered Merchant
     * @return $this
     */
    public function setMerchantCity($merchant_city)
    {
        $this->container['merchant_city'] = $merchant_city;

        return $this;
    }

    /**
     * Gets merchant_street_address
     * @return string
     */
    public function getMerchantStreetAddress()
    {
        return $this->container['merchant_street_address'];
    }

    /**
     * Sets merchant_street_address
     * @param string $merchant_street_address Address of the registered Merchant
     * @return $this
     */
    public function setMerchantStreetAddress($merchant_street_address)
    {
        $this->container['merchant_street_address'] = $merchant_street_address;

        return $this;
    }

    /**
     * Gets merchant_name
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     * @param string $merchant_name Name of the Merchant or Supplier. Note: Optional when any one of VisaMerchantId or VisaStoreId or BusinessRegistrationId or MerchantUrl or AcquirerCardAcceptorId is provided.
     * @return $this
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets merchant_state
     * @return string
     */
    public function getMerchantState()
    {
        return $this->container['merchant_state'];
    }

    /**
     * Sets merchant_state
     * @param string $merchant_state State of the registered Merchant. Ex: US
     * @return $this
     */
    public function setMerchantState($merchant_state)
    {
        $this->container['merchant_state'] = $merchant_state;

        return $this;
    }

    /**
     * Gets acquiring_bin
     * @return int
     */
    public function getAcquiringBin()
    {
        return $this->container['acquiring_bin'];
    }

    /**
     * Sets acquiring_bin
     * @param int $acquiring_bin Acquirer Bin number. Required when AcquirerCardAcceptorId is provided
     * @return $this
     */
    public function setAcquiringBin($acquiring_bin)
    {
        $this->container['acquiring_bin'] = $acquiring_bin;

        return $this;
    }

    /**
     * Gets merchant_url
     * @return string
     */
    public function getMerchantUrl()
    {
        return $this->container['merchant_url'];
    }

    /**
     * Sets merchant_url
     * @param string $merchant_url URL of the registered Merchant which provides information about the Merchant. Note: Optional when any one of MerchantName or VisaMerchantId or VisaStoreId or BusinessRegistrationId or AcquirerCardAcceptorId is provided.
     * @return $this
     */
    public function setMerchantUrl($merchant_url)
    {
        $this->container['merchant_url'] = $merchant_url;

        return $this;
    }

    /**
     * Gets acquirer_card_acceptor_id
     * @return string
     */
    public function getAcquirerCardAcceptorId()
    {
        return $this->container['acquirer_card_acceptor_id'];
    }

    /**
     * Sets acquirer_card_acceptor_id
     * @param string $acquirer_card_acceptor_id Acquirer Card Acceptor Id. Pre append ‘0’ if the data is not 15 digit. Note: Optional when any one of MerchantName or VisaMerchantId or VisaStoreId or BusinessRegistrationId or MerchantUrl is provided.
     * @return $this
     */
    public function setAcquirerCardAcceptorId($acquirer_card_acceptor_id)
    {
        $this->container['acquirer_card_acceptor_id'] = $acquirer_card_acceptor_id;

        return $this;
    }

    /**
     * Gets merchant_country_code
     * @return int
     */
    public function getMerchantCountryCode()
    {
        return $this->container['merchant_country_code'];
    }

    /**
     * Sets merchant_country_code
     * @param int $merchant_country_code Country Code of the registered Merchant.Merchant Country code is mandatory with MerchantName
     * @return $this
     */
    public function setMerchantCountryCode($merchant_country_code)
    {
        $this->container['merchant_country_code'] = $merchant_country_code;

        return $this;
    }

    /**
     * Gets merchant_postal_code
     * @return string
     */
    public function getMerchantPostalCode()
    {
        return $this->container['merchant_postal_code'];
    }

    /**
     * Sets merchant_postal_code
     * @param string $merchant_postal_code Postal Code of the registered Merchant
     * @return $this
     */
    public function setMerchantPostalCode($merchant_postal_code)
    {
        $this->container['merchant_postal_code'] = $merchant_postal_code;

        return $this;
    }

    /**
     * Gets business_registration_id
     * @return string
     */
    public function getBusinessRegistrationId()
    {
        return $this->container['business_registration_id'];
    }

    /**
     * Sets business_registration_id
     * @param string $business_registration_id Merchants Business Registration ID/Tax ID.Note: Optional when any one of MerchantName or VisaMerchantId or VisaStoreId or MerchantUrl or AcquirerCardAcceptorId is provided.
     * @return $this
     */
    public function setBusinessRegistrationId($business_registration_id)
    {
        $this->container['business_registration_id'] = $business_registration_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ms_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ms_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/