<?php
/**
 * TravelItinerary
 *
 * PHP version 5
 *
 * @category Class
 * @package  tns_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Travel Notification API
 *
 * Incorporate cardholder self-reported travel into your authorization decisions
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace tns_100\model;

use \ArrayAccess;

/**
 * TravelItinerary Class Doc Comment
 *
 * @category    Class
 * @description An itinierary detail
 * @package     tns_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TravelItinerary implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'travelItinerary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_update_time' => 'string',
        'return_date' => 'string',
        'primary_account_numbers' => '\tns_100\model\PrimaryAccountNumbers',
        'user_id' => 'string',
        'partner_bid' => 'string',
        'source' => 'string',
        'last_updated_by' => 'string',
        'departure_date' => 'string',
        'travel_itinerary_id' => 'string',
        'destinations' => '\tns_100\model\Destinations'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'last_update_time' => 'lastUpdateTime',
        'return_date' => 'returnDate',
        'primary_account_numbers' => 'primaryAccountNumbers',
        'user_id' => 'userId',
        'partner_bid' => 'partnerBid',
        'source' => 'source',
        'last_updated_by' => 'lastUpdatedBy',
        'departure_date' => 'departureDate',
        'travel_itinerary_id' => 'travelItineraryId',
        'destinations' => 'destinations'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'last_update_time' => 'setLastUpdateTime',
        'return_date' => 'setReturnDate',
        'primary_account_numbers' => 'setPrimaryAccountNumbers',
        'user_id' => 'setUserId',
        'partner_bid' => 'setPartnerBid',
        'source' => 'setSource',
        'last_updated_by' => 'setLastUpdatedBy',
        'departure_date' => 'setDepartureDate',
        'travel_itinerary_id' => 'setTravelItineraryId',
        'destinations' => 'setDestinations'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'last_update_time' => 'getLastUpdateTime',
        'return_date' => 'getReturnDate',
        'primary_account_numbers' => 'getPrimaryAccountNumbers',
        'user_id' => 'getUserId',
        'partner_bid' => 'getPartnerBid',
        'source' => 'getSource',
        'last_updated_by' => 'getLastUpdatedBy',
        'departure_date' => 'getDepartureDate',
        'travel_itinerary_id' => 'getTravelItineraryId',
        'destinations' => 'getDestinations'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['return_date'] = isset($data['return_date']) ? $data['return_date'] : null;
        $this->container['primary_account_numbers'] = isset($data['primary_account_numbers']) ? $data['primary_account_numbers'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['partner_bid'] = isset($data['partner_bid']) ? $data['partner_bid'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['last_updated_by'] = isset($data['last_updated_by']) ? $data['last_updated_by'] : null;
        $this->container['departure_date'] = isset($data['departure_date']) ? $data['departure_date'] : null;
        $this->container['travel_itinerary_id'] = isset($data['travel_itinerary_id']) ? $data['travel_itinerary_id'] : null;
        $this->container['destinations'] = isset($data['destinations']) ? $data['destinations'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets last_update_time
     * @return string
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     * @param string $last_update_time Time in format YYYY-MM-DDTHH:MM:SS.
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets return_date
     * @return string
     */
    public function getReturnDate()
    {
        return $this->container['return_date'];
    }

    /**
     * Sets return_date
     * @param string $return_date The date your cardholder will return from their trip. Format is YYYY-MM-DD.
     * @return $this
     */
    public function setReturnDate($return_date)
    {
        $this->container['return_date'] = $return_date;

        return $this;
    }

    /**
     * Gets primary_account_numbers
     * @return \tns_100\model\PrimaryAccountNumbers
     */
    public function getPrimaryAccountNumbers()
    {
        return $this->container['primary_account_numbers'];
    }

    /**
     * Sets primary_account_numbers
     * @param \tns_100\model\PrimaryAccountNumbers $primary_account_numbers
     * @return $this
     */
    public function setPrimaryAccountNumbers($primary_account_numbers)
    {
        $this->container['primary_account_numbers'] = $primary_account_numbers;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id User ID you assigned to identify the cardholder using the service.
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets partner_bid
     * @return string
     */
    public function getPartnerBid()
    {
        return $this->container['partner_bid'];
    }

    /**
     * Sets partner_bid
     * @param string $partner_bid Your Visa Business Identifier (BID).
     * @return $this
     */
    public function setPartnerBid($partner_bid)
    {
        $this->container['partner_bid'] = $partner_bid;

        return $this;
    }

    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param string $source The source of the travel itinerary in the Visa system. When a travel itinerary is submitted to Visa through the Visa Travel Notification Service, the Source field in the response will be Cardholder Self Reported.
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets last_updated_by
     * @return string
     */
    public function getLastUpdatedBy()
    {
        return $this->container['last_updated_by'];
    }

    /**
     * Sets last_updated_by
     * @param string $last_updated_by User who updated the itinerary in current state.
     * @return $this
     */
    public function setLastUpdatedBy($last_updated_by)
    {
        $this->container['last_updated_by'] = $last_updated_by;

        return $this;
    }

    /**
     * Gets departure_date
     * @return string
     */
    public function getDepartureDate()
    {
        return $this->container['departure_date'];
    }

    /**
     * Sets departure_date
     * @param string $departure_date The date your cardholder will start their trip. Format is YYYY-MM-DD.
     * @return $this
     */
    public function setDepartureDate($departure_date)
    {
        $this->container['departure_date'] = $departure_date;

        return $this;
    }

    /**
     * Gets travel_itinerary_id
     * @return string
     */
    public function getTravelItineraryId()
    {
        return $this->container['travel_itinerary_id'];
    }

    /**
     * Sets travel_itinerary_id
     * @param string $travel_itinerary_id Itinerary ID for the travel plan stored in the system.
     * @return $this
     */
    public function setTravelItineraryId($travel_itinerary_id)
    {
        $this->container['travel_itinerary_id'] = $travel_itinerary_id;

        return $this;
    }

    /**
     * Gets destinations
     * @return \tns_100\model\Destinations
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     * @param \tns_100\model\Destinations $destinations
     * @return $this
     */
    public function setDestinations($destinations)
    {
        $this->container['destinations'] = $destinations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\tns_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\tns_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/