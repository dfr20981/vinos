<?php
/**
 * RetrieveTravelItinerary
 *
 * PHP version 5
 *
 * @category Class
 * @package  tns_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Travel Notification API
 *
 * Incorporate cardholder self-reported travel into your authorization decisions
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace tns_100\model;

use \ArrayAccess;

/**
 * RetrieveTravelItinerary Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     tns_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RetrieveTravelItinerary implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'retrieveTravelItinerary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'to_date' => 'string',
        'user_id' => 'string',
        'partner_bid' => 'string',
        'primary_account_number' => '\tns_100\model\PrimaryAccountNumber',
        'from_date' => 'string',
        'travel_itinerary_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'to_date' => 'toDate',
        'user_id' => 'userId',
        'partner_bid' => 'partnerBid',
        'primary_account_number' => 'primaryAccountNumber',
        'from_date' => 'fromDate',
        'travel_itinerary_id' => 'travelItineraryId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'to_date' => 'setToDate',
        'user_id' => 'setUserId',
        'partner_bid' => 'setPartnerBid',
        'primary_account_number' => 'setPrimaryAccountNumber',
        'from_date' => 'setFromDate',
        'travel_itinerary_id' => 'setTravelItineraryId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'to_date' => 'getToDate',
        'user_id' => 'getUserId',
        'partner_bid' => 'getPartnerBid',
        'primary_account_number' => 'getPrimaryAccountNumber',
        'from_date' => 'getFromDate',
        'travel_itinerary_id' => 'getTravelItineraryId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['to_date'] = isset($data['to_date']) ? $data['to_date'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['partner_bid'] = isset($data['partner_bid']) ? $data['partner_bid'] : null;
        $this->container['primary_account_number'] = isset($data['primary_account_number']) ? $data['primary_account_number'] : null;
        $this->container['from_date'] = isset($data['from_date']) ? $data['from_date'] : null;
        $this->container['travel_itinerary_id'] = isset($data['travel_itinerary_id']) ? $data['travel_itinerary_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['partner_bid'] === null) {
            $invalid_properties[] = "'partner_bid' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['partner_bid'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets to_date
     * @return string
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     * @param string $to_date Date of Return for search criteria YYYY-MM-DD
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id The User ID for which you want to retrieve travel itineraries.
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets partner_bid
     * @return string
     */
    public function getPartnerBid()
    {
        return $this->container['partner_bid'];
    }

    /**
     * Sets partner_bid
     * @param string $partner_bid Your Visa Business Identifier (BID).
     * @return $this
     */
    public function setPartnerBid($partner_bid)
    {
        $this->container['partner_bid'] = $partner_bid;

        return $this;
    }

    /**
     * Gets primary_account_number
     * @return \tns_100\model\PrimaryAccountNumber
     */
    public function getPrimaryAccountNumber()
    {
        return $this->container['primary_account_number'];
    }

    /**
     * Sets primary_account_number
     * @param \tns_100\model\PrimaryAccountNumber $primary_account_number
     * @return $this
     */
    public function setPrimaryAccountNumber($primary_account_number)
    {
        $this->container['primary_account_number'] = $primary_account_number;

        return $this;
    }

    /**
     * Gets from_date
     * @return string
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     * @param string $from_date Date of travel departure for search criteria YYYY-MM-DD
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets travel_itinerary_id
     * @return string
     */
    public function getTravelItineraryId()
    {
        return $this->container['travel_itinerary_id'];
    }

    /**
     * Sets travel_itinerary_id
     * @param string $travel_itinerary_id The ID of the travel itinerary that you want to retrieve.
     * @return $this
     */
    public function setTravelItineraryId($travel_itinerary_id)
    {
        $this->container['travel_itinerary_id'] = $travel_itinerary_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\tns_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\tns_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/