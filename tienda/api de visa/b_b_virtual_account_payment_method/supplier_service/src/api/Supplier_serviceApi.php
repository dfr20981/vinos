<?php
/**
 * Supplier_serviceApi
 * PHP version 5
 *
 * @category Class
 * @package  vpa_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Supplier Service
 *
 * The Supplier web service is used for creating and maintaining a supplier.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vpa_101\api;

use \vpa_101\ApiClient;
use \vpa_101\ApiException;
use \vpa_101\Configuration;
use \vpa_101\ObjectSerializer;

/**
 * Supplier_serviceApi Class Doc Comment
 *
 * @category Class
 * @package  vpa_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Supplier_serviceApi
{
    /**
     * API Client
     *
     * @var \vpa_101\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \vpa_101\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\vpa_101\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \vpa_101\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \vpa_101\ApiClient $apiClient set the API client
     *
     * @return Supplier_serviceApi
     */
    public function setApiClient(\vpa_101\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation postcreateSupplier
     *
     * 
     *
     * @param \vpa_101\model\CreateSupplierpostPayload $create_supplierpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return \vpa_101\model\CreateSupplierpostResponse
     */
    public function postcreateSupplier($create_supplierpost_payload)
    {
        list($response) = $this->postcreateSupplierWithHttpInfo($create_supplierpost_payload);
        return $response;
    }

    /**
     * Operation postcreateSupplierWithHttpInfo
     *
     * 
     *
     * @param \vpa_101\model\CreateSupplierpostPayload $create_supplierpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return array of \vpa_101\model\CreateSupplierpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postcreateSupplierWithHttpInfo($create_supplierpost_payload)
    {
        // verify the required parameter 'create_supplierpost_payload' is set
        if ($create_supplierpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_supplierpost_payload when calling postcreateSupplier');
        }
        // parse inputs
        $path = "/vpa/v1/supplier/CreateSupplier";
        $resourcePath = "supplier/CreateSupplier";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_supplierpost_payload)) {
            $_tempBody = $create_supplierpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vpa_101\model\CreateSupplierpostResponse',
                '/vpa/v1/supplier/CreateSupplier'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vpa_101\model\CreateSupplierpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vpa_101\model\CreateSupplierpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postdisableSupplier
     *
     * 
     *
     * @param \vpa_101\model\DisableSupplierpostPayload $disable_supplierpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return \vpa_101\model\DisableSupplierpostResponse
     */
    public function postdisableSupplier($disable_supplierpost_payload)
    {
        list($response) = $this->postdisableSupplierWithHttpInfo($disable_supplierpost_payload);
        return $response;
    }

    /**
     * Operation postdisableSupplierWithHttpInfo
     *
     * 
     *
     * @param \vpa_101\model\DisableSupplierpostPayload $disable_supplierpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return array of \vpa_101\model\DisableSupplierpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postdisableSupplierWithHttpInfo($disable_supplierpost_payload)
    {
        // verify the required parameter 'disable_supplierpost_payload' is set
        if ($disable_supplierpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $disable_supplierpost_payload when calling postdisableSupplier');
        }
        // parse inputs
        $path = "/vpa/v1/supplier/DisableSupplier";
        $resourcePath = "supplier/DisableSupplier";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($disable_supplierpost_payload)) {
            $_tempBody = $disable_supplierpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vpa_101\model\DisableSupplierpostResponse',
                '/vpa/v1/supplier/DisableSupplier'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vpa_101\model\DisableSupplierpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vpa_101\model\DisableSupplierpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postgetsupplierDetails
     *
     * 
     *
     * @param \vpa_101\model\GetsupplierDetailspostPayload $getsupplier_detailspost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return \vpa_101\model\GetsupplierDetailspostResponse
     */
    public function postgetsupplierDetails($getsupplier_detailspost_payload)
    {
        list($response) = $this->postgetsupplierDetailsWithHttpInfo($getsupplier_detailspost_payload);
        return $response;
    }

    /**
     * Operation postgetsupplierDetailsWithHttpInfo
     *
     * 
     *
     * @param \vpa_101\model\GetsupplierDetailspostPayload $getsupplier_detailspost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return array of \vpa_101\model\GetsupplierDetailspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postgetsupplierDetailsWithHttpInfo($getsupplier_detailspost_payload)
    {
        // verify the required parameter 'getsupplier_detailspost_payload' is set
        if ($getsupplier_detailspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $getsupplier_detailspost_payload when calling postgetsupplierDetails');
        }
        // parse inputs
        $path = "/vpa/v1/supplier/GetSupplierDetails";
        $resourcePath = "supplier/GetSupplierDetails";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($getsupplier_detailspost_payload)) {
            $_tempBody = $getsupplier_detailspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vpa_101\model\GetsupplierDetailspostResponse',
                '/vpa/v1/supplier/GetSupplierDetails'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vpa_101\model\GetsupplierDetailspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vpa_101\model\GetsupplierDetailspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmanagesupplierAccount
     *
     * 
     *
     * @param \vpa_101\model\ManagesupplierAccountpostPayload $managesupplier_accountpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return \vpa_101\model\ManagesupplierAccountpostResponse
     */
    public function postmanagesupplierAccount($managesupplier_accountpost_payload)
    {
        list($response) = $this->postmanagesupplierAccountWithHttpInfo($managesupplier_accountpost_payload);
        return $response;
    }

    /**
     * Operation postmanagesupplierAccountWithHttpInfo
     *
     * 
     *
     * @param \vpa_101\model\ManagesupplierAccountpostPayload $managesupplier_accountpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return array of \vpa_101\model\ManagesupplierAccountpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmanagesupplierAccountWithHttpInfo($managesupplier_accountpost_payload)
    {
        // verify the required parameter 'managesupplier_accountpost_payload' is set
        if ($managesupplier_accountpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $managesupplier_accountpost_payload when calling postmanagesupplierAccount');
        }
        // parse inputs
        $path = "/vpa/v1/supplier/ManageSupplierAccount";
        $resourcePath = "supplier/ManageSupplierAccount";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($managesupplier_accountpost_payload)) {
            $_tempBody = $managesupplier_accountpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vpa_101\model\ManagesupplierAccountpostResponse',
                '/vpa/v1/supplier/ManageSupplierAccount'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vpa_101\model\ManagesupplierAccountpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vpa_101\model\ManagesupplierAccountpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postupdateSupplier
     *
     * 
     *
     * @param \vpa_101\model\UpdateSupplierpostPayload $update_supplierpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return \vpa_101\model\UpdateSupplierpostResponse
     */
    public function postupdateSupplier($update_supplierpost_payload)
    {
        list($response) = $this->postupdateSupplierWithHttpInfo($update_supplierpost_payload);
        return $response;
    }

    /**
     * Operation postupdateSupplierWithHttpInfo
     *
     * 
     *
     * @param \vpa_101\model\UpdateSupplierpostPayload $update_supplierpost_payload  (required)
     * @throws \vpa_101\ApiException on non-2xx response
     * @return array of \vpa_101\model\UpdateSupplierpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postupdateSupplierWithHttpInfo($update_supplierpost_payload)
    {
        // verify the required parameter 'update_supplierpost_payload' is set
        if ($update_supplierpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_supplierpost_payload when calling postupdateSupplier');
        }
        // parse inputs
        $path = "/vpa/v1/supplier/UpdateSupplier";
        $resourcePath = "supplier/UpdateSupplier";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_supplierpost_payload)) {
            $_tempBody = $update_supplierpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\vpa_101\model\UpdateSupplierpostResponse',
                '/vpa/v1/supplier/UpdateSupplier'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\vpa_101\model\UpdateSupplierpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\vpa_101\model\UpdateSupplierpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/