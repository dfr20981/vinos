<?php
/**
 * Supplier_serviceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  vpa_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Supplier Service
 *
 * The Supplier web service is used for creating and maintaining a supplier.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace vpa_101\apitest;

require_once (__DIR__.'/../../globalConfig.php');

use \globalConfig\GlobalConfig;

use \vpa_101\Configuration;
use \vpa_101\api\Supplier_serviceApi;

/**
 * Supplier_serviceApiTest Class Doc Comment
 *
 * @category Class
 * @package  vpa_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Supplier_serviceApiTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

        $gc=new GlobalConfig();
        $config = Configuration::getDefaultConfiguration();

        // Configure HTTP basic authorization
        $config->setUsername($gc->getUserName());
        $config->setPassword($gc->getPassword());
        $config->setCertificatePath($gc->getCertificatePath());
        $config->setPrivateKey($gc->getPrivateKeyPath());
        $config->setCaCertPath($gc->getCaCertPath());

        // Configure API key authorization:
        $config->setSharedSecret($gc->getSharedSecret());
        $config->setApiKey("apikey", $gc->getApiKey());

        // Configure proxy settings
        $config->setCurlProxyHost($gc->getProxyHost());
        $config->setCurlProxyPort($gc->getProxyPort());
        $config->setCurlProxyUser($gc->getProxyUser());
        $config->setCurlProxyPassword($gc->getProxyPassword());

        echo '\n.................Testing Supplier_serviceApi...........................\n';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }
    public function transformPayload($oldPayload){
        $payload = $this->editLocalTime($oldPayload);
        $payload = $this->addRandom($payload);
        $payload= json_decode($payload,true);
        return $payload;
    }
    public function editLocalTime($oldPayload){

        date_default_timezone_set("America/Los_Angeles");
        $timestamp = date("Y-m-d\TH:i:s");
        $pattern = '/"localTransactionDateTime":".{19}"/i';
        $replacement = '"localTransactionDateTime": "'.$timestamp.'"';
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $timestamp = date("mdHis");
        $pattern = '/"dateTimeLocal":".{10}"/i';
        $replacement = '"dateTimeLocal": "'.$timestamp.'"';
        return preg_replace($pattern, $replacement, $oldPayload);

    }
    public function addRandom($oldPayload){
        $pattern = '/random/i';
        $replacement = $this->generateRandomString(5);
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $pattern = '/random_integer/i';
        return preg_replace($pattern, '1', $oldPayload);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }
    function generateRandomString($length = 10)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     * Test case for postcreateSupplier
     *
     * .
     *
     */
    public function testPostcreateSupplier()
    {
        echo "\nMaking a call to PostcreateSupplier()\n";

        $api_instance = new Supplier_serviceApi;
        $result = $api_instance->PostcreateSupplier($this->transformPayload('{"supplierDate":"MMDDYYYY","invoiceAttachmentRequired":"Y","supplierState":"CA","supplierLanguage":"en_US","reminderNotificationDays":"9","securityAnswers":[{"questionAnswer":{"questionNumber":"1","securityAnswer":"Test"}},{"questionAnswer":{"questionNumber":"2","securityAnswer":"test2"}},{"questionAnswer":{"questionNumber":"3","securityAnswer":"test3"}}],"supplierType":"VPA","stpId":"","ccEmailAddresses":["test1@visa.com","test2@visa.com","test3@visa.com","aaa@bb.com","aaaa1@cc.com"],"supplierPostalCode":"94404","reminderNotificationRequired":"Y","cardDetails":{"accountNumber":"","currencyCode":"","proxyNumber":"","accountLimit":"100","actionType":"1","expirationDate":"","accountType":"1"},"buyerId":"9210101012","supplierAddressLine2":"Address2","supplierAddressLine1":"Address1","paymentControlRequired":"Y","defaultCurrencyCode":"USD","supplierGLCode":"12345","clientId":"B2BWS_1_1_9999","paymentExpirationDays":"10","supplierId":"APISupp-102","securityCodeRequired":"Y","supplierCountryCode":"USA","primaryEmailAddress":"test@visa.com","messageId":"1525731018854","supplierCity":"FC","enablePin":"","supplierName":"APISupp-102"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postdisableSupplier
     *
     * .
     *
     */
    public function testPostdisableSupplier()
    {
        echo "\nMaking a call to PostdisableSupplier()\n";

        $api_instance = new Supplier_serviceApi;
        $result = $api_instance->PostdisableSupplier($this->transformPayload('{"buyerId":"9999","messageId":"1526076609891","disableReason":"Disabling the supplier","clientId":"B2BWS_1_1_9999","supplierId":"APISupp-102"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postgetsupplierDetails
     *
     * .
     *
     */
    public function testPostgetsupplierDetails()
    {
        echo "\nMaking a call to PostgetsupplierDetails()\n";

        $api_instance = new Supplier_serviceApi;
        $result = $api_instance->PostgetsupplierDetails($this->transformPayload('{"buyerId":"9999","supplierId":"APISupp-102","clientId":"B2BWS_1_1_9999","messageId":"152607008888888"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postmanagesupplierAccount
     *
     * .
     *
     */
    public function testPostmanagesupplierAccount()
    {
        echo "\nMaking a call to PostmanagesupplierAccount()\n";

        $api_instance = new Supplier_serviceApi;
        $result = $api_instance->PostmanagesupplierAccount($this->transformPayload('{"buyerId":"9999","messageId":"1526070076886","supplierId":"APISupp-102","clientId":"B2BWS_1_1_9999","cardDetails":{"accountNumber":"4111111111111111","currencyCode":"USD","accountLimit":"","proxyNumber":"","defaultIndicator":"N","actionType":"4","expirationDate":"09/2018","accountType":"2","disableReason":""}}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postupdateSupplier
     *
     * .
     *
     */
    public function testPostupdateSupplier()
    {
        echo "\nMaking a call to PostupdateSupplier()\n";

        $api_instance = new Supplier_serviceApi;
        $result = $api_instance->PostupdateSupplier($this->transformPayload('{"supplierDate":"MMDDYYYY","invoiceAttachmentRequired":"N","supplierState":"TX","supplierLanguage":"en_US","clientId":"B2BWS_1_1_9999","securityAnswers":[{"questionAnswer":{"questionNumber":"1","securityAnswer":"Test"}},{"questionAnswer":{"questionNumber":"2","securityAnswer":"test2"}},{"questionAnswer":{"questionNumber":"3","securityAnswer":"test3"}}],"supplierType":"VPA","supplierId":"APISupp-103","supplierPostalCode":78759,"reminderNotificationRequired":"N","buyerId":"9999","supplierAddressLine2":"Address2","supplierAddressLine1":"Address1","alternateEmailAddresses":[{"alternateEmailAddress":"aaa1@bbb.com"},{"alternateEmailAddress":"aaa2@bbb.com"},{"alternateEmailAddress":"aaa3@bbb.com"},{"alternateEmailAddress":"aaa4@bbb.com"},{"alternateEmailAddress":"aaa5@bbb.com"}],"paymentControlRequired":"N","supplierCountryCode":"USA","paymentExpirationDays":0,"securityCodeRequired":"N","reminderNotificationDays":0,"primaryEmailAddress":"aaa@bbb.com","messageId":"2018-05-12T18:47:14.000X","supplierCity":"Austin","supplierName":"APISupp-103"}'));

        $this->assertNotNull($result);

    }

}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/