<?php
/**
 * Payment_serviceApiTest
 * PHP version 5
 *
 * @category Class
 * @package  vpa_102
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Service
 *
 * The Payment web service is used for processing payments and sending payment remittance information to the appropriate suppliers.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace vpa_102\apitest;

require_once (__DIR__.'/../../globalConfig.php');

use \globalConfig\GlobalConfig;

use \vpa_102\Configuration;
use \vpa_102\api\Payment_serviceApi;

/**
 * Payment_serviceApiTest Class Doc Comment
 *
 * @category Class
 * @package  vpa_102
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Payment_serviceApiTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

        $gc=new GlobalConfig();
        $config = Configuration::getDefaultConfiguration();

        // Configure HTTP basic authorization
        $config->setUsername($gc->getUserName());
        $config->setPassword($gc->getPassword());
        $config->setCertificatePath($gc->getCertificatePath());
        $config->setPrivateKey($gc->getPrivateKeyPath());
        $config->setCaCertPath($gc->getCaCertPath());

        // Configure API key authorization:
        $config->setSharedSecret($gc->getSharedSecret());
        $config->setApiKey("apikey", $gc->getApiKey());

        // Configure proxy settings
        $config->setCurlProxyHost($gc->getProxyHost());
        $config->setCurlProxyPort($gc->getProxyPort());
        $config->setCurlProxyUser($gc->getProxyUser());
        $config->setCurlProxyPassword($gc->getProxyPassword());

        echo '\n.................Testing Payment_serviceApi...........................\n';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }
    public function transformPayload($oldPayload){
        $payload = $this->editLocalTime($oldPayload);
        $payload = $this->addRandom($payload);
        $payload= json_decode($payload,true);
        return $payload;
    }
    public function editLocalTime($oldPayload){

        date_default_timezone_set("America/Los_Angeles");
        $timestamp = date("Y-m-d\TH:i:s");
        $pattern = '/"localTransactionDateTime":".{19}"/i';
        $replacement = '"localTransactionDateTime": "'.$timestamp.'"';
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $timestamp = date("mdHis");
        $pattern = '/"dateTimeLocal":".{10}"/i';
        $replacement = '"dateTimeLocal": "'.$timestamp.'"';
        return preg_replace($pattern, $replacement, $oldPayload);

    }
    public function addRandom($oldPayload){
        $pattern = '/random/i';
        $replacement = $this->generateRandomString(5);
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $pattern = '/random_integer/i';
        return preg_replace($pattern, '1', $oldPayload);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }
    function generateRandomString($length = 10)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     * Test case for postcancelPayment
     *
     * .
     *
     */
    public function testPostcancelPayment()
    {
        echo "\nMaking a call to PostcancelPayment()\n";

        $api_instance = new Payment_serviceApi;
        $result = $api_instance->PostcancelPayment($this->transformPayload('{"originalMessageId":"1526327698270","buyerId":"9999","clientId":"B2BWS_1_1_9999","cancelReason":"Cancel Payment","messageId":"1526333206624"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postgetpaymentDetails
     *
     * .
     *
     */
    public function testPostgetpaymentDetails()
    {
        echo "\nMaking a call to PostgetpaymentDetails()\n";

        $api_instance = new Payment_serviceApi;
        $result = $api_instance->PostgetpaymentDetails($this->transformPayload('{"Status":"","ToDate":"05142018","resultSetNo":"1","clientId":"B2BWS_1_1_9999","FromDate":"05142018","messageId":"1526333253691","buyerId":"9999","TrackingNumber":""}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postgetpaymentUrl
     *
     * .
     *
     */
    public function testPostgetpaymentUrl()
    {
        echo "\nMaking a call to PostgetpaymentUrl()\n";

        $api_instance = new Payment_serviceApi;
        $result = $api_instance->PostgetpaymentUrl($this->transformPayload('{"originalMessageId":"1526327698270","buyerId":"9999","messageId":"1526332799705","clientId":"B2BWS_1_1_9999","accountNumber":"4111111111111111"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postprocessPayments
     *
     * .
     *
     */
    public function testPostprocessPayments()
    {
        echo "\nMaking a call to PostprocessPayments()\n";

        $api_instance = new Payment_serviceApi;
        $result = $api_instance->PostprocessPayments($this->transformPayload('{"buyerId":"9999","actionType":"1","payment":{"paymentGrossAmount":"2.50","paymentExpiryDate":"2018-05-30","ReferenceFields":["1234","12356"],"cardAccountExpiryDate":"02/2021","invoices":[{"invoiceAmount":"3.75","PurchaseOrderDate":"2018-02-01","PurchaseOrderNumber":"PO1234","invoiceNumber":"INV01","invoiceDate":"2018-04-24"},{"invoiceAmount":"1.25","PurchaseOrderDate":"2018-02-01","PurchaseOrderNumber":"PO1234","invoiceNumber":"INV02","invoiceDate":"2018-04-24"}],"currencyCode":"USD","accountNumber":"411111111111111","paymentRequestDate":"2018-05-14","paymentType":"CCC","accountLimit":"100","PartialPaymentIndicator":"y","accountType":"2","supplier":{"supplierDate":"MMDDYYYY","supplierType":"VPA","stpId":"","supplierId":"RESTAPISupp-007","alternateEmailAddresses":[{"alternateEmailAddress":"abc@company.com"}],"supplierState":"CA","supplierLanguage":"en_US","supplierName":"RESTAPISupp-007","supplierPostalCode":"94404","defaultCurrencyCode":"USD","primaryEmailAddress":"abc@company.com","supplierGLCode":"12345","supplierCity":"FC","enablePin":"N","supplierAddressLine2":"Address2","emailNotes":"B2B WS CVV2 Payment for FXD Account","supplierCountryCode":"USA","supplierAddressLine1":"Address1"}},"clientId":"B2BWS_1_1_9999","messageId":"1526327698270"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postresendPayment
     *
     * .
     *
     */
    public function testPostresendPayment()
    {
        echo "\nMaking a call to PostresendPayment()\n";

        $api_instance = new Payment_serviceApi;
        $result = $api_instance->PostresendPayment($this->transformPayload('{"originalMessageId":"1526329622862","accountNumber":"4111111111111111","alternateEmailAddresses":[{"alternateEmailAddress":"abd@visa.com"},{"alternateEmailAddress":"test@visa.com"},{"alternateEmailAddress":"test1@visa.com"},{"alternateEmailAddress":"test2@visa.com"}],"clientId":"B2BWS_1_1_9999","supplierProfileUpdateIndicator":"Y","primaryEmailAddress":"abc@company.com","messageId":"1526332459024","buyerId":"9999","emailNotes":"resend cvv2 payment adv notificaiton from B2B WS","expirationDate":"2018-06-30"}'));

        $this->assertNotNull($result);

    }

}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/