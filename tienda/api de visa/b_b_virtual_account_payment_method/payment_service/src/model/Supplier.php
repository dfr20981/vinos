<?php
/**
 * Supplier
 *
 * PHP version 5
 *
 * @category Class
 * @package  vpa_102
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Service
 *
 * The Payment web service is used for processing payments and sending payment remittance information to the appropriate suppliers.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vpa_102\model;

use \ArrayAccess;

/**
 * Supplier Class Doc Comment
 *
 * @category    Class
 * @description This complex element contains the details about the Supplier for whom the payment is made
 * @package     vpa_102
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Supplier implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'supplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eft_ach_supplier_id' => 'string',
        'stpid' => 'string',
        'alternate_email_addresses' => '\vpa_102\model\AlternateEmailAddresses',
        'supplier_state' => 'string',
        'supplier_country_code' => 'string',
        'email_notes' => 'string',
        'supplier_postal_code' => 'string',
        'supplier_profile_update_indicator' => 'string',
        'supplier_id' => 'string',
        'primary_email_address' => 'string',
        'supplier_city' => 'string',
        'supplier_address_line2' => 'string',
        'supplier_name' => 'string',
        'supplier_address_line1' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'eft_ach_supplier_id' => 'eftAchSupplierID',
        'stpid' => 'STPID',
        'alternate_email_addresses' => 'alternateEmailAddresses',
        'supplier_state' => 'supplierState',
        'supplier_country_code' => 'supplierCountryCode',
        'email_notes' => 'emailNotes',
        'supplier_postal_code' => 'supplierPostalCode',
        'supplier_profile_update_indicator' => 'supplierProfileUpdateIndicator',
        'supplier_id' => 'supplierID',
        'primary_email_address' => 'primaryEmailAddress',
        'supplier_city' => 'supplierCity',
        'supplier_address_line2' => 'supplierAddressLine2',
        'supplier_name' => 'supplierName',
        'supplier_address_line1' => 'supplierAddressLine1'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'eft_ach_supplier_id' => 'setEftAchSupplierId',
        'stpid' => 'setStpid',
        'alternate_email_addresses' => 'setAlternateEmailAddresses',
        'supplier_state' => 'setSupplierState',
        'supplier_country_code' => 'setSupplierCountryCode',
        'email_notes' => 'setEmailNotes',
        'supplier_postal_code' => 'setSupplierPostalCode',
        'supplier_profile_update_indicator' => 'setSupplierProfileUpdateIndicator',
        'supplier_id' => 'setSupplierId',
        'primary_email_address' => 'setPrimaryEmailAddress',
        'supplier_city' => 'setSupplierCity',
        'supplier_address_line2' => 'setSupplierAddressLine2',
        'supplier_name' => 'setSupplierName',
        'supplier_address_line1' => 'setSupplierAddressLine1'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'eft_ach_supplier_id' => 'getEftAchSupplierId',
        'stpid' => 'getStpid',
        'alternate_email_addresses' => 'getAlternateEmailAddresses',
        'supplier_state' => 'getSupplierState',
        'supplier_country_code' => 'getSupplierCountryCode',
        'email_notes' => 'getEmailNotes',
        'supplier_postal_code' => 'getSupplierPostalCode',
        'supplier_profile_update_indicator' => 'getSupplierProfileUpdateIndicator',
        'supplier_id' => 'getSupplierId',
        'primary_email_address' => 'getPrimaryEmailAddress',
        'supplier_city' => 'getSupplierCity',
        'supplier_address_line2' => 'getSupplierAddressLine2',
        'supplier_name' => 'getSupplierName',
        'supplier_address_line1' => 'getSupplierAddressLine1'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eft_ach_supplier_id'] = isset($data['eft_ach_supplier_id']) ? $data['eft_ach_supplier_id'] : null;
        $this->container['stpid'] = isset($data['stpid']) ? $data['stpid'] : null;
        $this->container['alternate_email_addresses'] = isset($data['alternate_email_addresses']) ? $data['alternate_email_addresses'] : null;
        $this->container['supplier_state'] = isset($data['supplier_state']) ? $data['supplier_state'] : null;
        $this->container['supplier_country_code'] = isset($data['supplier_country_code']) ? $data['supplier_country_code'] : null;
        $this->container['email_notes'] = isset($data['email_notes']) ? $data['email_notes'] : null;
        $this->container['supplier_postal_code'] = isset($data['supplier_postal_code']) ? $data['supplier_postal_code'] : null;
        $this->container['supplier_profile_update_indicator'] = isset($data['supplier_profile_update_indicator']) ? $data['supplier_profile_update_indicator'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['primary_email_address'] = isset($data['primary_email_address']) ? $data['primary_email_address'] : null;
        $this->container['supplier_city'] = isset($data['supplier_city']) ? $data['supplier_city'] : null;
        $this->container['supplier_address_line2'] = isset($data['supplier_address_line2']) ? $data['supplier_address_line2'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['supplier_address_line1'] = isset($data['supplier_address_line1']) ? $data['supplier_address_line1'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['supplier_id'] === null) {
            $invalid_properties[] = "'supplier_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['supplier_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets eft_ach_supplier_id
     * @return string
     */
    public function getEftAchSupplierId()
    {
        return $this->container['eft_ach_supplier_id'];
    }

    /**
     * Sets eft_ach_supplier_id
     * @param string $eft_ach_supplier_id EFT/ACH Supplier id in the Invapay system
     * @return $this
     */
    public function setEftAchSupplierId($eft_ach_supplier_id)
    {
        $this->container['eft_ach_supplier_id'] = $eft_ach_supplier_id;

        return $this;
    }

    /**
     * Gets stpid
     * @return string
     */
    public function getStpid()
    {
        return $this->container['stpid'];
    }

    /**
     * Sets stpid
     * @param string $stpid STP ID to be associated with supplier of type STP. Format- 0–9. STPID is required new STP suppliers.  You can get the STPID for the supplier you want to pay using the supplier matching service
     * @return $this
     */
    public function setStpid($stpid)
    {
        $this->container['stpid'] = $stpid;

        return $this;
    }

    /**
     * Gets alternate_email_addresses
     * @return \vpa_102\model\AlternateEmailAddresses
     */
    public function getAlternateEmailAddresses()
    {
        return $this->container['alternate_email_addresses'];
    }

    /**
     * Sets alternate_email_addresses
     * @param \vpa_102\model\AlternateEmailAddresses $alternate_email_addresses
     * @return $this
     */
    public function setAlternateEmailAddresses($alternate_email_addresses)
    {
        $this->container['alternate_email_addresses'] = $alternate_email_addresses;

        return $this;
    }

    /**
     * Gets supplier_state
     * @return string
     */
    public function getSupplierState()
    {
        return $this->container['supplier_state'];
    }

    /**
     * Sets supplier_state
     * @param string $supplier_state Supplier state.
     * @return $this
     */
    public function setSupplierState($supplier_state)
    {
        $this->container['supplier_state'] = $supplier_state;

        return $this;
    }

    /**
     * Gets supplier_country_code
     * @return string
     */
    public function getSupplierCountryCode()
    {
        return $this->container['supplier_country_code'];
    }

    /**
     * Sets supplier_country_code
     * @param string $supplier_country_code Supplier country code. It is alphanumeric.VPA supports all ISO alphanumeric country code.For example- USA.
     * @return $this
     */
    public function setSupplierCountryCode($supplier_country_code)
    {
        $this->container['supplier_country_code'] = $supplier_country_code;

        return $this;
    }

    /**
     * Gets email_notes
     * @return string
     */
    public function getEmailNotes()
    {
        return $this->container['email_notes'];
    }

    /**
     * Sets email_notes
     * @param string $email_notes This contains the text to be included on email notifications and remittance advice.
     * @return $this
     */
    public function setEmailNotes($email_notes)
    {
        $this->container['email_notes'] = $email_notes;

        return $this;
    }

    /**
     * Gets supplier_postal_code
     * @return string
     */
    public function getSupplierPostalCode()
    {
        return $this->container['supplier_postal_code'];
    }

    /**
     * Sets supplier_postal_code
     * @param string $supplier_postal_code Supplier postal code. It is mandatory for new suppliers and only if the country mandates it.
     * @return $this
     */
    public function setSupplierPostalCode($supplier_postal_code)
    {
        $this->container['supplier_postal_code'] = $supplier_postal_code;

        return $this;
    }

    /**
     * Gets supplier_profile_update_indicator
     * @return string
     */
    public function getSupplierProfileUpdateIndicator()
    {
        return $this->container['supplier_profile_update_indicator'];
    }

    /**
     * Sets supplier_profile_update_indicator
     * @param string $supplier_profile_update_indicator Y — Implies that supplier profile has to be updated.  N — Implies that supplier profile should not be updated.  By default, it will not update the supplier profile.
     * @return $this
     */
    public function setSupplierProfileUpdateIndicator($supplier_profile_update_indicator)
    {
        $this->container['supplier_profile_update_indicator'] = $supplier_profile_update_indicator;

        return $this;
    }

    /**
     * Gets supplier_id
     * @return string
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     * @param string $supplier_id Identifier used by the buyer to identify the supplier. This has to be unique for a buyer. It cannot contain spaces.
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets primary_email_address
     * @return string
     */
    public function getPrimaryEmailAddress()
    {
        return $this->container['primary_email_address'];
    }

    /**
     * Sets primary_email_address
     * @param string $primary_email_address Email address
     * @return $this
     */
    public function setPrimaryEmailAddress($primary_email_address)
    {
        $this->container['primary_email_address'] = $primary_email_address;

        return $this;
    }

    /**
     * Gets supplier_city
     * @return string
     */
    public function getSupplierCity()
    {
        return $this->container['supplier_city'];
    }

    /**
     * Sets supplier_city
     * @param string $supplier_city Supplier city.
     * @return $this
     */
    public function setSupplierCity($supplier_city)
    {
        $this->container['supplier_city'] = $supplier_city;

        return $this;
    }

    /**
     * Gets supplier_address_line2
     * @return string
     */
    public function getSupplierAddressLine2()
    {
        return $this->container['supplier_address_line2'];
    }

    /**
     * Sets supplier_address_line2
     * @param string $supplier_address_line2 Supplier address line 2.
     * @return $this
     */
    public function setSupplierAddressLine2($supplier_address_line2)
    {
        $this->container['supplier_address_line2'] = $supplier_address_line2;

        return $this;
    }

    /**
     * Gets supplier_name
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     * @param string $supplier_name Name of supplier to be paid. It is mandatory for new suppliers.
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets supplier_address_line1
     * @return string
     */
    public function getSupplierAddressLine1()
    {
        return $this->container['supplier_address_line1'];
    }

    /**
     * Sets supplier_address_line1
     * @param string $supplier_address_line1 Supplier address line 1.
     * @return $this
     */
    public function setSupplierAddressLine1($supplier_address_line1)
    {
        $this->container['supplier_address_line1'] = $supplier_address_line1;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vpa_102\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vpa_102\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/