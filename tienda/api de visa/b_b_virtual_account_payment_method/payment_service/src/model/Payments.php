<?php
/**
 * Payments
 *
 * PHP version 5
 *
 * @category Class
 * @package  vpa_102
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Service
 *
 * The Payment web service is used for processing payments and sending payment remittance information to the appropriate suppliers.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vpa_102\model;

use \ArrayAccess;

/**
 * Payments Class Doc Comment
 *
 * @category    Class
 * @description This complex element contains the details of all the payments.
 * @package     vpa_102
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Payments implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'payments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_gross_amount' => 'string',
        'payment_expiry_date' => 'string',
        'account_number' => 'string',
        'invoices' => '\vpa_102\model\Invoices',
        'currency_code' => 'string',
        'system_match_status' => 'string',
        'payment_description' => 'string',
        'payment_request_date' => 'string',
        'payment_type' => 'string',
        'supplier' => '\vpa_102\model\Supplier',
        'manual_match_status' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_gross_amount' => 'paymentGrossAmount',
        'payment_expiry_date' => 'paymentExpiryDate',
        'account_number' => 'accountNumber',
        'invoices' => 'invoices',
        'currency_code' => 'currencyCode',
        'system_match_status' => 'systemMatchStatus',
        'payment_description' => 'paymentDescription',
        'payment_request_date' => 'paymentRequestDate',
        'payment_type' => 'paymentType',
        'supplier' => 'supplier',
        'manual_match_status' => 'manualMatchStatus'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'payment_gross_amount' => 'setPaymentGrossAmount',
        'payment_expiry_date' => 'setPaymentExpiryDate',
        'account_number' => 'setAccountNumber',
        'invoices' => 'setInvoices',
        'currency_code' => 'setCurrencyCode',
        'system_match_status' => 'setSystemMatchStatus',
        'payment_description' => 'setPaymentDescription',
        'payment_request_date' => 'setPaymentRequestDate',
        'payment_type' => 'setPaymentType',
        'supplier' => 'setSupplier',
        'manual_match_status' => 'setManualMatchStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'payment_gross_amount' => 'getPaymentGrossAmount',
        'payment_expiry_date' => 'getPaymentExpiryDate',
        'account_number' => 'getAccountNumber',
        'invoices' => 'getInvoices',
        'currency_code' => 'getCurrencyCode',
        'system_match_status' => 'getSystemMatchStatus',
        'payment_description' => 'getPaymentDescription',
        'payment_request_date' => 'getPaymentRequestDate',
        'payment_type' => 'getPaymentType',
        'supplier' => 'getSupplier',
        'manual_match_status' => 'getManualMatchStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_gross_amount'] = isset($data['payment_gross_amount']) ? $data['payment_gross_amount'] : null;
        $this->container['payment_expiry_date'] = isset($data['payment_expiry_date']) ? $data['payment_expiry_date'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['invoices'] = isset($data['invoices']) ? $data['invoices'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['system_match_status'] = isset($data['system_match_status']) ? $data['system_match_status'] : null;
        $this->container['payment_description'] = isset($data['payment_description']) ? $data['payment_description'] : null;
        $this->container['payment_request_date'] = isset($data['payment_request_date']) ? $data['payment_request_date'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['manual_match_status'] = isset($data['manual_match_status']) ? $data['manual_match_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['payment_gross_amount'] === null) {
            $invalid_properties[] = "'payment_gross_amount' can't be null";
        }
        if ($this->container['payment_expiry_date'] === null) {
            $invalid_properties[] = "'payment_expiry_date' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalid_properties[] = "'account_number' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalid_properties[] = "'currency_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['payment_gross_amount'] === null) {
            return false;
        }
        if ($this->container['payment_expiry_date'] === null) {
            return false;
        }
        if ($this->container['account_number'] === null) {
            return false;
        }
        if ($this->container['currency_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets payment_gross_amount
     * @return string
     */
    public function getPaymentGrossAmount()
    {
        return $this->container['payment_gross_amount'];
    }

    /**
     * Sets payment_gross_amount
     * @param string $payment_gross_amount Payment gross amount.  Format is 99999999999999.99
     * @return $this
     */
    public function setPaymentGrossAmount($payment_gross_amount)
    {
        $this->container['payment_gross_amount'] = $payment_gross_amount;

        return $this;
    }

    /**
     * Gets payment_expiry_date
     * @return string
     */
    public function getPaymentExpiryDate()
    {
        return $this->container['payment_expiry_date'];
    }

    /**
     * Sets payment_expiry_date
     * @param string $payment_expiry_date The date by which a supplier must collect this payment. Format is YYYY-MM-DD.
     * @return $this
     */
    public function setPaymentExpiryDate($payment_expiry_date)
    {
        $this->container['payment_expiry_date'] = $payment_expiry_date;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number Account number used for making the payment.
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets invoices
     * @return \vpa_102\model\Invoices
     */
    public function getInvoices()
    {
        return $this->container['invoices'];
    }

    /**
     * Sets invoices
     * @param \vpa_102\model\Invoices $invoices
     * @return $this
     */
    public function setInvoices($invoices)
    {
        $this->container['invoices'] = $invoices;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code Payment currency code.  ISO alpha currency code will be returned in the response.
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets system_match_status
     * @return string
     */
    public function getSystemMatchStatus()
    {
        return $this->container['system_match_status'];
    }

    /**
     * Sets system_match_status
     * @param string $system_match_status Valid values are Matched, Unmatched and Expired
     * @return $this
     */
    public function setSystemMatchStatus($system_match_status)
    {
        $this->container['system_match_status'] = $system_match_status;

        return $this;
    }

    /**
     * Gets payment_description
     * @return string
     */
    public function getPaymentDescription()
    {
        return $this->container['payment_description'];
    }

    /**
     * Sets payment_description
     * @param string $payment_description Description of the payment.
     * @return $this
     */
    public function setPaymentDescription($payment_description)
    {
        $this->container['payment_description'] = $payment_description;

        return $this;
    }

    /**
     * Gets payment_request_date
     * @return string
     */
    public function getPaymentRequestDate()
    {
        return $this->container['payment_request_date'];
    }

    /**
     * Sets payment_request_date
     * @param string $payment_request_date Payment requested date. Format is YYYY-MM-DD.
     * @return $this
     */
    public function setPaymentRequestDate($payment_request_date)
    {
        $this->container['payment_request_date'] = $payment_request_date;

        return $this;
    }

    /**
     * Gets payment_type
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     * @param string $payment_type Type of payment processing-    1 - Payment Instruction    2 - Payment Requisition
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets supplier
     * @return \vpa_102\model\Supplier
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     * @param \vpa_102\model\Supplier $supplier
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets manual_match_status
     * @return string
     */
    public function getManualMatchStatus()
    {
        return $this->container['manual_match_status'];
    }

    /**
     * Sets manual_match_status
     * @param string $manual_match_status Valid values are I or G - Reconciled    U - Unreconciled      P - Partially Reconciled   Y - Forcibly Reconciled
     * @return $this
     */
    public function setManualMatchStatus($manual_match_status)
    {
        $this->container['manual_match_status'] = $manual_match_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vpa_102\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vpa_102\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/