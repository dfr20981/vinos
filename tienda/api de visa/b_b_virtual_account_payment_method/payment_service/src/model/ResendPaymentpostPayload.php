<?php
/**
 * ResendPaymentpostPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  vpa_102
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Service
 *
 * The Payment web service is used for processing payments and sending payment remittance information to the appropriate suppliers.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace vpa_102\model;

use \ArrayAccess;

/**
 * ResendPaymentpostPayload Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     vpa_102
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ResendPaymentpostPayload implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'resendPaymentpostPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'original_message_id' => 'string',
        'account_number' => 'string',
        'alternate_email_addresses' => '\vpa_102\model\AlternateEmailAddresses',
        'client_id' => 'string',
        'supplier_profile_update_indicator' => 'string',
        'primary_email_address' => 'string',
        'message_id' => 'string',
        'buyer_id' => 'string',
        'email_notes' => 'string',
        'expiration_date' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'original_message_id' => 'originalMessageId',
        'account_number' => 'accountNumber',
        'alternate_email_addresses' => 'alternateEmailAddresses',
        'client_id' => 'clientId',
        'supplier_profile_update_indicator' => 'supplierProfileUpdateIndicator',
        'primary_email_address' => 'primaryEmailAddress',
        'message_id' => 'messageId',
        'buyer_id' => 'buyerId',
        'email_notes' => 'emailNotes',
        'expiration_date' => 'expirationDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'original_message_id' => 'setOriginalMessageId',
        'account_number' => 'setAccountNumber',
        'alternate_email_addresses' => 'setAlternateEmailAddresses',
        'client_id' => 'setClientId',
        'supplier_profile_update_indicator' => 'setSupplierProfileUpdateIndicator',
        'primary_email_address' => 'setPrimaryEmailAddress',
        'message_id' => 'setMessageId',
        'buyer_id' => 'setBuyerId',
        'email_notes' => 'setEmailNotes',
        'expiration_date' => 'setExpirationDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'original_message_id' => 'getOriginalMessageId',
        'account_number' => 'getAccountNumber',
        'alternate_email_addresses' => 'getAlternateEmailAddresses',
        'client_id' => 'getClientId',
        'supplier_profile_update_indicator' => 'getSupplierProfileUpdateIndicator',
        'primary_email_address' => 'getPrimaryEmailAddress',
        'message_id' => 'getMessageId',
        'buyer_id' => 'getBuyerId',
        'email_notes' => 'getEmailNotes',
        'expiration_date' => 'getExpirationDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['original_message_id'] = isset($data['original_message_id']) ? $data['original_message_id'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['alternate_email_addresses'] = isset($data['alternate_email_addresses']) ? $data['alternate_email_addresses'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['supplier_profile_update_indicator'] = isset($data['supplier_profile_update_indicator']) ? $data['supplier_profile_update_indicator'] : null;
        $this->container['primary_email_address'] = isset($data['primary_email_address']) ? $data['primary_email_address'] : null;
        $this->container['message_id'] = isset($data['message_id']) ? $data['message_id'] : null;
        $this->container['buyer_id'] = isset($data['buyer_id']) ? $data['buyer_id'] : null;
        $this->container['email_notes'] = isset($data['email_notes']) ? $data['email_notes'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['original_message_id'] === null) {
            $invalid_properties[] = "'original_message_id' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalid_properties[] = "'client_id' can't be null";
        }
        if ($this->container['message_id'] === null) {
            $invalid_properties[] = "'message_id' can't be null";
        }
        if ($this->container['buyer_id'] === null) {
            $invalid_properties[] = "'buyer_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['original_message_id'] === null) {
            return false;
        }
        if ($this->container['client_id'] === null) {
            return false;
        }
        if ($this->container['message_id'] === null) {
            return false;
        }
        if ($this->container['buyer_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets original_message_id
     * @return string
     */
    public function getOriginalMessageId()
    {
        return $this->container['original_message_id'];
    }

    /**
     * Sets original_message_id
     * @param string $original_message_id The messageID of the original process payment request that is being resent.
     * @return $this
     */
    public function setOriginalMessageId($original_message_id)
    {
        $this->container['original_message_id'] = $original_message_id;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number An existing Visa card account. Values are 0–9. Note- If the account number is passed, it should correspond to the card account number used for the payment.
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets alternate_email_addresses
     * @return \vpa_102\model\AlternateEmailAddresses
     */
    public function getAlternateEmailAddresses()
    {
        return $this->container['alternate_email_addresses'];
    }

    /**
     * Sets alternate_email_addresses
     * @param \vpa_102\model\AlternateEmailAddresses $alternate_email_addresses
     * @return $this
     */
    public function setAlternateEmailAddresses($alternate_email_addresses)
    {
        $this->container['alternate_email_addresses'] = $alternate_email_addresses;

        return $this;
    }

    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     * @param string $client_id Client ID field is a unique identification of the financial institution . This will be provided by Visa at the time of setup.
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets supplier_profile_update_indicator
     * @return string
     */
    public function getSupplierProfileUpdateIndicator()
    {
        return $this->container['supplier_profile_update_indicator'];
    }

    /**
     * Sets supplier_profile_update_indicator
     * @param string $supplier_profile_update_indicator This field contains value as Y if supplier profile has to be updated and N if supplier profile should not be updated. By default, the system will not update the supplier profile with the new values sent in the request.
     * @return $this
     */
    public function setSupplierProfileUpdateIndicator($supplier_profile_update_indicator)
    {
        $this->container['supplier_profile_update_indicator'] = $supplier_profile_update_indicator;

        return $this;
    }

    /**
     * Gets primary_email_address
     * @return string
     */
    public function getPrimaryEmailAddress()
    {
        return $this->container['primary_email_address'];
    }

    /**
     * Sets primary_email_address
     * @param string $primary_email_address This contains the email address for the supplier that will receive the payment instruction. It must be a valid email address. If the primary email address is provided, the payment advice will be sent to the new primary email address provided in the request. If it is not, the email address in the original request will be used.
     * @return $this
     */
    public function setPrimaryEmailAddress($primary_email_address)
    {
        $this->container['primary_email_address'] = $primary_email_address;

        return $this;
    }

    /**
     * Gets message_id
     * @return string
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     * @param string $message_id Unique identifier for this request.  Each request sent to VPA requires its own unique ID.
     * @return $this
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets buyer_id
     * @return string
     */
    public function getBuyerId()
    {
        return $this->container['buyer_id'];
    }

    /**
     * Sets buyer_id
     * @param string $buyer_id Buyer ID is the buyer identifier as defined in Visa Payables Automation. Value format is 0–9.
     * @return $this
     */
    public function setBuyerId($buyer_id)
    {
        $this->container['buyer_id'] = $buyer_id;

        return $this;
    }

    /**
     * Gets email_notes
     * @return string
     */
    public function getEmailNotes()
    {
        return $this->container['email_notes'];
    }

    /**
     * Sets email_notes
     * @param string $email_notes This contains the text to be included on email notifications and remittance advice.  If this field is not provided, the value from the original request will be used.
     * @return $this
     */
    public function setEmailNotes($email_notes)
    {
        $this->container['email_notes'] = $email_notes;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param string $expiration_date The date by which a supplier must collect his payment. Format is YYYY-MM-DD
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\vpa_102\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\vpa_102\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/