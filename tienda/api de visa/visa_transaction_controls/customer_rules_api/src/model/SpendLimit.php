<?php
/**
 * SpendLimit
 *
 * PHP version 5
 *
 * @category Class
 * @package  pmc_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Customer Rules API
 *
 * The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_100\model;

use \ArrayAccess;

/**
 * SpendLimit Class Doc Comment
 *
 * @category    Class
 * @description Used to track and manage total approved purchases over a day, week or month timeframe. All amounts are based on the cardholderBillAmount in the authorization request message. The actual amount submitted for clearing and settlement can differ (e.g. tips, hotel, car rental...).
 * @package     pmc_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SpendLimit implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'spendLimit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_zone_id' => 'string',
        'type' => 'string',
        'alert_threshold' => 'double',
        'current_period_spend' => 'double',
        'decline_threshold' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'time_zone_id' => 'timeZoneID',
        'type' => 'type',
        'alert_threshold' => 'alertThreshold',
        'current_period_spend' => 'currentPeriodSpend',
        'decline_threshold' => 'declineThreshold'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'time_zone_id' => 'setTimeZoneId',
        'type' => 'setType',
        'alert_threshold' => 'setAlertThreshold',
        'current_period_spend' => 'setCurrentPeriodSpend',
        'decline_threshold' => 'setDeclineThreshold'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'time_zone_id' => 'getTimeZoneId',
        'type' => 'getType',
        'alert_threshold' => 'getAlertThreshold',
        'current_period_spend' => 'getCurrentPeriodSpend',
        'decline_threshold' => 'getDeclineThreshold'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['alert_threshold'] = isset($data['alert_threshold']) ? $data['alert_threshold'] : null;
        $this->container['current_period_spend'] = isset($data['current_period_spend']) ? $data['current_period_spend'] : null;
        $this->container['decline_threshold'] = isset($data['decline_threshold']) ? $data['decline_threshold'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['time_zone_id'] === null) {
            $invalid_properties[] = "'time_zone_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['current_period_spend'] === null) {
            $invalid_properties[] = "'current_period_spend' can't be null";
        }
        if ($this->container['decline_threshold'] === null) {
            $invalid_properties[] = "'decline_threshold' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['time_zone_id'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['current_period_spend'] === null) {
            return false;
        }
        if ($this->container['decline_threshold'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets time_zone_id
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     * @param string $time_zone_id The timeZoneID is used to determine the next currentPeriodEndTime based on spendLimitType. It should be in Continent/Region format. For example: 'America/Denver' is in United States MST.
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Provides the time period that the control spans.Valid values include: LMT_MONTH, LMT_WEEK, LMT_DAY.
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets alert_threshold
     * @return double
     */
    public function getAlertThreshold()
    {
        return $this->container['alert_threshold'];
    }

    /**
     * Sets alert_threshold
     * @param double $alert_threshold The maximum value of total approved purchases within the time period before triggering an alert. Once met or exceeded, any further purchases related to this control-type will not trigger another spendLimit alert until the next time period begins. However, any transaction that meet/exceed the per transaction alertThreshold will continue to trigger alerts.
     * @return $this
     */
    public function setAlertThreshold($alert_threshold)
    {
        $this->container['alert_threshold'] = $alert_threshold;

        return $this;
    }

    /**
     * Gets current_period_spend
     * @return double
     */
    public function getCurrentPeriodSpend()
    {
        return $this->container['current_period_spend'];
    }

    /**
     * Sets current_period_spend
     * @param double $current_period_spend The total amount of all approved transactions performed within the time period for this control type. It is reset by the amount of the first transaction for this control type once a new time period begins.
     * @return $this
     */
    public function setCurrentPeriodSpend($current_period_spend)
    {
        $this->container['current_period_spend'] = $current_period_spend;

        return $this;
    }

    /**
     * Gets decline_threshold
     * @return double
     */
    public function getDeclineThreshold()
    {
        return $this->container['decline_threshold'];
    }

    /**
     * Sets decline_threshold
     * @param double $decline_threshold The maximum accumulated spend for the time period at which VTC will then trigger declines. Once met or exceeded, all subsequent purchases related to the control will trigger a decline until the new time period begins (e.g. a new month.) If 'alertOnDecline' is true, then the cardholder will be notified of these transactions.
     * @return $this
     */
    public function setDeclineThreshold($decline_threshold)
    {
        $this->container['decline_threshold'] = $decline_threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\pmc_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\pmc_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/