<?php
/**
 * GlobalControl
 *
 * PHP version 5
 *
 * @category Class
 * @package  pmc_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Customer Rules API
 *
 * The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_100\model;

use \ArrayAccess;

/**
 * GlobalControl Class Doc Comment
 *
 * @category    Class
 * @description Global control for a card number. Access to this is controlled by a card program based on the issuer’s configuration.
 * @package     pmc_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GlobalControl implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'globalControl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_range' => '\pmc_100\model\TimeRange',
        'should_alert_on_decline' => 'bool',
        'alert_threshold' => 'double',
        'decline_threshold' => 'double',
        'spend_limit' => '\pmc_100\model\SpendLimit',
        'should_decline_all' => 'bool',
        'filter_by_country' => '\pmc_100\model\FilterByCountry'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'time_range' => 'timeRange',
        'should_alert_on_decline' => 'shouldAlertOnDecline',
        'alert_threshold' => 'alertThreshold',
        'decline_threshold' => 'declineThreshold',
        'spend_limit' => 'spendLimit',
        'should_decline_all' => 'shouldDeclineAll',
        'filter_by_country' => 'filterByCountry'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'time_range' => 'setTimeRange',
        'should_alert_on_decline' => 'setShouldAlertOnDecline',
        'alert_threshold' => 'setAlertThreshold',
        'decline_threshold' => 'setDeclineThreshold',
        'spend_limit' => 'setSpendLimit',
        'should_decline_all' => 'setShouldDeclineAll',
        'filter_by_country' => 'setFilterByCountry'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'time_range' => 'getTimeRange',
        'should_alert_on_decline' => 'getShouldAlertOnDecline',
        'alert_threshold' => 'getAlertThreshold',
        'decline_threshold' => 'getDeclineThreshold',
        'spend_limit' => 'getSpendLimit',
        'should_decline_all' => 'getShouldDeclineAll',
        'filter_by_country' => 'getFilterByCountry'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_range'] = isset($data['time_range']) ? $data['time_range'] : null;
        $this->container['should_alert_on_decline'] = isset($data['should_alert_on_decline']) ? $data['should_alert_on_decline'] : null;
        $this->container['alert_threshold'] = isset($data['alert_threshold']) ? $data['alert_threshold'] : null;
        $this->container['decline_threshold'] = isset($data['decline_threshold']) ? $data['decline_threshold'] : null;
        $this->container['spend_limit'] = isset($data['spend_limit']) ? $data['spend_limit'] : null;
        $this->container['should_decline_all'] = isset($data['should_decline_all']) ? $data['should_decline_all'] : null;
        $this->container['filter_by_country'] = isset($data['filter_by_country']) ? $data['filter_by_country'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['should_decline_all'] === null) {
            $invalid_properties[] = "'should_decline_all' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['should_decline_all'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets time_range
     * @return \pmc_100\model\TimeRange
     */
    public function getTimeRange()
    {
        return $this->container['time_range'];
    }

    /**
     * Sets time_range
     * @param \pmc_100\model\TimeRange $time_range
     * @return $this
     */
    public function setTimeRange($time_range)
    {
        $this->container['time_range'] = $time_range;

        return $this;
    }

    /**
     * Gets should_alert_on_decline
     * @return bool
     */
    public function getShouldAlertOnDecline()
    {
        return $this->container['should_alert_on_decline'];
    }

    /**
     * Sets should_alert_on_decline
     * @param bool $should_alert_on_decline If true, VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type.
     * @return $this
     */
    public function setShouldAlertOnDecline($should_alert_on_decline)
    {
        $this->container['should_alert_on_decline'] = $should_alert_on_decline;

        return $this;
    }

    /**
     * Gets alert_threshold
     * @return double
     */
    public function getAlertThreshold()
    {
        return $this->container['alert_threshold'];
    }

    /**
     * Sets alert_threshold
     * @param double $alert_threshold The maximum value of total approved purchases within the time period before triggering an alert. Once met or exceeded, any further purchases related to this control-type will not trigger another spendLimit alert until the next time period begins. However, any transactions that meet/exceed the per transaction alertThreshold will continue to trigger alerts.
     * @return $this
     */
    public function setAlertThreshold($alert_threshold)
    {
        $this->container['alert_threshold'] = $alert_threshold;

        return $this;
    }

    /**
     * Gets decline_threshold
     * @return double
     */
    public function getDeclineThreshold()
    {
        return $this->container['decline_threshold'];
    }

    /**
     * Sets decline_threshold
     * @param double $decline_threshold The maximum accumulated spend for the time period at which VTC will then trigger declines. Once met or exceeded, all subsequent purchases related to the control will trigger a decline until the new time period begins (e.g. a new month.) If 'alertOnDecline' is true, then the cardholder will be notified of these transactions.
     * @return $this
     */
    public function setDeclineThreshold($decline_threshold)
    {
        $this->container['decline_threshold'] = $decline_threshold;

        return $this;
    }

    /**
     * Gets spend_limit
     * @return \pmc_100\model\SpendLimit
     */
    public function getSpendLimit()
    {
        return $this->container['spend_limit'];
    }

    /**
     * Sets spend_limit
     * @param \pmc_100\model\SpendLimit $spend_limit
     * @return $this
     */
    public function setSpendLimit($spend_limit)
    {
        $this->container['spend_limit'] = $spend_limit;

        return $this;
    }

    /**
     * Gets should_decline_all
     * @return bool
     */
    public function getShouldDeclineAll()
    {
        return $this->container['should_decline_all'];
    }

    /**
     * Sets should_decline_all
     * @param bool $should_decline_all If the indicator is set to true, all qualifying transactions for this control type will receive a decline recommendation. If set to false, other attributes like declineThreshold will be checked.
     * @return $this
     */
    public function setShouldDeclineAll($should_decline_all)
    {
        $this->container['should_decline_all'] = $should_decline_all;

        return $this;
    }

    /**
     * Gets filter_by_country
     * @return \pmc_100\model\FilterByCountry
     */
    public function getFilterByCountry()
    {
        return $this->container['filter_by_country'];
    }

    /**
     * Sets filter_by_country
     * @param \pmc_100\model\FilterByCountry $filter_by_country
     * @return $this
     */
    public function setFilterByCountry($filter_by_country)
    {
        $this->container['filter_by_country'] = $filter_by_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\pmc_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\pmc_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/