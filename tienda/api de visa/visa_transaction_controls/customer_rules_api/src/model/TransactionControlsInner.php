<?php
/**
 * TransactionControlsInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  pmc_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Customer Rules API
 *
 * The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_100\model;

use \ArrayAccess;

/**
 * TransactionControlsInner Class Doc Comment
 *
 * @category    Class
 * @package     pmc_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TransactionControlsInner implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'transactionControls_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_control_enabled' => 'bool',
        'should_target_specific_card' => 'bool',
        'time_range' => '\pmc_100\model\TimeRange',
        'should_alert_on_decline' => 'bool',
        'alert_threshold' => 'double',
        'decline_threshold' => 'double',
        'user_information' => '\pmc_100\model\UserInformation',
        'spend_limit' => '\pmc_100\model\SpendLimit',
        'control_type' => 'string',
        'user_identifier' => 'string',
        'should_decline_all' => 'bool',
        'card_detail' => '\pmc_100\model\CardDetail',
        'filter_by_country' => '\pmc_100\model\FilterByCountry'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'is_control_enabled' => 'isControlEnabled',
        'should_target_specific_card' => 'shouldTargetSpecificCard',
        'time_range' => 'timeRange',
        'should_alert_on_decline' => 'shouldAlertOnDecline',
        'alert_threshold' => 'alertThreshold',
        'decline_threshold' => 'declineThreshold',
        'user_information' => 'userInformation',
        'spend_limit' => 'spendLimit',
        'control_type' => 'controlType',
        'user_identifier' => 'userIdentifier',
        'should_decline_all' => 'shouldDeclineAll',
        'card_detail' => 'cardDetail',
        'filter_by_country' => 'filterByCountry'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'is_control_enabled' => 'setIsControlEnabled',
        'should_target_specific_card' => 'setShouldTargetSpecificCard',
        'time_range' => 'setTimeRange',
        'should_alert_on_decline' => 'setShouldAlertOnDecline',
        'alert_threshold' => 'setAlertThreshold',
        'decline_threshold' => 'setDeclineThreshold',
        'user_information' => 'setUserInformation',
        'spend_limit' => 'setSpendLimit',
        'control_type' => 'setControlType',
        'user_identifier' => 'setUserIdentifier',
        'should_decline_all' => 'setShouldDeclineAll',
        'card_detail' => 'setCardDetail',
        'filter_by_country' => 'setFilterByCountry'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'is_control_enabled' => 'getIsControlEnabled',
        'should_target_specific_card' => 'getShouldTargetSpecificCard',
        'time_range' => 'getTimeRange',
        'should_alert_on_decline' => 'getShouldAlertOnDecline',
        'alert_threshold' => 'getAlertThreshold',
        'decline_threshold' => 'getDeclineThreshold',
        'user_information' => 'getUserInformation',
        'spend_limit' => 'getSpendLimit',
        'control_type' => 'getControlType',
        'user_identifier' => 'getUserIdentifier',
        'should_decline_all' => 'getShouldDeclineAll',
        'card_detail' => 'getCardDetail',
        'filter_by_country' => 'getFilterByCountry'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_control_enabled'] = isset($data['is_control_enabled']) ? $data['is_control_enabled'] : null;
        $this->container['should_target_specific_card'] = isset($data['should_target_specific_card']) ? $data['should_target_specific_card'] : null;
        $this->container['time_range'] = isset($data['time_range']) ? $data['time_range'] : null;
        $this->container['should_alert_on_decline'] = isset($data['should_alert_on_decline']) ? $data['should_alert_on_decline'] : null;
        $this->container['alert_threshold'] = isset($data['alert_threshold']) ? $data['alert_threshold'] : null;
        $this->container['decline_threshold'] = isset($data['decline_threshold']) ? $data['decline_threshold'] : null;
        $this->container['user_information'] = isset($data['user_information']) ? $data['user_information'] : null;
        $this->container['spend_limit'] = isset($data['spend_limit']) ? $data['spend_limit'] : null;
        $this->container['control_type'] = isset($data['control_type']) ? $data['control_type'] : null;
        $this->container['user_identifier'] = isset($data['user_identifier']) ? $data['user_identifier'] : null;
        $this->container['should_decline_all'] = isset($data['should_decline_all']) ? $data['should_decline_all'] : null;
        $this->container['card_detail'] = isset($data['card_detail']) ? $data['card_detail'] : null;
        $this->container['filter_by_country'] = isset($data['filter_by_country']) ? $data['filter_by_country'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['is_control_enabled'] === null) {
            $invalid_properties[] = "'is_control_enabled' can't be null";
        }
        if ($this->container['control_type'] === null) {
            $invalid_properties[] = "'control_type' can't be null";
        }
        if ($this->container['should_decline_all'] === null) {
            $invalid_properties[] = "'should_decline_all' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['is_control_enabled'] === null) {
            return false;
        }
        if ($this->container['control_type'] === null) {
            return false;
        }
        if ($this->container['should_decline_all'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets is_control_enabled
     * @return bool
     */
    public function getIsControlEnabled()
    {
        return $this->container['is_control_enabled'];
    }

    /**
     * Sets is_control_enabled
     * @param bool $is_control_enabled If the indicator is set to true, the control type is considered active, if set to false the control type is not checked by the authorization engine
     * @return $this
     */
    public function setIsControlEnabled($is_control_enabled)
    {
        $this->container['is_control_enabled'] = $is_control_enabled;

        return $this;
    }

    /**
     * Gets should_target_specific_card
     * @return bool
     */
    public function getShouldTargetSpecificCard()
    {
        return $this->container['should_target_specific_card'];
    }

    /**
     * Sets should_target_specific_card
     * @param bool $should_target_specific_card If the indicator is set to true, card details are required and card details will be used to locate a transaction control
     * @return $this
     */
    public function setShouldTargetSpecificCard($should_target_specific_card)
    {
        $this->container['should_target_specific_card'] = $should_target_specific_card;

        return $this;
    }

    /**
     * Gets time_range
     * @return \pmc_100\model\TimeRange
     */
    public function getTimeRange()
    {
        return $this->container['time_range'];
    }

    /**
     * Sets time_range
     * @param \pmc_100\model\TimeRange $time_range
     * @return $this
     */
    public function setTimeRange($time_range)
    {
        $this->container['time_range'] = $time_range;

        return $this;
    }

    /**
     * Gets should_alert_on_decline
     * @return bool
     */
    public function getShouldAlertOnDecline()
    {
        return $this->container['should_alert_on_decline'];
    }

    /**
     * Sets should_alert_on_decline
     * @param bool $should_alert_on_decline If true, VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type.
     * @return $this
     */
    public function setShouldAlertOnDecline($should_alert_on_decline)
    {
        $this->container['should_alert_on_decline'] = $should_alert_on_decline;

        return $this;
    }

    /**
     * Gets alert_threshold
     * @return double
     */
    public function getAlertThreshold()
    {
        return $this->container['alert_threshold'];
    }

    /**
     * Sets alert_threshold
     * @param double $alert_threshold Will trigger an alert for all approved transactions with amounts that equal or exceed the threshold setting for this control type. During authorization processing the cardholderBillAmount is used for comparision to identify if an alert should be sent.
     * @return $this
     */
    public function setAlertThreshold($alert_threshold)
    {
        $this->container['alert_threshold'] = $alert_threshold;

        return $this;
    }

    /**
     * Gets decline_threshold
     * @return double
     */
    public function getDeclineThreshold()
    {
        return $this->container['decline_threshold'];
    }

    /**
     * Sets decline_threshold
     * @param double $decline_threshold Will trigger a decline for all transactions with amounts that equal or exceed this threshold for this control type. During authorization processing the cardholderBillAmount is then used for comparison to identify if a decline should be triggered.
     * @return $this
     */
    public function setDeclineThreshold($decline_threshold)
    {
        $this->container['decline_threshold'] = $decline_threshold;

        return $this;
    }

    /**
     * Gets user_information
     * @return \pmc_100\model\UserInformation
     */
    public function getUserInformation()
    {
        return $this->container['user_information'];
    }

    /**
     * Sets user_information
     * @param \pmc_100\model\UserInformation $user_information
     * @return $this
     */
    public function setUserInformation($user_information)
    {
        $this->container['user_information'] = $user_information;

        return $this;
    }

    /**
     * Gets spend_limit
     * @return \pmc_100\model\SpendLimit
     */
    public function getSpendLimit()
    {
        return $this->container['spend_limit'];
    }

    /**
     * Sets spend_limit
     * @param \pmc_100\model\SpendLimit $spend_limit
     * @return $this
     */
    public function setSpendLimit($spend_limit)
    {
        $this->container['spend_limit'] = $spend_limit;

        return $this;
    }

    /**
     * Gets control_type
     * @return string
     */
    public function getControlType()
    {
        return $this->container['control_type'];
    }

    /**
     * Sets control_type
     * @param string $control_type Indicates the specific type of the control for Transaction Controls valid values begin with: 'TCT_', for MerchantControls valid values begin with: 'MCT_'
     * @return $this
     */
    public function setControlType($control_type)
    {
        $this->container['control_type'] = $control_type;

        return $this;
    }

    /**
     * Gets user_identifier
     * @return string
     */
    public function getUserIdentifier()
    {
        return $this->container['user_identifier'];
    }

    /**
     * Sets user_identifier
     * @param string $user_identifier Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters
     * @return $this
     */
    public function setUserIdentifier($user_identifier)
    {
        $this->container['user_identifier'] = $user_identifier;

        return $this;
    }

    /**
     * Gets should_decline_all
     * @return bool
     */
    public function getShouldDeclineAll()
    {
        return $this->container['should_decline_all'];
    }

    /**
     * Sets should_decline_all
     * @param bool $should_decline_all If the indicator is set to true, all qualifying transactions for this control type will receive a decline recommendation. If set to false, other attributes like declineThreshold will be checked.
     * @return $this
     */
    public function setShouldDeclineAll($should_decline_all)
    {
        $this->container['should_decline_all'] = $should_decline_all;

        return $this;
    }

    /**
     * Gets card_detail
     * @return \pmc_100\model\CardDetail
     */
    public function getCardDetail()
    {
        return $this->container['card_detail'];
    }

    /**
     * Sets card_detail
     * @param \pmc_100\model\CardDetail $card_detail
     * @return $this
     */
    public function setCardDetail($card_detail)
    {
        $this->container['card_detail'] = $card_detail;

        return $this;
    }

    /**
     * Gets filter_by_country
     * @return \pmc_100\model\FilterByCountry
     */
    public function getFilterByCountry()
    {
        return $this->container['filter_by_country'];
    }

    /**
     * Sets filter_by_country
     * @param \pmc_100\model\FilterByCountry $filter_by_country
     * @return $this
     */
    public function setFilterByCountry($filter_by_country)
    {
        $this->container['filter_by_country'] = $filter_by_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\pmc_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\pmc_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/