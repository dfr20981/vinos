<?php
/**
 * Customer_rulesApi
 * PHP version 5
 *
 * @category Class
 * @package  pmc_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Customer Rules API
 *
 * The Customer Rules API enables consumers to establish control rules that will define the type of transactions they want to Manage.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_100\api;

use \pmc_100\ApiClient;
use \pmc_100\ApiException;
use \pmc_100\Configuration;
use \pmc_100\ObjectSerializer;

/**
 * Customer_rulesApi Class Doc Comment
 *
 * @category Class
 * @package  pmc_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer_rulesApi
{
    /**
     * API Client
     *
     * @var \pmc_100\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \pmc_100\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\pmc_100\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \pmc_100\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \pmc_100\ApiClient $apiClient set the API client
     *
     * @return Customer_rulesApi
     */
    public function setApiClient(\pmc_100\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deletecardReplacement
     *
     * 
     *
     * @param \pmc_100\model\CardReplacementdeletePayload $card_replacementdelete_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\CardReplacementdeleteResponse
     */
    public function deletecardReplacement($card_replacementdelete_payload)
    {
        list($response) = $this->deletecardReplacementWithHttpInfo($card_replacementdelete_payload);
        return $response;
    }

    /**
     * Operation deletecardReplacementWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\CardReplacementdeletePayload $card_replacementdelete_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\CardReplacementdeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletecardReplacementWithHttpInfo($card_replacementdelete_payload)
    {
        // verify the required parameter 'card_replacementdelete_payload' is set
        if ($card_replacementdelete_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_replacementdelete_payload when calling deletecardReplacement');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/accounts/accountupdate";
        $resourcePath = "consumertransactioncontrols/accounts/accountupdate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($card_replacementdelete_payload)) {
            $_tempBody = $card_replacementdelete_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\CardReplacementdeleteResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/accounts/accountupdate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\CardReplacementdeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\CardReplacementdeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletedeleteControlDocumentByDocId
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be de-enrolled. The document will be deleted. (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\DeleteControlDocumentByDocIddeleteResponse
     */
    public function deletedeleteControlDocumentByDocId($document_id)
    {
        list($response) = $this->deletedeleteControlDocumentByDocIdWithHttpInfo($document_id);
        return $response;
    }

    /**
     * Operation deletedeleteControlDocumentByDocIdWithHttpInfo
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be de-enrolled. The document will be deleted. (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\DeleteControlDocumentByDocIddeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletedeleteControlDocumentByDocIdWithHttpInfo($document_id)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling deletedeleteControlDocumentByDocId');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/{documentID}";
        $resourcePath = "consumertransactioncontrols/{documentID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($document_id !== null) {
            $path = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\DeleteControlDocumentByDocIddeleteResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\DeleteControlDocumentByDocIddeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\DeleteControlDocumentByDocIddeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletemanageControls
     *
     * 
     *
     * @param string $document_id The documentID of the control document from where control rules are to be deleted, Does not delete the document (required)
     * @param \pmc_100\model\ManageControlsdeletePayload $manage_controlsdelete_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\ManageControlsdeleteResponse
     */
    public function deletemanageControls($document_id, $manage_controlsdelete_payload)
    {
        list($response) = $this->deletemanageControlsWithHttpInfo($document_id, $manage_controlsdelete_payload);
        return $response;
    }

    /**
     * Operation deletemanageControlsWithHttpInfo
     *
     * 
     *
     * @param string $document_id The documentID of the control document from where control rules are to be deleted, Does not delete the document (required)
     * @param \pmc_100\model\ManageControlsdeletePayload $manage_controlsdelete_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\ManageControlsdeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletemanageControlsWithHttpInfo($document_id, $manage_controlsdelete_payload)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling deletemanageControls');
        }
        // verify the required parameter 'manage_controlsdelete_payload' is set
        if ($manage_controlsdelete_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_controlsdelete_payload when calling deletemanageControls');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules";
        $resourcePath = "consumertransactioncontrols/{documentID}/rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($document_id !== null) {
            $path = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_controlsdelete_payload)) {
            $_tempBody = $manage_controlsdelete_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\ManageControlsdeleteResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\ManageControlsdeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\ManageControlsdeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getapplicationConfiguration
     *
     * 
     *
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\ApplicationConfigurationgetResponse
     */
    public function getapplicationConfiguration()
    {
        list($response) = $this->getapplicationConfigurationWithHttpInfo();
        return $response;
    }

    /**
     * Operation getapplicationConfigurationWithHttpInfo
     *
     * 
     *
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\ApplicationConfigurationgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getapplicationConfigurationWithHttpInfo()
    {
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/applications/configuration";
        $resourcePath = "consumertransactioncontrols/applications/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\ApplicationConfigurationgetResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/applications/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\ApplicationConfigurationgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\ApplicationConfigurationgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getmanageControls
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be returned. (required)
     * @param string $user_identifier Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters. (optional)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\ManageControlsgetResponse
     */
    public function getmanageControls($document_id, $user_identifier = null)
    {
        list($response) = $this->getmanageControlsWithHttpInfo($document_id, $user_identifier);
        return $response;
    }

    /**
     * Operation getmanageControlsWithHttpInfo
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be returned. (required)
     * @param string $user_identifier Uniquely identifies the cardholder who is to receive the alert message. The notification Service Provider should use this value to identify an individual and their contact preferences.  The userIdentifier should be a GUID, but at minimum must be unique per enrolling application. It is mandatory for VTC notifications. Maximum of 72 characters. (optional)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\ManageControlsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getmanageControlsWithHttpInfo($document_id, $user_identifier = null)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling getmanageControls');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules";
        $resourcePath = "consumertransactioncontrols/{documentID}/rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($user_identifier !== null) {
            $queryParams['userIdentifier'] = $this->apiClient->getSerializer()->toQueryValue($user_identifier);
        }
        // path params
        if ($document_id !== null) {
            $path = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\ManageControlsgetResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\ManageControlsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\ManageControlsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gettransactionControlDocumentHistory
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be returned. (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\TransactionControlDocumentHistorygetResponse
     */
    public function gettransactionControlDocumentHistory($document_id)
    {
        list($response) = $this->gettransactionControlDocumentHistoryWithHttpInfo($document_id);
        return $response;
    }

    /**
     * Operation gettransactionControlDocumentHistoryWithHttpInfo
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be returned. (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\TransactionControlDocumentHistorygetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function gettransactionControlDocumentHistoryWithHttpInfo($document_id)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling gettransactionControlDocumentHistory');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/controlHistory";
        $resourcePath = "consumertransactioncontrols/{documentID}/controlHistory";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($document_id !== null) {
            $path = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\TransactionControlDocumentHistorygetResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/controlHistory'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\TransactionControlDocumentHistorygetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\TransactionControlDocumentHistorygetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postbatchEnrollment
     *
     * 
     *
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (required)
     * @param \pmc_100\model\BatchEnrollmentpostPayload $batch_enrollmentpost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\BatchEnrollmentpostResponse
     */
    public function postbatchEnrollment($app_id, $sponsor_id, $batch_enrollmentpost_payload, $app_group_id = null)
    {
        list($response) = $this->postbatchEnrollmentWithHttpInfo($app_id, $sponsor_id, $batch_enrollmentpost_payload, $app_group_id);
        return $response;
    }

    /**
     * Operation postbatchEnrollmentWithHttpInfo
     *
     * 
     *
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (required)
     * @param \pmc_100\model\BatchEnrollmentpostPayload $batch_enrollmentpost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\BatchEnrollmentpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postbatchEnrollmentWithHttpInfo($app_id, $sponsor_id, $batch_enrollmentpost_payload, $app_group_id = null)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling postbatchEnrollment');
        }
        // verify the required parameter 'sponsor_id' is set
        if ($sponsor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sponsor_id when calling postbatchEnrollment');
        }
        // verify the required parameter 'batch_enrollmentpost_payload' is set
        if ($batch_enrollmentpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $batch_enrollmentpost_payload when calling postbatchEnrollment');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/batch";
        $resourcePath = "consumertransactioncontrols/batch";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($batch_enrollmentpost_payload)) {
            $_tempBody = $batch_enrollmentpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\BatchEnrollmentpostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/batch'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\BatchEnrollmentpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\BatchEnrollmentpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postcardReplacement
     *
     * 
     *
     * @param \pmc_100\model\CardReplacementpostPayload $card_replacementpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\CardReplacementpostResponse
     */
    public function postcardReplacement($card_replacementpost_payload)
    {
        list($response) = $this->postcardReplacementWithHttpInfo($card_replacementpost_payload);
        return $response;
    }

    /**
     * Operation postcardReplacementWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\CardReplacementpostPayload $card_replacementpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\CardReplacementpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postcardReplacementWithHttpInfo($card_replacementpost_payload)
    {
        // verify the required parameter 'card_replacementpost_payload' is set
        if ($card_replacementpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_replacementpost_payload when calling postcardReplacement');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/accounts/accountupdate";
        $resourcePath = "consumertransactioncontrols/accounts/accountupdate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($card_replacementpost_payload)) {
            $_tempBody = $card_replacementpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\CardReplacementpostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/accounts/accountupdate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\CardReplacementpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\CardReplacementpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postconfigurationCardinquiry
     *
     * 
     *
     * @param \pmc_100\model\ConfigurationCardinquirypostPayload $configuration_cardinquirypost_payload CardInquiryRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\ConfigurationCardinquirypostResponse
     */
    public function postconfigurationCardinquiry($configuration_cardinquirypost_payload)
    {
        list($response) = $this->postconfigurationCardinquiryWithHttpInfo($configuration_cardinquirypost_payload);
        return $response;
    }

    /**
     * Operation postconfigurationCardinquiryWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\ConfigurationCardinquirypostPayload $configuration_cardinquirypost_payload CardInquiryRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\ConfigurationCardinquirypostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postconfigurationCardinquiryWithHttpInfo($configuration_cardinquirypost_payload)
    {
        // verify the required parameter 'configuration_cardinquirypost_payload' is set
        if ($configuration_cardinquirypost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configuration_cardinquirypost_payload when calling postconfigurationCardinquiry');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/configuration/cardinquiry";
        $resourcePath = "consumertransactioncontrols/configuration/cardinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configuration_cardinquirypost_payload)) {
            $_tempBody = $configuration_cardinquirypost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\ConfigurationCardinquirypostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/configuration/cardinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\ConfigurationCardinquirypostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\ConfigurationCardinquirypostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postdecoupleTokens
     *
     * 
     *
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
     * @param \pmc_100\model\DecoupleTokenspostPayload $decouple_tokenspost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\DecoupleTokenspostResponse
     */
    public function postdecoupleTokens($app_id, $decouple_tokenspost_payload, $app_group_id = null, $sponsor_id = null)
    {
        list($response) = $this->postdecoupleTokensWithHttpInfo($app_id, $decouple_tokenspost_payload, $app_group_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation postdecoupleTokensWithHttpInfo
     *
     * 
     *
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (required)
     * @param \pmc_100\model\DecoupleTokenspostPayload $decouple_tokenspost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\DecoupleTokenspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postdecoupleTokensWithHttpInfo($app_id, $decouple_tokenspost_payload, $app_group_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling postdecoupleTokens');
        }
        // verify the required parameter 'decouple_tokenspost_payload' is set
        if ($decouple_tokenspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $decouple_tokenspost_payload when calling postdecoupleTokens');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/accounts/decoupletokens";
        $resourcePath = "consumertransactioncontrols/accounts/decoupletokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($decouple_tokenspost_payload)) {
            $_tempBody = $decouple_tokenspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\DecoupleTokenspostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/accounts/decoupletokens'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\DecoupleTokenspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\DecoupleTokenspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmanageControls
     *
     * 
     *
     * @param string $document_id The unique documentID of a control document. (required)
     * @param \pmc_100\model\ManageControlspostPayload $manage_controlspost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\ManageControlspostResponse
     */
    public function postmanageControls($document_id, $manage_controlspost_payload)
    {
        list($response) = $this->postmanageControlsWithHttpInfo($document_id, $manage_controlspost_payload);
        return $response;
    }

    /**
     * Operation postmanageControlsWithHttpInfo
     *
     * 
     *
     * @param string $document_id The unique documentID of a control document. (required)
     * @param \pmc_100\model\ManageControlspostPayload $manage_controlspost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\ManageControlspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmanageControlsWithHttpInfo($document_id, $manage_controlspost_payload)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling postmanageControls');
        }
        // verify the required parameter 'manage_controlspost_payload' is set
        if ($manage_controlspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_controlspost_payload when calling postmanageControls');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules";
        $resourcePath = "consumertransactioncontrols/{documentID}/rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($document_id !== null) {
            $path = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_controlspost_payload)) {
            $_tempBody = $manage_controlspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\ManageControlspostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\ManageControlspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\ManageControlspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmerchantTypeControlsCardInquiry
     *
     * 
     *
     * @param \pmc_100\model\MerchantTypeControlsCardInquirypostPayload $merchant_type_controls_card_inquirypost_payload CardInquiryRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\MerchantTypeControlsCardInquirypostResponse
     */
    public function postmerchantTypeControlsCardInquiry($merchant_type_controls_card_inquirypost_payload)
    {
        list($response) = $this->postmerchantTypeControlsCardInquiryWithHttpInfo($merchant_type_controls_card_inquirypost_payload);
        return $response;
    }

    /**
     * Operation postmerchantTypeControlsCardInquiryWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\MerchantTypeControlsCardInquirypostPayload $merchant_type_controls_card_inquirypost_payload CardInquiryRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\MerchantTypeControlsCardInquirypostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmerchantTypeControlsCardInquiryWithHttpInfo($merchant_type_controls_card_inquirypost_payload)
    {
        // verify the required parameter 'merchant_type_controls_card_inquirypost_payload' is set
        if ($merchant_type_controls_card_inquirypost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_type_controls_card_inquirypost_payload when calling postmerchantTypeControlsCardInquiry');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/merchanttypecontrols/cardinquiry";
        $resourcePath = "consumertransactioncontrols/merchanttypecontrols/cardinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_type_controls_card_inquirypost_payload)) {
            $_tempBody = $merchant_type_controls_card_inquirypost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\MerchantTypeControlsCardInquirypostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/merchanttypecontrols/cardinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\MerchantTypeControlsCardInquirypostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\MerchantTypeControlsCardInquirypostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmobileWalletServices
     *
     * 
     *
     * @param \pmc_100\model\MobileWalletServicespostPayload $mobile_wallet_servicespost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\MobileWalletServicespostResponse
     */
    public function postmobileWalletServices($mobile_wallet_servicespost_payload)
    {
        list($response) = $this->postmobileWalletServicesWithHttpInfo($mobile_wallet_servicespost_payload);
        return $response;
    }

    /**
     * Operation postmobileWalletServicesWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\MobileWalletServicespostPayload $mobile_wallet_servicespost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\MobileWalletServicespostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmobileWalletServicesWithHttpInfo($mobile_wallet_servicespost_payload)
    {
        // verify the required parameter 'mobile_wallet_servicespost_payload' is set
        if ($mobile_wallet_servicespost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mobile_wallet_servicespost_payload when calling postmobileWalletServices');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/walletservices/accountinquiry";
        $resourcePath = "consumertransactioncontrols/walletservices/accountinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mobile_wallet_servicespost_payload)) {
            $_tempBody = $mobile_wallet_servicespost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\MobileWalletServicespostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/walletservices/accountinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\MobileWalletServicespostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\MobileWalletServicespostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation posttransactionControlHistoryByDocumentId
     *
     * 
     *
     * @param \pmc_100\model\TransactionControlHistoryByDocumentIdpostPayload $transaction_control_history_by_document_idpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\TransactionControlHistoryByDocumentIdpostResponse
     */
    public function posttransactionControlHistoryByDocumentId($transaction_control_history_by_document_idpost_payload)
    {
        list($response) = $this->posttransactionControlHistoryByDocumentIdWithHttpInfo($transaction_control_history_by_document_idpost_payload);
        return $response;
    }

    /**
     * Operation posttransactionControlHistoryByDocumentIdWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\TransactionControlHistoryByDocumentIdpostPayload $transaction_control_history_by_document_idpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\TransactionControlHistoryByDocumentIdpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function posttransactionControlHistoryByDocumentIdWithHttpInfo($transaction_control_history_by_document_idpost_payload)
    {
        // verify the required parameter 'transaction_control_history_by_document_idpost_payload' is set
        if ($transaction_control_history_by_document_idpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_control_history_by_document_idpost_payload when calling posttransactionControlHistoryByDocumentId');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/controlHistory";
        $resourcePath = "consumertransactioncontrols/controlHistory";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($transaction_control_history_by_document_idpost_payload)) {
            $_tempBody = $transaction_control_history_by_document_idpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\TransactionControlHistoryByDocumentIdpostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/controlHistory'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\TransactionControlHistoryByDocumentIdpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\TransactionControlHistoryByDocumentIdpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation posttransactionControls
     *
     * 
     *
     * @param \pmc_100\model\TransactionControlspostPayload $transaction_controlspost_payload CardInquiryRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\TransactionControlspostResponse
     */
    public function posttransactionControls($transaction_controlspost_payload)
    {
        list($response) = $this->posttransactionControlsWithHttpInfo($transaction_controlspost_payload);
        return $response;
    }

    /**
     * Operation posttransactionControlsWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\TransactionControlspostPayload $transaction_controlspost_payload CardInquiryRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\TransactionControlspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function posttransactionControlsWithHttpInfo($transaction_controlspost_payload)
    {
        // verify the required parameter 'transaction_controlspost_payload' is set
        if ($transaction_controlspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_controlspost_payload when calling posttransactionControls');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/transactiontypecontrols/cardinquiry";
        $resourcePath = "consumertransactioncontrols/transactiontypecontrols/cardinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($transaction_controlspost_payload)) {
            $_tempBody = $transaction_controlspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\TransactionControlspostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/transactiontypecontrols/cardinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\TransactionControlspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\TransactionControlspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation posttransactionControlsByPan
     *
     * 
     *
     * @param \pmc_100\model\TransactionControlsByPanpostPayload $transaction_controls_by_panpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\TransactionControlsByPanpostResponse
     */
    public function posttransactionControlsByPan($transaction_controls_by_panpost_payload)
    {
        list($response) = $this->posttransactionControlsByPanWithHttpInfo($transaction_controls_by_panpost_payload);
        return $response;
    }

    /**
     * Operation posttransactionControlsByPanWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\TransactionControlsByPanpostPayload $transaction_controls_by_panpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\TransactionControlsByPanpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function posttransactionControlsByPanWithHttpInfo($transaction_controls_by_panpost_payload)
    {
        // verify the required parameter 'transaction_controls_by_panpost_payload' is set
        if ($transaction_controls_by_panpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_controls_by_panpost_payload when calling posttransactionControlsByPan');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/inquiries/cardinquiry";
        $resourcePath = "consumertransactioncontrols/inquiries/cardinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($transaction_controls_by_panpost_payload)) {
            $_tempBody = $transaction_controls_by_panpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\TransactionControlsByPanpostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/inquiries/cardinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\TransactionControlsByPanpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\TransactionControlsByPanpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postvtcRegistration
     *
     * 
     *
     * @param \pmc_100\model\VtcRegistrationpostPayload $vtc_registrationpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\VtcRegistrationpostResponse
     */
    public function postvtcRegistration($vtc_registrationpost_payload)
    {
        list($response) = $this->postvtcRegistrationWithHttpInfo($vtc_registrationpost_payload);
        return $response;
    }

    /**
     * Operation postvtcRegistrationWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\VtcRegistrationpostPayload $vtc_registrationpost_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\VtcRegistrationpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postvtcRegistrationWithHttpInfo($vtc_registrationpost_payload)
    {
        // verify the required parameter 'vtc_registrationpost_payload' is set
        if ($vtc_registrationpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vtc_registrationpost_payload when calling postvtcRegistration');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols";
        $resourcePath = "consumertransactioncontrols";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($vtc_registrationpost_payload)) {
            $_tempBody = $vtc_registrationpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\VtcRegistrationpostResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\VtcRegistrationpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\VtcRegistrationpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putapplicationConfiguration
     *
     * 
     *
     * @param \pmc_100\model\ApplicationConfigurationputPayload $application_configurationput_payload callBackSettingsRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\ApplicationConfigurationputResponse
     */
    public function putapplicationConfiguration($application_configurationput_payload)
    {
        list($response) = $this->putapplicationConfigurationWithHttpInfo($application_configurationput_payload);
        return $response;
    }

    /**
     * Operation putapplicationConfigurationWithHttpInfo
     *
     * 
     *
     * @param \pmc_100\model\ApplicationConfigurationputPayload $application_configurationput_payload callBackSettingsRequest (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\ApplicationConfigurationputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putapplicationConfigurationWithHttpInfo($application_configurationput_payload)
    {
        // verify the required parameter 'application_configurationput_payload' is set
        if ($application_configurationput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_configurationput_payload when calling putapplicationConfiguration');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/applications/configuration";
        $resourcePath = "consumertransactioncontrols/applications/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($application_configurationput_payload)) {
            $_tempBody = $application_configurationput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\ApplicationConfigurationputResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/applications/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\ApplicationConfigurationputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\ApplicationConfigurationputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putmanageControls
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be updated. (required)
     * @param \pmc_100\model\ManageControlsputPayload $manage_controlsput_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return \pmc_100\model\ManageControlsputResponse
     */
    public function putmanageControls($document_id, $manage_controlsput_payload)
    {
        list($response) = $this->putmanageControlsWithHttpInfo($document_id, $manage_controlsput_payload);
        return $response;
    }

    /**
     * Operation putmanageControlsWithHttpInfo
     *
     * 
     *
     * @param string $document_id The documentID of the control document to be updated. (required)
     * @param \pmc_100\model\ManageControlsputPayload $manage_controlsput_payload request (required)
     * @throws \pmc_100\ApiException on non-2xx response
     * @return array of \pmc_100\model\ManageControlsputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putmanageControlsWithHttpInfo($document_id, $manage_controlsput_payload)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling putmanageControls');
        }
        // verify the required parameter 'manage_controlsput_payload' is set
        if ($manage_controlsput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_controlsput_payload when calling putmanageControls');
        }
        // parse inputs
        $path = "/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules";
        $resourcePath = "consumertransactioncontrols/{documentID}/rules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($document_id !== null) {
            $path = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "documentID" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_controlsput_payload)) {
            $_tempBody = $manage_controlsput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_100\model\ManageControlsputResponse',
                '/vctc/customerrules//v1/consumertransactioncontrols/{documentID}/rules'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_100\model\ManageControlsputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_100\model\ManageControlsputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/