<?php
/**
 * PointOfServiceInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  pmc_101
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Authorization API
 *
 * The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_101\model;

use \ArrayAccess;

/**
 * PointOfServiceInfo Class Doc Comment
 *
 * @category    Class
 * @description The point of service details for a decision request.
 * @package     pmc_101
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PointOfServiceInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'pointOfServiceInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'personal_identification_number_entry_mode' => 'string',
        'terminal_type' => 'string',
        'primary_account_number_entry_mode' => 'string',
        'security_condition' => 'string',
        'presentation_data' => '\pmc_101\model\PresentationData',
        'terminal_entry_capability' => 'string',
        'terminal_class' => '\pmc_101\model\TerminalClass'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'personal_identification_number_entry_mode' => 'personalIdentificationNumberEntryMode',
        'terminal_type' => 'terminalType',
        'primary_account_number_entry_mode' => 'primaryAccountNumberEntryMode',
        'security_condition' => 'securityCondition',
        'presentation_data' => 'presentationData',
        'terminal_entry_capability' => 'terminalEntryCapability',
        'terminal_class' => 'terminalClass'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'personal_identification_number_entry_mode' => 'setPersonalIdentificationNumberEntryMode',
        'terminal_type' => 'setTerminalType',
        'primary_account_number_entry_mode' => 'setPrimaryAccountNumberEntryMode',
        'security_condition' => 'setSecurityCondition',
        'presentation_data' => 'setPresentationData',
        'terminal_entry_capability' => 'setTerminalEntryCapability',
        'terminal_class' => 'setTerminalClass'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'personal_identification_number_entry_mode' => 'getPersonalIdentificationNumberEntryMode',
        'terminal_type' => 'getTerminalType',
        'primary_account_number_entry_mode' => 'getPrimaryAccountNumberEntryMode',
        'security_condition' => 'getSecurityCondition',
        'presentation_data' => 'getPresentationData',
        'terminal_entry_capability' => 'getTerminalEntryCapability',
        'terminal_class' => 'getTerminalClass'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['personal_identification_number_entry_mode'] = isset($data['personal_identification_number_entry_mode']) ? $data['personal_identification_number_entry_mode'] : null;
        $this->container['terminal_type'] = isset($data['terminal_type']) ? $data['terminal_type'] : null;
        $this->container['primary_account_number_entry_mode'] = isset($data['primary_account_number_entry_mode']) ? $data['primary_account_number_entry_mode'] : null;
        $this->container['security_condition'] = isset($data['security_condition']) ? $data['security_condition'] : null;
        $this->container['presentation_data'] = isset($data['presentation_data']) ? $data['presentation_data'] : null;
        $this->container['terminal_entry_capability'] = isset($data['terminal_entry_capability']) ? $data['terminal_entry_capability'] : null;
        $this->container['terminal_class'] = isset($data['terminal_class']) ? $data['terminal_class'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['terminal_type'] === null) {
            $invalid_properties[] = "'terminal_type' can't be null";
        }
        if ($this->container['presentation_data'] === null) {
            $invalid_properties[] = "'presentation_data' can't be null";
        }
        if ($this->container['terminal_entry_capability'] === null) {
            $invalid_properties[] = "'terminal_entry_capability' can't be null";
        }
        if ($this->container['terminal_class'] === null) {
            $invalid_properties[] = "'terminal_class' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['terminal_type'] === null) {
            return false;
        }
        if ($this->container['presentation_data'] === null) {
            return false;
        }
        if ($this->container['terminal_entry_capability'] === null) {
            return false;
        }
        if ($this->container['terminal_class'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets personal_identification_number_entry_mode
     * @return string
     */
    public function getPersonalIdentificationNumberEntryMode()
    {
        return $this->container['personal_identification_number_entry_mode'];
    }

    /**
     * Sets personal_identification_number_entry_mode
     * @param string $personal_identification_number_entry_mode identifies the way the PIN number was entered
     * @return $this
     */
    public function setPersonalIdentificationNumberEntryMode($personal_identification_number_entry_mode)
    {
        $this->container['personal_identification_number_entry_mode'] = $personal_identification_number_entry_mode;

        return $this;
    }

    /**
     * Gets terminal_type
     * @return string
     */
    public function getTerminalType()
    {
        return $this->container['terminal_type'];
    }

    /**
     * Sets terminal_type
     * @param string $terminal_type identifies the type of terminal at which the transaction was acquired
     * @return $this
     */
    public function setTerminalType($terminal_type)
    {
        $this->container['terminal_type'] = $terminal_type;

        return $this;
    }

    /**
     * Gets primary_account_number_entry_mode
     * @return string
     */
    public function getPrimaryAccountNumberEntryMode()
    {
        return $this->container['primary_account_number_entry_mode'];
    }

    /**
     * Sets primary_account_number_entry_mode
     * @param string $primary_account_number_entry_mode identifies the way  primary account number was entered
     * @return $this
     */
    public function setPrimaryAccountNumberEntryMode($primary_account_number_entry_mode)
    {
        $this->container['primary_account_number_entry_mode'] = $primary_account_number_entry_mode;

        return $this;
    }

    /**
     * Gets security_condition
     * @return string
     */
    public function getSecurityCondition()
    {
        return $this->container['security_condition'];
    }

    /**
     * Sets security_condition
     * @param string $security_condition identifies information about how the payment transaction was authenticated
     * @return $this
     */
    public function setSecurityCondition($security_condition)
    {
        $this->container['security_condition'] = $security_condition;

        return $this;
    }

    /**
     * Gets presentation_data
     * @return \pmc_101\model\PresentationData
     */
    public function getPresentationData()
    {
        return $this->container['presentation_data'];
    }

    /**
     * Sets presentation_data
     * @param \pmc_101\model\PresentationData $presentation_data
     * @return $this
     */
    public function setPresentationData($presentation_data)
    {
        $this->container['presentation_data'] = $presentation_data;

        return $this;
    }

    /**
     * Gets terminal_entry_capability
     * @return string
     */
    public function getTerminalEntryCapability()
    {
        return $this->container['terminal_entry_capability'];
    }

    /**
     * Sets terminal_entry_capability
     * @param string $terminal_entry_capability identifies the form the primary account number was acquired
     * @return $this
     */
    public function setTerminalEntryCapability($terminal_entry_capability)
    {
        $this->container['terminal_entry_capability'] = $terminal_entry_capability;

        return $this;
    }

    /**
     * Gets terminal_class
     * @return \pmc_101\model\TerminalClass
     */
    public function getTerminalClass()
    {
        return $this->container['terminal_class'];
    }

    /**
     * Sets terminal_class
     * @param \pmc_101\model\TerminalClass $terminal_class
     * @return $this
     */
    public function setTerminalClass($terminal_class)
    {
        $this->container['terminal_class'] = $terminal_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\pmc_101\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\pmc_101\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/