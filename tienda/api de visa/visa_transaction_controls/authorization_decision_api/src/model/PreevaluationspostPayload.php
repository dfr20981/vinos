<?php
/**
 * PreevaluationspostPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  pmc_101
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Authorization API
 *
 * The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_101\model;

use \ArrayAccess;

/**
 * PreevaluationspostPayload Class Doc Comment
 *
 * @category    Class
 * @description preEvaluationRequest
 * @package     pmc_101
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PreevaluationspostPayload implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'preevaluationspostPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'processing_code' => 'string',
        'bank_account_number' => 'string',
        'retrieval_reference_number' => 'string',
        'message_type' => 'string',
        'was_processor_declined' => 'bool',
        'primary_account_number' => 'string',
        'card_detail' => '\pmc_101\model\CardDetail',
        'merchant_info' => '\pmc_101\model\MerchantInfo',
        'payment_token' => '\pmc_101\model\PaymentToken',
        'point_of_service_info' => '\pmc_101\model\PointOfServiceInfo',
        'transaction_id' => 'string',
        'cardholder_bill_amount' => 'double',
        'decision_type' => 'string',
        'date_time_local' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'processing_code' => 'processingCode',
        'bank_account_number' => 'bankAccountNumber',
        'retrieval_reference_number' => 'retrievalReferenceNumber',
        'message_type' => 'messageType',
        'was_processor_declined' => 'wasProcessorDeclined',
        'primary_account_number' => 'primaryAccountNumber',
        'card_detail' => 'cardDetail',
        'merchant_info' => 'merchantInfo',
        'payment_token' => 'paymentToken',
        'point_of_service_info' => 'pointOfServiceInfo',
        'transaction_id' => 'transactionID',
        'cardholder_bill_amount' => 'cardholderBillAmount',
        'decision_type' => 'decisionType',
        'date_time_local' => 'dateTimeLocal'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'processing_code' => 'setProcessingCode',
        'bank_account_number' => 'setBankAccountNumber',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber',
        'message_type' => 'setMessageType',
        'was_processor_declined' => 'setWasProcessorDeclined',
        'primary_account_number' => 'setPrimaryAccountNumber',
        'card_detail' => 'setCardDetail',
        'merchant_info' => 'setMerchantInfo',
        'payment_token' => 'setPaymentToken',
        'point_of_service_info' => 'setPointOfServiceInfo',
        'transaction_id' => 'setTransactionId',
        'cardholder_bill_amount' => 'setCardholderBillAmount',
        'decision_type' => 'setDecisionType',
        'date_time_local' => 'setDateTimeLocal'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'processing_code' => 'getProcessingCode',
        'bank_account_number' => 'getBankAccountNumber',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber',
        'message_type' => 'getMessageType',
        'was_processor_declined' => 'getWasProcessorDeclined',
        'primary_account_number' => 'getPrimaryAccountNumber',
        'card_detail' => 'getCardDetail',
        'merchant_info' => 'getMerchantInfo',
        'payment_token' => 'getPaymentToken',
        'point_of_service_info' => 'getPointOfServiceInfo',
        'transaction_id' => 'getTransactionId',
        'cardholder_bill_amount' => 'getCardholderBillAmount',
        'decision_type' => 'getDecisionType',
        'date_time_local' => 'getDateTimeLocal'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processing_code'] = isset($data['processing_code']) ? $data['processing_code'] : null;
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['retrieval_reference_number'] = isset($data['retrieval_reference_number']) ? $data['retrieval_reference_number'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['was_processor_declined'] = isset($data['was_processor_declined']) ? $data['was_processor_declined'] : null;
        $this->container['primary_account_number'] = isset($data['primary_account_number']) ? $data['primary_account_number'] : null;
        $this->container['card_detail'] = isset($data['card_detail']) ? $data['card_detail'] : null;
        $this->container['merchant_info'] = isset($data['merchant_info']) ? $data['merchant_info'] : null;
        $this->container['payment_token'] = isset($data['payment_token']) ? $data['payment_token'] : null;
        $this->container['point_of_service_info'] = isset($data['point_of_service_info']) ? $data['point_of_service_info'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['cardholder_bill_amount'] = isset($data['cardholder_bill_amount']) ? $data['cardholder_bill_amount'] : null;
        $this->container['decision_type'] = isset($data['decision_type']) ? $data['decision_type'] : null;
        $this->container['date_time_local'] = isset($data['date_time_local']) ? $data['date_time_local'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['processing_code'] === null) {
            $invalid_properties[] = "'processing_code' can't be null";
        }
        if ($this->container['retrieval_reference_number'] === null) {
            $invalid_properties[] = "'retrieval_reference_number' can't be null";
        }
        if ($this->container['message_type'] === null) {
            $invalid_properties[] = "'message_type' can't be null";
        }
        if ($this->container['primary_account_number'] === null) {
            $invalid_properties[] = "'primary_account_number' can't be null";
        }
        if ($this->container['merchant_info'] === null) {
            $invalid_properties[] = "'merchant_info' can't be null";
        }
        if ($this->container['point_of_service_info'] === null) {
            $invalid_properties[] = "'point_of_service_info' can't be null";
        }
        if ($this->container['cardholder_bill_amount'] === null) {
            $invalid_properties[] = "'cardholder_bill_amount' can't be null";
        }
        if ($this->container['decision_type'] === null) {
            $invalid_properties[] = "'decision_type' can't be null";
        }
        if ($this->container['date_time_local'] === null) {
            $invalid_properties[] = "'date_time_local' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['processing_code'] === null) {
            return false;
        }
        if ($this->container['retrieval_reference_number'] === null) {
            return false;
        }
        if ($this->container['message_type'] === null) {
            return false;
        }
        if ($this->container['primary_account_number'] === null) {
            return false;
        }
        if ($this->container['merchant_info'] === null) {
            return false;
        }
        if ($this->container['point_of_service_info'] === null) {
            return false;
        }
        if ($this->container['cardholder_bill_amount'] === null) {
            return false;
        }
        if ($this->container['decision_type'] === null) {
            return false;
        }
        if ($this->container['date_time_local'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets processing_code
     * @return string
     */
    public function getProcessingCode()
    {
        return $this->container['processing_code'];
    }

    /**
     * Sets processing_code
     * @param string $processing_code ISO processing code must be numeric, must be 6 positions
     * @return $this
     */
    public function setProcessingCode($processing_code)
    {
        $this->container['processing_code'] = $processing_code;

        return $this;
    }

    /**
     * Gets bank_account_number
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     * @param string $bank_account_number The bank acocunt number for which the decision is to be made, must be between 16 and 19 numeric digits
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     * @return string
     */
    public function getRetrievalReferenceNumber()
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     * @param string $retrieval_reference_number The retrieval reference number assigned by the card acceptor, must be at least 1 character alphanumeric
     * @return $this
     */
    public function setRetrievalReferenceNumber($retrieval_reference_number)
    {
        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }

    /**
     * Gets message_type
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     * @param string $message_type ISO message type
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets was_processor_declined
     * @return bool
     */
    public function getWasProcessorDeclined()
    {
        return $this->container['was_processor_declined'];
    }

    /**
     * Sets was_processor_declined
     * @param bool $was_processor_declined Provided along with decision type INFORM to indicate if the transaction was declined or approved .
     * @return $this
     */
    public function setWasProcessorDeclined($was_processor_declined)
    {
        $this->container['was_processor_declined'] = $was_processor_declined;

        return $this;
    }

    /**
     * Gets primary_account_number
     * @return string
     */
    public function getPrimaryAccountNumber()
    {
        return $this->container['primary_account_number'];
    }

    /**
     * Sets primary_account_number
     * @param string $primary_account_number The card number for which the decision is to be made, must be between 16 and 19 numeric digits
     * @return $this
     */
    public function setPrimaryAccountNumber($primary_account_number)
    {
        $this->container['primary_account_number'] = $primary_account_number;

        return $this;
    }

    /**
     * Gets card_detail
     * @return \pmc_101\model\CardDetail
     */
    public function getCardDetail()
    {
        return $this->container['card_detail'];
    }

    /**
     * Sets card_detail
     * @param \pmc_101\model\CardDetail $card_detail
     * @return $this
     */
    public function setCardDetail($card_detail)
    {
        $this->container['card_detail'] = $card_detail;

        return $this;
    }

    /**
     * Gets merchant_info
     * @return \pmc_101\model\MerchantInfo
     */
    public function getMerchantInfo()
    {
        return $this->container['merchant_info'];
    }

    /**
     * Sets merchant_info
     * @param \pmc_101\model\MerchantInfo $merchant_info
     * @return $this
     */
    public function setMerchantInfo($merchant_info)
    {
        $this->container['merchant_info'] = $merchant_info;

        return $this;
    }

    /**
     * Gets payment_token
     * @return \pmc_101\model\PaymentToken
     */
    public function getPaymentToken()
    {
        return $this->container['payment_token'];
    }

    /**
     * Sets payment_token
     * @param \pmc_101\model\PaymentToken $payment_token
     * @return $this
     */
    public function setPaymentToken($payment_token)
    {
        $this->container['payment_token'] = $payment_token;

        return $this;
    }

    /**
     * Gets point_of_service_info
     * @return \pmc_101\model\PointOfServiceInfo
     */
    public function getPointOfServiceInfo()
    {
        return $this->container['point_of_service_info'];
    }

    /**
     * Sets point_of_service_info
     * @param \pmc_101\model\PointOfServiceInfo $point_of_service_info
     * @return $this
     */
    public function setPointOfServiceInfo($point_of_service_info)
    {
        $this->container['point_of_service_info'] = $point_of_service_info;

        return $this;
    }

    /**
     * Gets transaction_id
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     * @param string $transaction_id The unique transaction ID assigned by processing gateway. In case of NON visa processed transaction, this will be a Unique tranID from Issuer system.
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets cardholder_bill_amount
     * @return double
     */
    public function getCardholderBillAmount()
    {
        return $this->container['cardholder_bill_amount'];
    }

    /**
     * Sets cardholder_bill_amount
     * @param double $cardholder_bill_amount The total amount to be billed to the cardholder inclusive of any fees assessed.  This amount must be in the card issuers currency.
     * @return $this
     */
    public function setCardholderBillAmount($cardholder_bill_amount)
    {
        $this->container['cardholder_bill_amount'] = $cardholder_bill_amount;

        return $this;
    }

    /**
     * Gets decision_type
     * @return string
     */
    public function getDecisionType()
    {
        return $this->container['decision_type'];
    }

    /**
     * Sets decision_type
     * @param string $decision_type The decision request type.
     * @return $this
     */
    public function setDecisionType($decision_type)
    {
        $this->container['decision_type'] = $decision_type;

        return $this;
    }

    /**
     * Gets date_time_local
     * @return string
     */
    public function getDateTimeLocal()
    {
        return $this->container['date_time_local'];
    }

    /**
     * Sets date_time_local
     * @param string $date_time_local The date and time the transaction originated in the format: mmddhhmms
     * @return $this
     */
    public function setDateTimeLocal($date_time_local)
    {
        $this->container['date_time_local'] = $date_time_local;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\pmc_101\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\pmc_101\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/