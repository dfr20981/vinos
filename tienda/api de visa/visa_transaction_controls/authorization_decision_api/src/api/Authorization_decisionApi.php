<?php
/**
 * Authorization_decisionApi
 * PHP version 5
 *
 * @category Class
 * @package  pmc_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Authorization API
 *
 * The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_101\api;

use \pmc_101\ApiClient;
use \pmc_101\ApiException;
use \pmc_101\Configuration;
use \pmc_101\ObjectSerializer;

/**
 * Authorization_decisionApi Class Doc Comment
 *
 * @category Class
 * @package  pmc_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Authorization_decisionApi
{
    /**
     * API Client
     *
     * @var \pmc_101\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \pmc_101\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\pmc_101\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \pmc_101\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \pmc_101\ApiClient $apiClient set the API client
     *
     * @return Authorization_decisionApi
     */
    public function setApiClient(\pmc_101\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getdecisionRequestActions
     *
     * 
     *
     * @param string $decision_id The ID of the document for the document to be returned (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return \pmc_101\model\DecisionRequestActionsgetResponse
     */
    public function getdecisionRequestActions($decision_id)
    {
        list($response) = $this->getdecisionRequestActionsWithHttpInfo($decision_id);
        return $response;
    }

    /**
     * Operation getdecisionRequestActionsWithHttpInfo
     *
     * 
     *
     * @param string $decision_id The ID of the document for the document to be returned (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return array of \pmc_101\model\DecisionRequestActionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getdecisionRequestActionsWithHttpInfo($decision_id)
    {
        // verify the required parameter 'decision_id' is set
        if ($decision_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $decision_id when calling getdecisionRequestActions');
        }
        // parse inputs
        $path = "/vctc/validation/v1/decisions/{decisionID}";
        $resourcePath = "decisions/{decisionID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($decision_id !== null) {
            $path = str_replace(
                "{" . "decisionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($decision_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "decisionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($decision_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_101\model\DecisionRequestActionsgetResponse',
                '/vctc/validation/v1/decisions/{decisionID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_101\model\DecisionRequestActionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_101\model\DecisionRequestActionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getdecisionsHistory
     *
     * 
     *
     * @param string $page Page number to be returned (required)
     * @param string $limit Page size to be returned (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return \pmc_101\model\DecisionsHistorygetResponse
     */
    public function getdecisionsHistory($page, $limit)
    {
        list($response) = $this->getdecisionsHistoryWithHttpInfo($page, $limit);
        return $response;
    }

    /**
     * Operation getdecisionsHistoryWithHttpInfo
     *
     * 
     *
     * @param string $page Page number to be returned (required)
     * @param string $limit Page size to be returned (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return array of \pmc_101\model\DecisionsHistorygetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getdecisionsHistoryWithHttpInfo($page, $limit)
    {
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling getdecisionsHistory');
        }
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $limit when calling getdecisionsHistory');
        }
        // parse inputs
        $path = "/vctc/validation/v1/decisions/history";
        $resourcePath = "decisions/history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_101\model\DecisionsHistorygetResponse',
                '/vctc/validation/v1/decisions/history'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_101\model\DecisionsHistorygetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_101\model\DecisionsHistorygetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postdecisionInquiry
     *
     * 
     *
     * @param \pmc_101\model\DecisionInquirypostPayload $decision_inquirypost_payload decisionRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return \pmc_101\model\DecisionInquirypostResponse
     */
    public function postdecisionInquiry($decision_inquirypost_payload)
    {
        list($response) = $this->postdecisionInquiryWithHttpInfo($decision_inquirypost_payload);
        return $response;
    }

    /**
     * Operation postdecisionInquiryWithHttpInfo
     *
     * 
     *
     * @param \pmc_101\model\DecisionInquirypostPayload $decision_inquirypost_payload decisionRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return array of \pmc_101\model\DecisionInquirypostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postdecisionInquiryWithHttpInfo($decision_inquirypost_payload)
    {
        // verify the required parameter 'decision_inquirypost_payload' is set
        if ($decision_inquirypost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $decision_inquirypost_payload when calling postdecisionInquiry');
        }
        // parse inputs
        $path = "/vctc/validation/v1/consumertransactioncontrols/decisioninquiry";
        $resourcePath = "consumertransactioncontrols/decisioninquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($decision_inquirypost_payload)) {
            $_tempBody = $decision_inquirypost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_101\model\DecisionInquirypostResponse',
                '/vctc/validation/v1/consumertransactioncontrols/decisioninquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_101\model\DecisionInquirypostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_101\model\DecisionInquirypostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postdecisionRequest
     *
     * 
     *
     * @param \pmc_101\model\DecisionRequestpostPayload $decision_requestpost_payload decisionRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return \pmc_101\model\DecisionRequestpostResponse
     */
    public function postdecisionRequest($decision_requestpost_payload)
    {
        list($response) = $this->postdecisionRequestWithHttpInfo($decision_requestpost_payload);
        return $response;
    }

    /**
     * Operation postdecisionRequestWithHttpInfo
     *
     * 
     *
     * @param \pmc_101\model\DecisionRequestpostPayload $decision_requestpost_payload decisionRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return array of \pmc_101\model\DecisionRequestpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postdecisionRequestWithHttpInfo($decision_requestpost_payload)
    {
        // verify the required parameter 'decision_requestpost_payload' is set
        if ($decision_requestpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $decision_requestpost_payload when calling postdecisionRequest');
        }
        // parse inputs
        $path = "/vctc/validation/v1/decisions";
        $resourcePath = "decisions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($decision_requestpost_payload)) {
            $_tempBody = $decision_requestpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_101\model\DecisionRequestpostResponse',
                '/vctc/validation/v1/decisions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_101\model\DecisionRequestpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_101\model\DecisionRequestpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postdecisionRequestByPan
     *
     * 
     *
     * @param \pmc_101\model\DecisionRequestByPanpostPayload $decision_request_by_panpost_payload decisionHistoryRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return \pmc_101\model\DecisionRequestByPanpostResponse
     */
    public function postdecisionRequestByPan($decision_request_by_panpost_payload)
    {
        list($response) = $this->postdecisionRequestByPanWithHttpInfo($decision_request_by_panpost_payload);
        return $response;
    }

    /**
     * Operation postdecisionRequestByPanWithHttpInfo
     *
     * 
     *
     * @param \pmc_101\model\DecisionRequestByPanpostPayload $decision_request_by_panpost_payload decisionHistoryRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return array of \pmc_101\model\DecisionRequestByPanpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postdecisionRequestByPanWithHttpInfo($decision_request_by_panpost_payload)
    {
        // verify the required parameter 'decision_request_by_panpost_payload' is set
        if ($decision_request_by_panpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $decision_request_by_panpost_payload when calling postdecisionRequestByPan');
        }
        // parse inputs
        $path = "/vctc/validation/v1/decisions/cardinquiry";
        $resourcePath = "decisions/cardinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($decision_request_by_panpost_payload)) {
            $_tempBody = $decision_request_by_panpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_101\model\DecisionRequestByPanpostResponse',
                '/vctc/validation/v1/decisions/cardinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_101\model\DecisionRequestByPanpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_101\model\DecisionRequestByPanpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postpreevaluations
     *
     * 
     *
     * @param \pmc_101\model\PreevaluationspostPayload $preevaluationspost_payload preEvaluationRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return \pmc_101\model\PreevaluationspostResponse
     */
    public function postpreevaluations($preevaluationspost_payload)
    {
        list($response) = $this->postpreevaluationsWithHttpInfo($preevaluationspost_payload);
        return $response;
    }

    /**
     * Operation postpreevaluationsWithHttpInfo
     *
     * 
     *
     * @param \pmc_101\model\PreevaluationspostPayload $preevaluationspost_payload preEvaluationRequest (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return array of \pmc_101\model\PreevaluationspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postpreevaluationsWithHttpInfo($preevaluationspost_payload)
    {
        // verify the required parameter 'preevaluationspost_payload' is set
        if ($preevaluationspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preevaluationspost_payload when calling postpreevaluations');
        }
        // parse inputs
        $path = "/vctc/validation/v1/preevaluations";
        $resourcePath = "preevaluations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($preevaluationspost_payload)) {
            $_tempBody = $preevaluationspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_101\model\PreevaluationspostResponse',
                '/vctc/validation/v1/preevaluations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_101\model\PreevaluationspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_101\model\PreevaluationspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putdecisionRequestActions
     *
     * 
     *
     * @param string $decision_id The ID of the document for the document to be updated (required)
     * @param \pmc_101\model\DecisionRequestActionsputPayload $decision_request_actionsput_payload decisionUpdate (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return \pmc_101\model\DecisionRequestActionsputResponse
     */
    public function putdecisionRequestActions($decision_id, $decision_request_actionsput_payload)
    {
        list($response) = $this->putdecisionRequestActionsWithHttpInfo($decision_id, $decision_request_actionsput_payload);
        return $response;
    }

    /**
     * Operation putdecisionRequestActionsWithHttpInfo
     *
     * 
     *
     * @param string $decision_id The ID of the document for the document to be updated (required)
     * @param \pmc_101\model\DecisionRequestActionsputPayload $decision_request_actionsput_payload decisionUpdate (required)
     * @throws \pmc_101\ApiException on non-2xx response
     * @return array of \pmc_101\model\DecisionRequestActionsputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putdecisionRequestActionsWithHttpInfo($decision_id, $decision_request_actionsput_payload)
    {
        // verify the required parameter 'decision_id' is set
        if ($decision_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $decision_id when calling putdecisionRequestActions');
        }
        // verify the required parameter 'decision_request_actionsput_payload' is set
        if ($decision_request_actionsput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $decision_request_actionsput_payload when calling putdecisionRequestActions');
        }
        // parse inputs
        $path = "/vctc/validation/v1/decisions/{decisionID}";
        $resourcePath = "decisions/{decisionID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($decision_id !== null) {
            $path = str_replace(
                "{" . "decisionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($decision_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "decisionID" . "}",
                $this->apiClient->getSerializer()->toPathValue($decision_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($decision_request_actionsput_payload)) {
            $_tempBody = $decision_request_actionsput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_101\model\DecisionRequestActionsputResponse',
                '/vctc/validation/v1/decisions/{decisionID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_101\model\DecisionRequestActionsputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_101\model\DecisionRequestActionsputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/