<?php
/**
 * Customer_rules_alertsApi
 * PHP version 5
 *
 * @category Class
 * @package  pmc_105
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alert History and Customer Profiles API
 *
 * The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_105\api;

use \pmc_105\ApiClient;
use \pmc_105\ApiException;
use \pmc_105\Configuration;
use \pmc_105\ObjectSerializer;

/**
 * Customer_rules_alertsApi Class Doc Comment
 *
 * @category Class
 * @package  pmc_105
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer_rules_alertsApi
{
    /**
     * API Client
     *
     * @var \pmc_105\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \pmc_105\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\pmc_105\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \pmc_105\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \pmc_105\ApiClient $apiClient set the API client
     *
     * @return Customer_rules_alertsApi
     */
    public function setApiClient(\pmc_105\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deletemanageAlertsPreferences
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\ManageAlertsPreferencesdeletePayload $manage_alerts_preferencesdelete_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\ManageAlertsPreferencesdeleteResponse
     */
    public function deletemanageAlertsPreferences($user_identifier, $manage_alerts_preferencesdelete_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->deletemanageAlertsPreferencesWithHttpInfo($user_identifier, $manage_alerts_preferencesdelete_payload, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation deletemanageAlertsPreferencesWithHttpInfo
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\ManageAlertsPreferencesdeletePayload $manage_alerts_preferencesdelete_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\ManageAlertsPreferencesdeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletemanageAlertsPreferencesWithHttpInfo($user_identifier, $manage_alerts_preferencesdelete_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'user_identifier' is set
        if ($user_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identifier when calling deletemanageAlertsPreferences');
        }
        // verify the required parameter 'manage_alerts_preferencesdelete_payload' is set
        if ($manage_alerts_preferencesdelete_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_alerts_preferencesdelete_payload when calling deletemanageAlertsPreferences');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences";
        $resourcePath = "consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // path params
        if ($user_identifier !== null) {
            $path = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_alerts_preferencesdelete_payload)) {
            $_tempBody = $manage_alerts_preferencesdelete_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\ManageAlertsPreferencesdeleteResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\ManageAlertsPreferencesdeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\ManageAlertsPreferencesdeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGetNotificationDetails
     *
     * 
     *
     * @param string $limit Page size to be returned (required)
     * @param string $page Page number to be returned (required)
     * @param string $decision_id Decision ID to search for (optional)
     * @param string $document_id Control document ID to search for (optional)
     * @param string $notification_id Notification ID to search for (optional)
     * @param string $user_identifier User identifier to search for (optional)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\GetNotificationDetailsgetResponse
     */
    public function getGetNotificationDetails($limit, $page, $decision_id = null, $document_id = null, $notification_id = null, $user_identifier = null, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->getGetNotificationDetailsWithHttpInfo($limit, $page, $decision_id, $document_id, $notification_id, $user_identifier, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation getGetNotificationDetailsWithHttpInfo
     *
     * 
     *
     * @param string $limit Page size to be returned (required)
     * @param string $page Page number to be returned (required)
     * @param string $decision_id Decision ID to search for (optional)
     * @param string $document_id Control document ID to search for (optional)
     * @param string $notification_id Notification ID to search for (optional)
     * @param string $user_identifier User identifier to search for (optional)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\GetNotificationDetailsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGetNotificationDetailsWithHttpInfo($limit, $page, $decision_id = null, $document_id = null, $notification_id = null, $user_identifier = null, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $limit when calling getGetNotificationDetails');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling getGetNotificationDetails');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer/notifications";
        $resourcePath = "consumertransactioncontrols/customer/notifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($decision_id !== null) {
            $queryParams['decisionId'] = $this->apiClient->getSerializer()->toQueryValue($decision_id);
        }
        // query params
        if ($document_id !== null) {
            $queryParams['documentId'] = $this->apiClient->getSerializer()->toQueryValue($document_id);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($notification_id !== null) {
            $queryParams['notificationId'] = $this->apiClient->getSerializer()->toQueryValue($notification_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($user_identifier !== null) {
            $queryParams['userIdentifier'] = $this->apiClient->getSerializer()->toQueryValue($user_identifier);
        }
        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\GetNotificationDetailsgetResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer/notifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\GetNotificationDetailsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\GetNotificationDetailsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getcustomerAlertsProfile
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\CustomerAlertsProfilegetResponse
     */
    public function getcustomerAlertsProfile($user_identifier, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->getcustomerAlertsProfileWithHttpInfo($user_identifier, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation getcustomerAlertsProfileWithHttpInfo
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\CustomerAlertsProfilegetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getcustomerAlertsProfileWithHttpInfo($user_identifier, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'user_identifier' is set
        if ($user_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identifier when calling getcustomerAlertsProfile');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}";
        $resourcePath = "consumertransactioncontrols/customer/{userIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // path params
        if ($user_identifier !== null) {
            $path = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\CustomerAlertsProfilegetResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\CustomerAlertsProfilegetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\CustomerAlertsProfilegetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchcustomerAlertsProfile
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\CustomerAlertsProfilepatchPayload $customer_alerts_profilepatch_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\CustomerAlertsProfilepatchResponse
     */
    public function patchcustomerAlertsProfile($user_identifier, $customer_alerts_profilepatch_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->patchcustomerAlertsProfileWithHttpInfo($user_identifier, $customer_alerts_profilepatch_payload, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation patchcustomerAlertsProfileWithHttpInfo
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\CustomerAlertsProfilepatchPayload $customer_alerts_profilepatch_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\CustomerAlertsProfilepatchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchcustomerAlertsProfileWithHttpInfo($user_identifier, $customer_alerts_profilepatch_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'user_identifier' is set
        if ($user_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identifier when calling patchcustomerAlertsProfile');
        }
        // verify the required parameter 'customer_alerts_profilepatch_payload' is set
        if ($customer_alerts_profilepatch_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_alerts_profilepatch_payload when calling patchcustomerAlertsProfile');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}";
        $resourcePath = "consumertransactioncontrols/customer/{userIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // path params
        if ($user_identifier !== null) {
            $path = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($customer_alerts_profilepatch_payload)) {
            $_tempBody = $customer_alerts_profilepatch_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\CustomerAlertsProfilepatchResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\CustomerAlertsProfilepatchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\CustomerAlertsProfilepatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postGetNotificationsSummaryByPanOrToken
     *
     * 
     *
     * @param \pmc_105\model\GetNotificationsSummaryByPanOrTokenpostPayload $get_notifications_summary_by_pan_or_tokenpost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\GetNotificationsSummaryByPanOrTokenpostResponse
     */
    public function postGetNotificationsSummaryByPanOrToken($get_notifications_summary_by_pan_or_tokenpost_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->postGetNotificationsSummaryByPanOrTokenWithHttpInfo($get_notifications_summary_by_pan_or_tokenpost_payload, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation postGetNotificationsSummaryByPanOrTokenWithHttpInfo
     *
     * 
     *
     * @param \pmc_105\model\GetNotificationsSummaryByPanOrTokenpostPayload $get_notifications_summary_by_pan_or_tokenpost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\GetNotificationsSummaryByPanOrTokenpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGetNotificationsSummaryByPanOrTokenWithHttpInfo($get_notifications_summary_by_pan_or_tokenpost_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'get_notifications_summary_by_pan_or_tokenpost_payload' is set
        if ($get_notifications_summary_by_pan_or_tokenpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $get_notifications_summary_by_pan_or_tokenpost_payload when calling postGetNotificationsSummaryByPanOrToken');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer/notificationInquiry";
        $resourcePath = "consumertransactioncontrols/customer/notificationInquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($get_notifications_summary_by_pan_or_tokenpost_payload)) {
            $_tempBody = $get_notifications_summary_by_pan_or_tokenpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\GetNotificationsSummaryByPanOrTokenpostResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer/notificationInquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\GetNotificationsSummaryByPanOrTokenpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\GetNotificationsSummaryByPanOrTokenpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postcreateCustomerAlertProfile
     *
     * 
     *
     * @param \pmc_105\model\CreateCustomerAlertProfilepostPayload $create_customer_alert_profilepost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\CreateCustomerAlertProfilepostResponse
     */
    public function postcreateCustomerAlertProfile($create_customer_alert_profilepost_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->postcreateCustomerAlertProfileWithHttpInfo($create_customer_alert_profilepost_payload, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation postcreateCustomerAlertProfileWithHttpInfo
     *
     * 
     *
     * @param \pmc_105\model\CreateCustomerAlertProfilepostPayload $create_customer_alert_profilepost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\CreateCustomerAlertProfilepostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postcreateCustomerAlertProfileWithHttpInfo($create_customer_alert_profilepost_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'create_customer_alert_profilepost_payload' is set
        if ($create_customer_alert_profilepost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_customer_alert_profilepost_payload when calling postcreateCustomerAlertProfile');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer";
        $resourcePath = "consumertransactioncontrols/customer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_customer_alert_profilepost_payload)) {
            $_tempBody = $create_customer_alert_profilepost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\CreateCustomerAlertProfilepostResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\CreateCustomerAlertProfilepostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\CreateCustomerAlertProfilepostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmanageAlertsPreferences
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\ManageAlertsPreferencespostPayload $manage_alerts_preferencespost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\ManageAlertsPreferencespostResponse
     */
    public function postmanageAlertsPreferences($user_identifier, $manage_alerts_preferencespost_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->postmanageAlertsPreferencesWithHttpInfo($user_identifier, $manage_alerts_preferencespost_payload, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation postmanageAlertsPreferencesWithHttpInfo
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\ManageAlertsPreferencespostPayload $manage_alerts_preferencespost_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\ManageAlertsPreferencespostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmanageAlertsPreferencesWithHttpInfo($user_identifier, $manage_alerts_preferencespost_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'user_identifier' is set
        if ($user_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identifier when calling postmanageAlertsPreferences');
        }
        // verify the required parameter 'manage_alerts_preferencespost_payload' is set
        if ($manage_alerts_preferencespost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_alerts_preferencespost_payload when calling postmanageAlertsPreferences');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences";
        $resourcePath = "consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // path params
        if ($user_identifier !== null) {
            $path = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_alerts_preferencespost_payload)) {
            $_tempBody = $manage_alerts_preferencespost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\ManageAlertsPreferencespostResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\ManageAlertsPreferencespostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\ManageAlertsPreferencespostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putmanageAlertsPreferences
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\ManageAlertsPreferencesputPayload $manage_alerts_preferencesput_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return \pmc_105\model\ManageAlertsPreferencesputResponse
     */
    public function putmanageAlertsPreferences($user_identifier, $manage_alerts_preferencesput_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        list($response) = $this->putmanageAlertsPreferencesWithHttpInfo($user_identifier, $manage_alerts_preferencesput_payload, $app_group_id, $app_id, $sponsor_id);
        return $response;
    }

    /**
     * Operation putmanageAlertsPreferencesWithHttpInfo
     *
     * 
     *
     * @param string $user_identifier The user identifier of the customer profile document (required)
     * @param \pmc_105\model\ManageAlertsPreferencesputPayload $manage_alerts_preferencesput_payload request (required)
     * @param string $app_group_id Application Group ID assigned by VDP to uniquely identify a logical group of applications that manage transaction controls, if present appID should not be present (optional)
     * @param string $app_id Application ID assigned by VDP to uniquely identify an application that manages transaction controls, if present appGroupID should not be present (optional)
     * @param string $sponsor_id Card Program Sponsor ID as configured in VTC, and supplied by VDP (optional)
     * @throws \pmc_105\ApiException on non-2xx response
     * @return array of \pmc_105\model\ManageAlertsPreferencesputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putmanageAlertsPreferencesWithHttpInfo($user_identifier, $manage_alerts_preferencesput_payload, $app_group_id = null, $app_id = null, $sponsor_id = null)
    {
        // verify the required parameter 'user_identifier' is set
        if ($user_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_identifier when calling putmanageAlertsPreferences');
        }
        // verify the required parameter 'manage_alerts_preferencesput_payload' is set
        if ($manage_alerts_preferencesput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_alerts_preferencesput_payload when calling putmanageAlertsPreferences');
        }
        // parse inputs
        $path = "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences";
        $resourcePath = "consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($app_group_id !== null) {
            $headerParams['App-Group-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_group_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // path params
        if ($user_identifier !== null) {
            $path = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "userIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_alerts_preferencesput_payload)) {
            $_tempBody = $manage_alerts_preferencesput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_105\model\ManageAlertsPreferencesputResponse',
                '/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_105\model\ManageAlertsPreferencesputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_105\model\ManageAlertsPreferencesputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/