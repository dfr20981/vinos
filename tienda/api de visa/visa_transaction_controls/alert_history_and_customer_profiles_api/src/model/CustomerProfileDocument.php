<?php
/**
 * CustomerProfileDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  pmc_105
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alert History and Customer Profiles API
 *
 * The Alert History and Customer Profiles API is used to retrieve alert history information and for issuers using the VTC Alert Delivery Service to store cardholder contact information.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_105\model;

use \ArrayAccess;

/**
 * CustomerProfileDocument Class Doc Comment
 *
 * @category    Class
 * @description Created
 * @package     pmc_105
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerProfileDocument implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomerProfileDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_name' => 'string',
        'last_update_time_stamp' => 'string',
        'preferred_language' => 'string',
        'last_name' => 'string',
        'preferred_country_code' => 'string',
        'is_profile_active' => 'bool',
        'user_identifier' => 'string',
        'alerts_preferences' => '\pmc_105\model\AlertsPreferences',
        'default_alerts_preferences' => '\pmc_105\model\DefaultAlertsPreferences'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'last_update_time_stamp' => 'lastUpdateTimeStamp',
        'preferred_language' => 'preferredLanguage',
        'last_name' => 'lastName',
        'preferred_country_code' => 'preferredCountryCode',
        'is_profile_active' => 'isProfileActive',
        'user_identifier' => 'userIdentifier',
        'alerts_preferences' => 'alertsPreferences',
        'default_alerts_preferences' => 'defaultAlertsPreferences'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_update_time_stamp' => 'setLastUpdateTimeStamp',
        'preferred_language' => 'setPreferredLanguage',
        'last_name' => 'setLastName',
        'preferred_country_code' => 'setPreferredCountryCode',
        'is_profile_active' => 'setIsProfileActive',
        'user_identifier' => 'setUserIdentifier',
        'alerts_preferences' => 'setAlertsPreferences',
        'default_alerts_preferences' => 'setDefaultAlertsPreferences'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_update_time_stamp' => 'getLastUpdateTimeStamp',
        'preferred_language' => 'getPreferredLanguage',
        'last_name' => 'getLastName',
        'preferred_country_code' => 'getPreferredCountryCode',
        'is_profile_active' => 'getIsProfileActive',
        'user_identifier' => 'getUserIdentifier',
        'alerts_preferences' => 'getAlertsPreferences',
        'default_alerts_preferences' => 'getDefaultAlertsPreferences'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_update_time_stamp'] = isset($data['last_update_time_stamp']) ? $data['last_update_time_stamp'] : null;
        $this->container['preferred_language'] = isset($data['preferred_language']) ? $data['preferred_language'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['preferred_country_code'] = isset($data['preferred_country_code']) ? $data['preferred_country_code'] : null;
        $this->container['is_profile_active'] = isset($data['is_profile_active']) ? $data['is_profile_active'] : null;
        $this->container['user_identifier'] = isset($data['user_identifier']) ? $data['user_identifier'] : null;
        $this->container['alerts_preferences'] = isset($data['alerts_preferences']) ? $data['alerts_preferences'] : null;
        $this->container['default_alerts_preferences'] = isset($data['default_alerts_preferences']) ? $data['default_alerts_preferences'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['first_name'] === null) {
            $invalid_properties[] = "'first_name' can't be null";
        }
        if ($this->container['preferred_language'] === null) {
            $invalid_properties[] = "'preferred_language' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ($this->container['preferred_country_code'] === null) {
            $invalid_properties[] = "'preferred_country_code' can't be null";
        }
        if ($this->container['is_profile_active'] === null) {
            $invalid_properties[] = "'is_profile_active' can't be null";
        }
        if ($this->container['user_identifier'] === null) {
            $invalid_properties[] = "'user_identifier' can't be null";
        }
        if ($this->container['alerts_preferences'] === null) {
            $invalid_properties[] = "'alerts_preferences' can't be null";
        }
        if ($this->container['default_alerts_preferences'] === null) {
            $invalid_properties[] = "'default_alerts_preferences' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['first_name'] === null) {
            return false;
        }
        if ($this->container['preferred_language'] === null) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if ($this->container['preferred_country_code'] === null) {
            return false;
        }
        if ($this->container['is_profile_active'] === null) {
            return false;
        }
        if ($this->container['user_identifier'] === null) {
            return false;
        }
        if ($this->container['alerts_preferences'] === null) {
            return false;
        }
        if ($this->container['default_alerts_preferences'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name First name of the Card Holder, Maximum of 25 characters
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_update_time_stamp
     * @return string
     */
    public function getLastUpdateTimeStamp()
    {
        return $this->container['last_update_time_stamp'];
    }

    /**
     * Sets last_update_time_stamp
     * @param string $last_update_time_stamp Provides the timestamp, in GMT, of when this profile was last updated.
     * @return $this
     */
    public function setLastUpdateTimeStamp($last_update_time_stamp)
    {
        $this->container['last_update_time_stamp'] = $last_update_time_stamp;

        return $this;
    }

    /**
     * Gets preferred_language
     * @return string
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferred_language'];
    }

    /**
     * Sets preferred_language
     * @param string $preferred_language Preferred Language for Last mile Alerts , Currently supported languages are 'en-us' (English US) and 'es-us'(Spanish US)
     * @return $this
     */
    public function setPreferredLanguage($preferred_language)
    {
        $this->container['preferred_language'] = $preferred_language;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Last name of the Card Holder, Maximum of 25 characters
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets preferred_country_code
     * @return string
     */
    public function getPreferredCountryCode()
    {
        return $this->container['preferred_country_code'];
    }

    /**
     * Sets preferred_country_code
     * @param string $preferred_country_code Three letter ISO ALPHA-3 Code, currently only 'USA' supported
     * @return $this
     */
    public function setPreferredCountryCode($preferred_country_code)
    {
        $this->container['preferred_country_code'] = $preferred_country_code;

        return $this;
    }

    /**
     * Gets is_profile_active
     * @return bool
     */
    public function getIsProfileActive()
    {
        return $this->container['is_profile_active'];
    }

    /**
     * Sets is_profile_active
     * @param bool $is_profile_active This value determine if the given customer profile is Active or Inactive. If isProfileActive is set to false then last Mile alerts cannot be delivered for this Customer Profile.
     * @return $this
     */
    public function setIsProfileActive($is_profile_active)
    {
        $this->container['is_profile_active'] = $is_profile_active;

        return $this;
    }

    /**
     * Gets user_identifier
     * @return string
     */
    public function getUserIdentifier()
    {
        return $this->container['user_identifier'];
    }

    /**
     * Sets user_identifier
     * @param string $user_identifier The value provided by the Issuer to uniquely identify the Card Holder, Maximum of 72 characters
     * @return $this
     */
    public function setUserIdentifier($user_identifier)
    {
        $this->container['user_identifier'] = $user_identifier;

        return $this;
    }

    /**
     * Gets alerts_preferences
     * @return \pmc_105\model\AlertsPreferences
     */
    public function getAlertsPreferences()
    {
        return $this->container['alerts_preferences'];
    }

    /**
     * Sets alerts_preferences
     * @param \pmc_105\model\AlertsPreferences $alerts_preferences
     * @return $this
     */
    public function setAlertsPreferences($alerts_preferences)
    {
        $this->container['alerts_preferences'] = $alerts_preferences;

        return $this;
    }

    /**
     * Gets default_alerts_preferences
     * @return \pmc_105\model\DefaultAlertsPreferences
     */
    public function getDefaultAlertsPreferences()
    {
        return $this->container['default_alerts_preferences'];
    }

    /**
     * Sets default_alerts_preferences
     * @param \pmc_105\model\DefaultAlertsPreferences $default_alerts_preferences
     * @return $this
     */
    public function setDefaultAlertsPreferences($default_alerts_preferences)
    {
        $this->container['default_alerts_preferences'] = $default_alerts_preferences;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\pmc_105\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\pmc_105\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/