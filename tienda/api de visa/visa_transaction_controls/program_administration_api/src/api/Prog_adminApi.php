<?php
/**
 * Prog_adminApi
 * PHP version 5
 *
 * @category Class
 * @package  pmc_102
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Program Administration API
 *
 * The Transaction Controls Program Administration API enables Issuers to change program configurations for their sponsorID.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace pmc_102\api;

use \pmc_102\ApiClient;
use \pmc_102\ApiException;
use \pmc_102\Configuration;
use \pmc_102\ObjectSerializer;

/**
 * Prog_adminApi Class Doc Comment
 *
 * @category Class
 * @package  pmc_102
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Prog_adminApi
{
    /**
     * API Client
     *
     * @var \pmc_102\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \pmc_102\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\pmc_102\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \pmc_102\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \pmc_102\ApiClient $apiClient set the API client
     *
     * @return Prog_adminApi
     */
    public function setApiClient(\pmc_102\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deletemanageRuleConfiguration
     *
     * 
     *
     * @param \pmc_102\model\ManageRuleConfigurationdeletePayload $manage_rule_configurationdelete_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageRuleConfigurationdeleteResponse
     */
    public function deletemanageRuleConfiguration($manage_rule_configurationdelete_payload)
    {
        list($response) = $this->deletemanageRuleConfigurationWithHttpInfo($manage_rule_configurationdelete_payload);
        return $response;
    }

    /**
     * Operation deletemanageRuleConfigurationWithHttpInfo
     *
     * 
     *
     * @param \pmc_102\model\ManageRuleConfigurationdeletePayload $manage_rule_configurationdelete_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageRuleConfigurationdeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletemanageRuleConfigurationWithHttpInfo($manage_rule_configurationdelete_payload)
    {
        // verify the required parameter 'manage_rule_configurationdelete_payload' is set
        if ($manage_rule_configurationdelete_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_rule_configurationdelete_payload when calling deletemanageRuleConfiguration');
        }
        // parse inputs
        $path = "/vctc/programadmin//v1/sponsors/configuration";
        $resourcePath = "sponsors/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_rule_configurationdelete_payload)) {
            $_tempBody = $manage_rule_configurationdelete_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageRuleConfigurationdeleteResponse',
                '/vctc/programadmin//v1/sponsors/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageRuleConfigurationdeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageRuleConfigurationdeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletemanageTransactionControls
     *
     * 
     *
     * @param \pmc_102\model\ManageTransactionControlsdeletePayload $manage_transaction_controlsdelete_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageTransactionControlsdeleteResponse
     */
    public function deletemanageTransactionControls($manage_transaction_controlsdelete_payload)
    {
        list($response) = $this->deletemanageTransactionControlsWithHttpInfo($manage_transaction_controlsdelete_payload);
        return $response;
    }

    /**
     * Operation deletemanageTransactionControlsWithHttpInfo
     *
     * 
     *
     * @param \pmc_102\model\ManageTransactionControlsdeletePayload $manage_transaction_controlsdelete_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageTransactionControlsdeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletemanageTransactionControlsWithHttpInfo($manage_transaction_controlsdelete_payload)
    {
        // verify the required parameter 'manage_transaction_controlsdelete_payload' is set
        if ($manage_transaction_controlsdelete_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_transaction_controlsdelete_payload when calling deletemanageTransactionControls');
        }
        // parse inputs
        $path = "/vctc/programadmin//v1/configuration/transactiontypecontrols";
        $resourcePath = "configuration/transactiontypecontrols";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_transaction_controlsdelete_payload)) {
            $_tempBody = $manage_transaction_controlsdelete_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageTransactionControlsdeleteResponse',
                '/vctc/programadmin//v1/configuration/transactiontypecontrols'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageTransactionControlsdeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageTransactionControlsdeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getmanageRuleConfiguration
     *
     * 
     *
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageRuleConfigurationgetResponse
     */
    public function getmanageRuleConfiguration()
    {
        list($response) = $this->getmanageRuleConfigurationWithHttpInfo();
        return $response;
    }

    /**
     * Operation getmanageRuleConfigurationWithHttpInfo
     *
     * 
     *
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageRuleConfigurationgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getmanageRuleConfigurationWithHttpInfo()
    {
        // parse inputs
        $path = "/vctc/programadmin//v1/sponsors/configuration";
        $resourcePath = "sponsors/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageRuleConfigurationgetResponse',
                '/vctc/programadmin//v1/sponsors/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageRuleConfigurationgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageRuleConfigurationgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getmanageTransactionControls
     *
     * 
     *
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageTransactionControlsgetResponse
     */
    public function getmanageTransactionControls()
    {
        list($response) = $this->getmanageTransactionControlsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getmanageTransactionControlsWithHttpInfo
     *
     * 
     *
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageTransactionControlsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getmanageTransactionControlsWithHttpInfo()
    {
        // parse inputs
        $path = "/vctc/programadmin//v1/configuration/transactiontypecontrols";
        $resourcePath = "configuration/transactiontypecontrols";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageTransactionControlsgetResponse',
                '/vctc/programadmin//v1/configuration/transactiontypecontrols'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageTransactionControlsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageTransactionControlsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmanageRuleConfiguration
     *
     * 
     *
     * @param \pmc_102\model\ManageRuleConfigurationpostPayload $manage_rule_configurationpost_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageRuleConfigurationpostResponse
     */
    public function postmanageRuleConfiguration($manage_rule_configurationpost_payload)
    {
        list($response) = $this->postmanageRuleConfigurationWithHttpInfo($manage_rule_configurationpost_payload);
        return $response;
    }

    /**
     * Operation postmanageRuleConfigurationWithHttpInfo
     *
     * 
     *
     * @param \pmc_102\model\ManageRuleConfigurationpostPayload $manage_rule_configurationpost_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageRuleConfigurationpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmanageRuleConfigurationWithHttpInfo($manage_rule_configurationpost_payload)
    {
        // verify the required parameter 'manage_rule_configurationpost_payload' is set
        if ($manage_rule_configurationpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_rule_configurationpost_payload when calling postmanageRuleConfiguration');
        }
        // parse inputs
        $path = "/vctc/programadmin//v1/sponsors/configuration";
        $resourcePath = "sponsors/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_rule_configurationpost_payload)) {
            $_tempBody = $manage_rule_configurationpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageRuleConfigurationpostResponse',
                '/vctc/programadmin//v1/sponsors/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageRuleConfigurationpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageRuleConfigurationpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmanageTransactionControls
     *
     * 
     *
     * @param \pmc_102\model\ManageTransactionControlspostPayload $manage_transaction_controlspost_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageTransactionControlspostResponse
     */
    public function postmanageTransactionControls($manage_transaction_controlspost_payload)
    {
        list($response) = $this->postmanageTransactionControlsWithHttpInfo($manage_transaction_controlspost_payload);
        return $response;
    }

    /**
     * Operation postmanageTransactionControlsWithHttpInfo
     *
     * 
     *
     * @param \pmc_102\model\ManageTransactionControlspostPayload $manage_transaction_controlspost_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageTransactionControlspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmanageTransactionControlsWithHttpInfo($manage_transaction_controlspost_payload)
    {
        // verify the required parameter 'manage_transaction_controlspost_payload' is set
        if ($manage_transaction_controlspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_transaction_controlspost_payload when calling postmanageTransactionControls');
        }
        // parse inputs
        $path = "/vctc/programadmin//v1/configuration/transactiontypecontrols";
        $resourcePath = "configuration/transactiontypecontrols";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_transaction_controlspost_payload)) {
            $_tempBody = $manage_transaction_controlspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageTransactionControlspostResponse',
                '/vctc/programadmin//v1/configuration/transactiontypecontrols'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageTransactionControlspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageTransactionControlspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putmanageRuleConfiguration
     *
     * 
     *
     * @param \pmc_102\model\ManageRuleConfigurationputPayload $manage_rule_configurationput_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageRuleConfigurationputResponse
     */
    public function putmanageRuleConfiguration($manage_rule_configurationput_payload)
    {
        list($response) = $this->putmanageRuleConfigurationWithHttpInfo($manage_rule_configurationput_payload);
        return $response;
    }

    /**
     * Operation putmanageRuleConfigurationWithHttpInfo
     *
     * 
     *
     * @param \pmc_102\model\ManageRuleConfigurationputPayload $manage_rule_configurationput_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageRuleConfigurationputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putmanageRuleConfigurationWithHttpInfo($manage_rule_configurationput_payload)
    {
        // verify the required parameter 'manage_rule_configurationput_payload' is set
        if ($manage_rule_configurationput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_rule_configurationput_payload when calling putmanageRuleConfiguration');
        }
        // parse inputs
        $path = "/vctc/programadmin//v1/sponsors/configuration";
        $resourcePath = "sponsors/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_rule_configurationput_payload)) {
            $_tempBody = $manage_rule_configurationput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageRuleConfigurationputResponse',
                '/vctc/programadmin//v1/sponsors/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageRuleConfigurationputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageRuleConfigurationputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putmanageTransactionControls
     *
     * 
     *
     * @param \pmc_102\model\ManageTransactionControlsputPayload $manage_transaction_controlsput_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return \pmc_102\model\ManageTransactionControlsputResponse
     */
    public function putmanageTransactionControls($manage_transaction_controlsput_payload)
    {
        list($response) = $this->putmanageTransactionControlsWithHttpInfo($manage_transaction_controlsput_payload);
        return $response;
    }

    /**
     * Operation putmanageTransactionControlsWithHttpInfo
     *
     * 
     *
     * @param \pmc_102\model\ManageTransactionControlsputPayload $manage_transaction_controlsput_payload request (required)
     * @throws \pmc_102\ApiException on non-2xx response
     * @return array of \pmc_102\model\ManageTransactionControlsputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putmanageTransactionControlsWithHttpInfo($manage_transaction_controlsput_payload)
    {
        // verify the required parameter 'manage_transaction_controlsput_payload' is set
        if ($manage_transaction_controlsput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manage_transaction_controlsput_payload when calling putmanageTransactionControls');
        }
        // parse inputs
        $path = "/vctc/programadmin//v1/configuration/transactiontypecontrols";
        $resourcePath = "configuration/transactiontypecontrols";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($manage_transaction_controlsput_payload)) {
            $_tempBody = $manage_transaction_controlsput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\pmc_102\model\ManageTransactionControlsputResponse',
                '/vctc/programadmin//v1/configuration/transactiontypecontrols'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\pmc_102\model\ManageTransactionControlsputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\pmc_102\model\ManageTransactionControlsputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/