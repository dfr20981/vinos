<?php
/**
 * AdjustreversefundspostPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  ads_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Adjustment API
 *
 * The AdjustReverseFundsTransactions resource credits (pushes back) funds to the sender&apos;s Visa account by initiating a financial message called an Account Funding Transaction Reversal (AFTR) without the 24 hours limitation in the AFTR.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ads_100\model;

use \ArrayAccess;

/**
 * AdjustreversefundspostPayload Class Doc Comment
 *
 * @category    Class
 * @description Request body for creating adjustment of funds transfer
 * @package     ads_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AdjustreversefundspostPayload implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'adjustreversefundspostPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'local_transaction_date_time' => 'string',
        'business_application_id' => 'string',
        'merchant_category_code' => 'int',
        'sender_card_expiry_date' => 'string',
        'acquirer_country_code' => 'int',
        'transaction_identifier' => 'int',
        'amount' => 'double',
        'card_acceptor' => '\ads_100\model\CardAcceptor',
        'acquiring_bin' => 'int',
        'retrieval_reference_number' => 'string',
        'systems_trace_audit_number' => 'int',
        'sender_currency_code' => 'string',
        'sender_primary_account_number' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'local_transaction_date_time' => 'localTransactionDateTime',
        'business_application_id' => 'businessApplicationId',
        'merchant_category_code' => 'merchantCategoryCode',
        'sender_card_expiry_date' => 'senderCardExpiryDate',
        'acquirer_country_code' => 'acquirerCountryCode',
        'transaction_identifier' => 'transactionIdentifier',
        'amount' => 'amount',
        'card_acceptor' => 'cardAcceptor',
        'acquiring_bin' => 'acquiringBin',
        'retrieval_reference_number' => 'retrievalReferenceNumber',
        'systems_trace_audit_number' => 'systemsTraceAuditNumber',
        'sender_currency_code' => 'senderCurrencyCode',
        'sender_primary_account_number' => 'senderPrimaryAccountNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'local_transaction_date_time' => 'setLocalTransactionDateTime',
        'business_application_id' => 'setBusinessApplicationId',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'sender_card_expiry_date' => 'setSenderCardExpiryDate',
        'acquirer_country_code' => 'setAcquirerCountryCode',
        'transaction_identifier' => 'setTransactionIdentifier',
        'amount' => 'setAmount',
        'card_acceptor' => 'setCardAcceptor',
        'acquiring_bin' => 'setAcquiringBin',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber',
        'systems_trace_audit_number' => 'setSystemsTraceAuditNumber',
        'sender_currency_code' => 'setSenderCurrencyCode',
        'sender_primary_account_number' => 'setSenderPrimaryAccountNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'local_transaction_date_time' => 'getLocalTransactionDateTime',
        'business_application_id' => 'getBusinessApplicationId',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'sender_card_expiry_date' => 'getSenderCardExpiryDate',
        'acquirer_country_code' => 'getAcquirerCountryCode',
        'transaction_identifier' => 'getTransactionIdentifier',
        'amount' => 'getAmount',
        'card_acceptor' => 'getCardAcceptor',
        'acquiring_bin' => 'getAcquiringBin',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber',
        'systems_trace_audit_number' => 'getSystemsTraceAuditNumber',
        'sender_currency_code' => 'getSenderCurrencyCode',
        'sender_primary_account_number' => 'getSenderPrimaryAccountNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['local_transaction_date_time'] = isset($data['local_transaction_date_time']) ? $data['local_transaction_date_time'] : null;
        $this->container['business_application_id'] = isset($data['business_application_id']) ? $data['business_application_id'] : null;
        $this->container['merchant_category_code'] = isset($data['merchant_category_code']) ? $data['merchant_category_code'] : null;
        $this->container['sender_card_expiry_date'] = isset($data['sender_card_expiry_date']) ? $data['sender_card_expiry_date'] : null;
        $this->container['acquirer_country_code'] = isset($data['acquirer_country_code']) ? $data['acquirer_country_code'] : null;
        $this->container['transaction_identifier'] = isset($data['transaction_identifier']) ? $data['transaction_identifier'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['card_acceptor'] = isset($data['card_acceptor']) ? $data['card_acceptor'] : null;
        $this->container['acquiring_bin'] = isset($data['acquiring_bin']) ? $data['acquiring_bin'] : null;
        $this->container['retrieval_reference_number'] = isset($data['retrieval_reference_number']) ? $data['retrieval_reference_number'] : null;
        $this->container['systems_trace_audit_number'] = isset($data['systems_trace_audit_number']) ? $data['systems_trace_audit_number'] : null;
        $this->container['sender_currency_code'] = isset($data['sender_currency_code']) ? $data['sender_currency_code'] : null;
        $this->container['sender_primary_account_number'] = isset($data['sender_primary_account_number']) ? $data['sender_primary_account_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['local_transaction_date_time'] === null) {
            $invalid_properties[] = "'local_transaction_date_time' can't be null";
        }
        if ($this->container['business_application_id'] === null) {
            $invalid_properties[] = "'business_application_id' can't be null";
        }
        if ($this->container['merchant_category_code'] === null) {
            $invalid_properties[] = "'merchant_category_code' can't be null";
        }
        if ($this->container['acquirer_country_code'] === null) {
            $invalid_properties[] = "'acquirer_country_code' can't be null";
        }
        if ($this->container['transaction_identifier'] === null) {
            $invalid_properties[] = "'transaction_identifier' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if ($this->container['card_acceptor'] === null) {
            $invalid_properties[] = "'card_acceptor' can't be null";
        }
        if ($this->container['acquiring_bin'] === null) {
            $invalid_properties[] = "'acquiring_bin' can't be null";
        }
        if ($this->container['retrieval_reference_number'] === null) {
            $invalid_properties[] = "'retrieval_reference_number' can't be null";
        }
        if ($this->container['systems_trace_audit_number'] === null) {
            $invalid_properties[] = "'systems_trace_audit_number' can't be null";
        }
        if ($this->container['sender_currency_code'] === null) {
            $invalid_properties[] = "'sender_currency_code' can't be null";
        }
        if ($this->container['sender_primary_account_number'] === null) {
            $invalid_properties[] = "'sender_primary_account_number' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['local_transaction_date_time'] === null) {
            return false;
        }
        if ($this->container['business_application_id'] === null) {
            return false;
        }
        if ($this->container['merchant_category_code'] === null) {
            return false;
        }
        if ($this->container['acquirer_country_code'] === null) {
            return false;
        }
        if ($this->container['transaction_identifier'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['card_acceptor'] === null) {
            return false;
        }
        if ($this->container['acquiring_bin'] === null) {
            return false;
        }
        if ($this->container['retrieval_reference_number'] === null) {
            return false;
        }
        if ($this->container['systems_trace_audit_number'] === null) {
            return false;
        }
        if ($this->container['sender_currency_code'] === null) {
            return false;
        }
        if ($this->container['sender_primary_account_number'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets local_transaction_date_time
     * @return string
     */
    public function getLocalTransactionDateTime()
    {
        return $this->container['local_transaction_date_time'];
    }

    /**
     * Sets local_transaction_date_time
     * @param string $local_transaction_date_time 
     * @return $this
     */
    public function setLocalTransactionDateTime($local_transaction_date_time)
    {
        $this->container['local_transaction_date_time'] = $local_transaction_date_time;

        return $this;
    }

    /**
     * Gets business_application_id
     * @return string
     */
    public function getBusinessApplicationId()
    {
        return $this->container['business_application_id'];
    }

    /**
     * Sets business_application_id
     * @param string $business_application_id Identifies the Visa Direct use case required for processing. This must match the value provided in the request of PullFundsTransactions.
     * @return $this
     */
    public function setBusinessApplicationId($business_application_id)
    {
        $this->container['business_application_id'] = $business_application_id;

        return $this;
    }

    /**
     * Gets merchant_category_code
     * @return int
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     * @param int $merchant_category_code Contains a code describing the merchant's type of business product or service, also known as the merchant category code (MCC). These codes are based on the Merchant Classification Code Guideline available from the Bank Card Division of the ABA. Clients should send the same merchantCategoryCode that was submitted in the PullFundsTransactions
     * @return $this
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets sender_card_expiry_date
     * @return string
     */
    public function getSenderCardExpiryDate()
    {
        return $this->container['sender_card_expiry_date'];
    }

    /**
     * Sets sender_card_expiry_date
     * @param string $sender_card_expiry_date The expiration date for the sender's Visa account number in senderPrimaryAccountNumber.
     * @return $this
     */
    public function setSenderCardExpiryDate($sender_card_expiry_date)
    {
        $this->container['sender_card_expiry_date'] = $sender_card_expiry_date;

        return $this;
    }

    /**
     * Gets acquirer_country_code
     * @return int
     */
    public function getAcquirerCountryCode()
    {
        return $this->container['acquirer_country_code'];
    }

    /**
     * Sets acquirer_country_code
     * @param int $acquirer_country_code Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct program is registered.
     * @return $this
     */
    public function setAcquirerCountryCode($acquirer_country_code)
    {
        $this->container['acquirer_country_code'] = $acquirer_country_code;

        return $this;
    }

    /**
     * Gets transaction_identifier
     * @return int
     */
    public function getTransactionIdentifier()
    {
        return $this->container['transaction_identifier'];
    }

    /**
     * Sets transaction_identifier
     * @param int $transaction_identifier Clients should send the Visa transaction identifier returned in the response of PullFundsTransactions.
     * @return $this
     */
    public function setTransactionIdentifier($transaction_identifier)
    {
        $this->container['transaction_identifier'] = $transaction_identifier;

        return $this;
    }

    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param double $amount The amount of the transaction, inclusive of all fees assessed for the transaction, including currency conversion fees.
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets card_acceptor
     * @return \ads_100\model\CardAcceptor
     */
    public function getCardAcceptor()
    {
        return $this->container['card_acceptor'];
    }

    /**
     * Sets card_acceptor
     * @param \ads_100\model\CardAcceptor $card_acceptor
     * @return $this
     */
    public function setCardAcceptor($card_acceptor)
    {
        $this->container['card_acceptor'] = $card_acceptor;

        return $this;
    }

    /**
     * Gets acquiring_bin
     * @return int
     */
    public function getAcquiringBin()
    {
        return $this->container['acquiring_bin'];
    }

    /**
     * Sets acquiring_bin
     * @param int $acquiring_bin The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.
     * @return $this
     */
    public function setAcquiringBin($acquiring_bin)
    {
        $this->container['acquiring_bin'] = $acquiring_bin;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     * @return string
     */
    public function getRetrievalReferenceNumber()
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     * @param string $retrieval_reference_number This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set. Recommended format: ydddhhnnnnnn. The first four digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year), hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed, nnnnnn can be the systemsTraceAuditNumber or any 6 digit number. A unique value should be used for each API invocation.
     * @return $this
     */
    public function setRetrievalReferenceNumber($retrieval_reference_number)
    {
        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }

    /**
     * Gets systems_trace_audit_number
     * @return int
     */
    public function getSystemsTraceAuditNumber()
    {
        return $this->container['systems_trace_audit_number'];
    }

    /**
     * Sets systems_trace_audit_number
     * @param int $systems_trace_audit_number This field contains a number assigned by the merchant, service provider or acquirer that uniquely identifies a cardholder transaction and all message types (also known as system transactions) that comprise it per individual program rules. A unique value should be used for each API invocation.
     * @return $this
     */
    public function setSystemsTraceAuditNumber($systems_trace_audit_number)
    {
        $this->container['systems_trace_audit_number'] = $systems_trace_audit_number;

        return $this;
    }

    /**
     * Gets sender_currency_code
     * @return string
     */
    public function getSenderCurrencyCode()
    {
        return $this->container['sender_currency_code'];
    }

    /**
     * Sets sender_currency_code
     * @param string $sender_currency_code Use a 3-character alpha or numeric currency code for currency of the sender. This code identifies the currency of the transaction amount sent in the amount field.
     * @return $this
     */
    public function setSenderCurrencyCode($sender_currency_code)
    {
        $this->container['sender_currency_code'] = $sender_currency_code;

        return $this;
    }

    /**
     * Gets sender_primary_account_number
     * @return string
     */
    public function getSenderPrimaryAccountNumber()
    {
        return $this->container['sender_primary_account_number'];
    }

    /**
     * Sets sender_primary_account_number
     * @param string $sender_primary_account_number This field contains a number identifying the customer account which could be a PAN or a token.
     * @return $this
     */
    public function setSenderPrimaryAccountNumber($sender_primary_account_number)
    {
        $this->container['sender_primary_account_number'] = $sender_primary_account_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ads_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ads_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/