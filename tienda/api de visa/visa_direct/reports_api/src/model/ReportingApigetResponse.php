<?php
/**
 * ReportingApigetResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  rpt_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reports API
 *
 * The Reports API provides reporting capabilities such as transaction reconciliation data API. The data needed for reconciliation includes both push(OCT) and pull(AFT) transaction details and any exceptions such as chargebacks & reversals. This data allows you to reconcile the transactions sent by your systems with what was processed through VisaNet.<br> <br> <b>Note: This functionality is currently available for US transactions ONLY.</b>
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace rpt_100\model;

use \ArrayAccess;

/**
 * ReportingApigetResponse Class Doc Comment
 *
 * @category    Class
 * @description Transaction Data response
 * @package     rpt_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReportingApigetResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'reportingApigetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'settlement_date_time' => 'string',
        'approval_code' => 'string',
        'card_acceptor_id_code' => 'string',
        'fee_program_indicator' => 'string',
        'fee_program_desc' => 'string',
        'card_acceptor_name' => 'string',
        'transaction_currency_code' => 'string',
        'transaction_identifier' => 'string',
        'amount' => 'double',
        'acquiring_bin' => 'int',
        'retrieval_reference_number' => 'string',
        'systems_trace_audit_number' => 'int',
        'processing_date' => 'string',
        'account_number_masked' => 'string',
        'reason_code' => 'string',
        'transaction_date_time' => 'string',
        'transaction_state' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'settlement_date_time' => 'settlementDateTime',
        'approval_code' => 'approvalCode',
        'card_acceptor_id_code' => 'cardAcceptorIdCode',
        'fee_program_indicator' => 'feeProgramIndicator',
        'fee_program_desc' => 'feeProgramDesc',
        'card_acceptor_name' => 'cardAcceptorName',
        'transaction_currency_code' => 'transactionCurrencyCode',
        'transaction_identifier' => 'transactionIdentifier',
        'amount' => 'amount',
        'acquiring_bin' => 'acquiringBin',
        'retrieval_reference_number' => 'retrievalReferenceNumber',
        'systems_trace_audit_number' => 'systemsTraceAuditNumber',
        'processing_date' => 'processingDate',
        'account_number_masked' => 'accountNumberMasked',
        'reason_code' => 'reasonCode',
        'transaction_date_time' => 'transactionDateTime',
        'transaction_state' => 'transactionState'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'settlement_date_time' => 'setSettlementDateTime',
        'approval_code' => 'setApprovalCode',
        'card_acceptor_id_code' => 'setCardAcceptorIdCode',
        'fee_program_indicator' => 'setFeeProgramIndicator',
        'fee_program_desc' => 'setFeeProgramDesc',
        'card_acceptor_name' => 'setCardAcceptorName',
        'transaction_currency_code' => 'setTransactionCurrencyCode',
        'transaction_identifier' => 'setTransactionIdentifier',
        'amount' => 'setAmount',
        'acquiring_bin' => 'setAcquiringBin',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber',
        'systems_trace_audit_number' => 'setSystemsTraceAuditNumber',
        'processing_date' => 'setProcessingDate',
        'account_number_masked' => 'setAccountNumberMasked',
        'reason_code' => 'setReasonCode',
        'transaction_date_time' => 'setTransactionDateTime',
        'transaction_state' => 'setTransactionState'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'settlement_date_time' => 'getSettlementDateTime',
        'approval_code' => 'getApprovalCode',
        'card_acceptor_id_code' => 'getCardAcceptorIdCode',
        'fee_program_indicator' => 'getFeeProgramIndicator',
        'fee_program_desc' => 'getFeeProgramDesc',
        'card_acceptor_name' => 'getCardAcceptorName',
        'transaction_currency_code' => 'getTransactionCurrencyCode',
        'transaction_identifier' => 'getTransactionIdentifier',
        'amount' => 'getAmount',
        'acquiring_bin' => 'getAcquiringBin',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber',
        'systems_trace_audit_number' => 'getSystemsTraceAuditNumber',
        'processing_date' => 'getProcessingDate',
        'account_number_masked' => 'getAccountNumberMasked',
        'reason_code' => 'getReasonCode',
        'transaction_date_time' => 'getTransactionDateTime',
        'transaction_state' => 'getTransactionState'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['settlement_date_time'] = isset($data['settlement_date_time']) ? $data['settlement_date_time'] : null;
        $this->container['approval_code'] = isset($data['approval_code']) ? $data['approval_code'] : null;
        $this->container['card_acceptor_id_code'] = isset($data['card_acceptor_id_code']) ? $data['card_acceptor_id_code'] : null;
        $this->container['fee_program_indicator'] = isset($data['fee_program_indicator']) ? $data['fee_program_indicator'] : null;
        $this->container['fee_program_desc'] = isset($data['fee_program_desc']) ? $data['fee_program_desc'] : null;
        $this->container['card_acceptor_name'] = isset($data['card_acceptor_name']) ? $data['card_acceptor_name'] : null;
        $this->container['transaction_currency_code'] = isset($data['transaction_currency_code']) ? $data['transaction_currency_code'] : null;
        $this->container['transaction_identifier'] = isset($data['transaction_identifier']) ? $data['transaction_identifier'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['acquiring_bin'] = isset($data['acquiring_bin']) ? $data['acquiring_bin'] : null;
        $this->container['retrieval_reference_number'] = isset($data['retrieval_reference_number']) ? $data['retrieval_reference_number'] : null;
        $this->container['systems_trace_audit_number'] = isset($data['systems_trace_audit_number']) ? $data['systems_trace_audit_number'] : null;
        $this->container['processing_date'] = isset($data['processing_date']) ? $data['processing_date'] : null;
        $this->container['account_number_masked'] = isset($data['account_number_masked']) ? $data['account_number_masked'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['transaction_date_time'] = isset($data['transaction_date_time']) ? $data['transaction_date_time'] : null;
        $this->container['transaction_state'] = isset($data['transaction_state']) ? $data['transaction_state'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets settlement_date_time
     * @return string
     */
    public function getSettlementDateTime()
    {
        return $this->container['settlement_date_time'];
    }

    /**
     * Sets settlement_date_time
     * @param string $settlement_date_time The date & time of a transaction’s SMS settlement between the acquirer and issuer.  Example 2016-05-01:091234
     * @return $this
     */
    public function setSettlementDateTime($settlement_date_time)
    {
        $this->container['settlement_date_time'] = $settlement_date_time;

        return $this;
    }

    /**
     * Gets approval_code
     * @return string
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     * @param string $approval_code The authorization code from the issuer. A code provided by the issuer (or VIP STIP) when a transaction is approved, or a \"no reason to decline\" code is provided. Used to tie subsequent messages to the original transaction.
     * @return $this
     */
    public function setApprovalCode($approval_code)
    {
        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets card_acceptor_id_code
     * @return string
     */
    public function getCardAcceptorIdCode()
    {
        return $this->container['card_acceptor_id_code'];
    }

    /**
     * Sets card_acceptor_id_code
     * @param string $card_acceptor_id_code An acquirer-assigned (15 byte) code identifying the card acceptor for the transaction. The code can represent a merchant, a specific merchant location, or a specific merchant terminal.
     * @return $this
     */
    public function setCardAcceptorIdCode($card_acceptor_id_code)
    {
        $this->container['card_acceptor_id_code'] = $card_acceptor_id_code;

        return $this;
    }

    /**
     * Gets fee_program_indicator
     * @return string
     */
    public function getFeeProgramIndicator()
    {
        return $this->container['fee_program_indicator'];
    }

    /**
     * Sets fee_program_indicator
     * @param string $fee_program_indicator This field contains an interchange reimbursement fee program indicator (FPI), which is used in assessing the fee amount applied to financial transactions.
     * @return $this
     */
    public function setFeeProgramIndicator($fee_program_indicator)
    {
        $this->container['fee_program_indicator'] = $fee_program_indicator;

        return $this;
    }

    /**
     * Gets fee_program_desc
     * @return string
     */
    public function getFeeProgramDesc()
    {
        return $this->container['fee_program_desc'];
    }

    /**
     * Sets fee_program_desc
     * @param string $fee_program_desc Short text description of the Acquirer IRF (Interchange Reimbursement Fee) indicator. (Interchange fees are paid by issuers and acquirers to each other for transactions entered into interchange and their reversals).
     * @return $this
     */
    public function setFeeProgramDesc($fee_program_desc)
    {
        $this->container['fee_program_desc'] = $fee_program_desc;

        return $this;
    }

    /**
     * Gets card_acceptor_name
     * @return string
     */
    public function getCardAcceptorName()
    {
        return $this->container['card_acceptor_name'];
    }

    /**
     * Sets card_acceptor_name
     * @param string $card_acceptor_name The name of the merchant or ATM (id/location) where the transaction occurred. In VIP this is the first 25 bytes of ISO F43 Card Acceptor Name.
     * @return $this
     */
    public function setCardAcceptorName($card_acceptor_name)
    {
        $this->container['card_acceptor_name'] = $card_acceptor_name;

        return $this;
    }

    /**
     * Gets transaction_currency_code
     * @return string
     */
    public function getTransactionCurrencyCode()
    {
        return $this->container['transaction_currency_code'];
    }

    /**
     * Sets transaction_currency_code
     * @param string $transaction_currency_code Set internally during VisaNet processing, the ISO currency code which identifies the transaction currency code.
     * @return $this
     */
    public function setTransactionCurrencyCode($transaction_currency_code)
    {
        $this->container['transaction_currency_code'] = $transaction_currency_code;

        return $this;
    }

    /**
     * Gets transaction_identifier
     * @return string
     */
    public function getTransactionIdentifier()
    {
        return $this->container['transaction_identifier'];
    }

    /**
     * Sets transaction_identifier
     * @param string $transaction_identifier An identifier assigned by Visa to help uniquely identify a transaction and to link subsequent transactions, such as a reversal, to an original. The transaction identifier is returned to the acquirer in the authorization response and should be provided in subsequent clearing transactions. The components of the identifier include the transaction date, a sequence number for that date, a system identifier, and the time expressed in relative seconds.
     * @return $this
     */
    public function setTransactionIdentifier($transaction_identifier)
    {
        $this->container['transaction_identifier'] = $transaction_identifier;

        return $this;
    }

    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param double $amount This is the transaction amount expressed in U.S. Dollars. Derived internally.
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets acquiring_bin
     * @return int
     */
    public function getAcquiringBin()
    {
        return $this->container['acquiring_bin'];
    }

    /**
     * Sets acquiring_bin
     * @param int $acquiring_bin The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.
     * @return $this
     */
    public function setAcquiringBin($acquiring_bin)
    {
        $this->container['acquiring_bin'] = $acquiring_bin;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     * @return string
     */
    public function getRetrievalReferenceNumber()
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     * @param string $retrieval_reference_number A value used to tie together service calls related to a single financial transaction. Contains a number used with other key data elements to identify and track all messages related to a given cardholder transaction (referred to as a transaction set).
     * @return $this
     */
    public function setRetrievalReferenceNumber($retrieval_reference_number)
    {
        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }

    /**
     * Gets systems_trace_audit_number
     * @return int
     */
    public function getSystemsTraceAuditNumber()
    {
        return $this->container['systems_trace_audit_number'];
    }

    /**
     * Sets systems_trace_audit_number
     * @param int $systems_trace_audit_number An audit number assigned by the message originator - unique to the originator.  Also known as the Interface Trace Number in Base II and the System Trace Audit Number in VIP (ISO F11).  The trace number remains unchanged for all messages throughout the life of the transaction.  It is a key data element used to match a response to its request or to match a message to others for a given cardholder transaction set.
     * @return $this
     */
    public function setSystemsTraceAuditNumber($systems_trace_audit_number)
    {
        $this->container['systems_trace_audit_number'] = $systems_trace_audit_number;

        return $this;
    }

    /**
     * Gets processing_date
     * @return string
     */
    public function getProcessingDate()
    {
        return $this->container['processing_date'];
    }

    /**
     * Sets processing_date
     * @param string $processing_date The date on which VisaNet created the log (record).
     * @return $this
     */
    public function setProcessingDate($processing_date)
    {
        $this->container['processing_date'] = $processing_date;

        return $this;
    }

    /**
     * Gets account_number_masked
     * @return string
     */
    public function getAccountNumberMasked()
    {
        return $this->container['account_number_masked'];
    }

    /**
     * Sets account_number_masked
     * @param string $account_number_masked Contains a masked number identifying an account or customer relationship at a financial institution. Populated from the primary account number (PAN) contained in the original authorization request.  The account number is typically 16 digits, but can vary depending on the source.  The six digits after the initial 6 digit BIN number of a 16 digit PAN number are replaced by 'xxxxxx' for security reasons.  This field is left justified with trailing blanks.  (Note: Trailing zeros indicate the Account Number Extension was appended, which is zero-filled if not used.  Insignificant trailing zeros are not part of the account number.)
     * @return $this
     */
    public function setAccountNumberMasked($account_number_masked)
    {
        $this->container['account_number_masked'] = $account_number_masked;

        return $this;
    }

    /**
     * Gets reason_code
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     * @param string $reason_code The reason code description is derived from, Field 63.3 of VIP/SMS transactions. Several different kinds of codes may appear in this field, including Fee Collection Reason Codes, Advice Reason Codes, Adjustment Reason Codes, Service Confirmation/Change Notification Reason Codes, Chargeback Reason Codes, etc.<br>Valid values include*:<br>(*Not a complete list)<br>0053 - Chargeback - not as described / defective<br>0083 - Fraud - card not present<br>2105 - Acquirer advice - Clearing of an authorized transaction<br>2121 - VSDC transaction - Offline approval<br>2501 - Reversal - Transaction voided by customer
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets transaction_date_time
     * @return string
     */
    public function getTransactionDateTime()
    {
        return $this->container['transaction_date_time'];
    }

    /**
     * Sets transaction_date_time
     * @param string $transaction_date_time The date & time the transaction was submitted to VisaNet. Example 2016-04-30:162345
     * @return $this
     */
    public function setTransactionDateTime($transaction_date_time)
    {
        $this->container['transaction_date_time'] = $transaction_date_time;

        return $this;
    }

    /**
     * Gets transaction_state
     * @return string
     */
    public function getTransactionState()
    {
        return $this->container['transaction_state'];
    }

    /**
     * Sets transaction_state
     * @param string $transaction_state The transaction code (TC) description identifies the type of transaction being processed by BASE II. <br>Valid Values include*:<br>04 - Reclassification Advice<br>05 - Original Sales Draft or Representment<br>06 - Original Credit Voucher or Representment<br>07 - Original Cash Disbursement or Representment<br>10 - Clearing Fee Collection<br>15 - Sales Draft Chargeback<br>25 - Sales Draft Reversal<br>40 - Fraud Advice<br>*Examples provided to clarify definition. May not be a complete list.
     * @return $this
     */
    public function setTransactionState($transaction_state)
    {
        $this->container['transaction_state'] = $transaction_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\rpt_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\rpt_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/