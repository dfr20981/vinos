<?php
/**
 * Funds_transferApi
 * PHP version 5
 *
 * @category Class
 * @package  ft_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Funds Transfer API
 *
 * The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ft_100\api;

use \ft_100\ApiClient;
use \ft_100\ApiException;
use \ft_100\Configuration;
use \ft_100\ObjectSerializer;

/**
 * Funds_transferApi Class Doc Comment
 *
 * @category Class
 * @package  ft_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Funds_transferApi
{
    /**
     * API Client
     *
     * @var \ft_100\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ft_100\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ft_100\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ft_100\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ft_100\ApiClient $apiClient set the API client
     *
     * @return Funds_transferApi
     */
    public function setApiClient(\ft_100\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getmultipullfundstransactions
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\MultipullfundstransactionsgetResponse
     */
    public function getmultipullfundstransactions($status_identifier)
    {
        list($response) = $this->getmultipullfundstransactionsWithHttpInfo($status_identifier);
        return $response;
    }

    /**
     * Operation getmultipullfundstransactionsWithHttpInfo
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\MultipullfundstransactionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getmultipullfundstransactionsWithHttpInfo($status_identifier)
    {
        // verify the required parameter 'status_identifier' is set
        if ($status_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_identifier when calling getmultipullfundstransactions');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/multipullfundstransactions/{statusIdentifier}";
        $resourcePath = "multipullfundstransactions/{statusIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status_identifier !== null) {
            $path = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\MultipullfundstransactionsgetResponse',
                '/visadirect/fundstransfer/v1/multipullfundstransactions/{statusIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\MultipullfundstransactionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\MultipullfundstransactionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getmultipushfundstransactions
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\MultipushfundstransactionsgetResponse
     */
    public function getmultipushfundstransactions($status_identifier)
    {
        list($response) = $this->getmultipushfundstransactionsWithHttpInfo($status_identifier);
        return $response;
    }

    /**
     * Operation getmultipushfundstransactionsWithHttpInfo
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\MultipushfundstransactionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getmultipushfundstransactionsWithHttpInfo($status_identifier)
    {
        // verify the required parameter 'status_identifier' is set
        if ($status_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_identifier when calling getmultipushfundstransactions');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/multipushfundstransactions/{statusIdentifier}";
        $resourcePath = "multipushfundstransactions/{statusIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status_identifier !== null) {
            $path = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\MultipushfundstransactionsgetResponse',
                '/visadirect/fundstransfer/v1/multipushfundstransactions/{statusIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\MultipushfundstransactionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\MultipushfundstransactionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getmultireversefundstransactions
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\MultireversefundstransactionsgetResponse
     */
    public function getmultireversefundstransactions($status_identifier)
    {
        list($response) = $this->getmultireversefundstransactionsWithHttpInfo($status_identifier);
        return $response;
    }

    /**
     * Operation getmultireversefundstransactionsWithHttpInfo
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\MultireversefundstransactionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getmultireversefundstransactionsWithHttpInfo($status_identifier)
    {
        // verify the required parameter 'status_identifier' is set
        if ($status_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_identifier when calling getmultireversefundstransactions');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/multireversefundstransactions/{statusIdentifier}";
        $resourcePath = "multireversefundstransactions/{statusIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status_identifier !== null) {
            $path = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\MultireversefundstransactionsgetResponse',
                '/visadirect/fundstransfer/v1/multireversefundstransactions/{statusIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\MultireversefundstransactionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\MultireversefundstransactionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getpullfundstransactions
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\PullfundstransactionsgetResponse
     */
    public function getpullfundstransactions($status_identifier)
    {
        list($response) = $this->getpullfundstransactionsWithHttpInfo($status_identifier);
        return $response;
    }

    /**
     * Operation getpullfundstransactionsWithHttpInfo
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\PullfundstransactionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getpullfundstransactionsWithHttpInfo($status_identifier)
    {
        // verify the required parameter 'status_identifier' is set
        if ($status_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_identifier when calling getpullfundstransactions');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/pullfundstransactions/{statusIdentifier}";
        $resourcePath = "pullfundstransactions/{statusIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status_identifier !== null) {
            $path = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\PullfundstransactionsgetResponse',
                '/visadirect/fundstransfer/v1/pullfundstransactions/{statusIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\PullfundstransactionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\PullfundstransactionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getpushfundstransactions
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\PushfundstransactionsgetResponse
     */
    public function getpushfundstransactions($status_identifier)
    {
        list($response) = $this->getpushfundstransactionsWithHttpInfo($status_identifier);
        return $response;
    }

    /**
     * Operation getpushfundstransactionsWithHttpInfo
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\PushfundstransactionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getpushfundstransactionsWithHttpInfo($status_identifier)
    {
        // verify the required parameter 'status_identifier' is set
        if ($status_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_identifier when calling getpushfundstransactions');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/pushfundstransactions/{statusIdentifier}";
        $resourcePath = "pushfundstransactions/{statusIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status_identifier !== null) {
            $path = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\PushfundstransactionsgetResponse',
                '/visadirect/fundstransfer/v1/pushfundstransactions/{statusIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\PushfundstransactionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\PushfundstransactionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getreversefundstransactions
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\ReversefundstransactionsgetResponse
     */
    public function getreversefundstransactions($status_identifier)
    {
        list($response) = $this->getreversefundstransactionsWithHttpInfo($status_identifier);
        return $response;
    }

    /**
     * Operation getreversefundstransactionsWithHttpInfo
     *
     * 
     *
     * @param string $status_identifier Status Identifier (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\ReversefundstransactionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getreversefundstransactionsWithHttpInfo($status_identifier)
    {
        // verify the required parameter 'status_identifier' is set
        if ($status_identifier === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_identifier when calling getreversefundstransactions');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/reversefundstransactions/{statusIdentifier}";
        $resourcePath = "reversefundstransactions/{statusIdentifier}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($status_identifier !== null) {
            $path = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $path
            );
            $resourcePath = str_replace(
                "{" . "statusIdentifier" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_identifier),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\ReversefundstransactionsgetResponse',
                '/visadirect/fundstransfer/v1/reversefundstransactions/{statusIdentifier}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\ReversefundstransactionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\ReversefundstransactionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmultipullfunds
     *
     * 
     *
     * @param string $x_client_transaction_id A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
     * @param \ft_100\model\MultipullfundspostPayload $multipullfundspost_payload Request body for creating in multi pull funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\MultipullfundspostResponse
     */
    public function postmultipullfunds($x_client_transaction_id, $multipullfundspost_payload)
    {
        list($response) = $this->postmultipullfundsWithHttpInfo($x_client_transaction_id, $multipullfundspost_payload);
        return $response;
    }

    /**
     * Operation postmultipullfundsWithHttpInfo
     *
     * 
     *
     * @param string $x_client_transaction_id A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
     * @param \ft_100\model\MultipullfundspostPayload $multipullfundspost_payload Request body for creating in multi pull funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\MultipullfundspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmultipullfundsWithHttpInfo($x_client_transaction_id, $multipullfundspost_payload)
    {
        // verify the required parameter 'x_client_transaction_id' is set
        if ($x_client_transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_client_transaction_id when calling postmultipullfunds');
        }
        // verify the required parameter 'multipullfundspost_payload' is set
        if ($multipullfundspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $multipullfundspost_payload when calling postmultipullfunds');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/multipullfundstransactions";
        $resourcePath = "multipullfundstransactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_client_transaction_id !== null) {
            $headerParams['X-Client-Transaction-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_client_transaction_id);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($multipullfundspost_payload)) {
            $_tempBody = $multipullfundspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\MultipullfundspostResponse',
                '/visadirect/fundstransfer/v1/multipullfundstransactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\MultipullfundspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\MultipullfundspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmultipushfunds
     *
     * 
     *
     * @param string $x_client_transaction_id A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
     * @param \ft_100\model\MultipushfundspostPayload $multipushfundspost_payload Request body for creating in multi push funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\MultipushfundspostResponse
     */
    public function postmultipushfunds($x_client_transaction_id, $multipushfundspost_payload)
    {
        list($response) = $this->postmultipushfundsWithHttpInfo($x_client_transaction_id, $multipushfundspost_payload);
        return $response;
    }

    /**
     * Operation postmultipushfundsWithHttpInfo
     *
     * 
     *
     * @param string $x_client_transaction_id A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
     * @param \ft_100\model\MultipushfundspostPayload $multipushfundspost_payload Request body for creating in multi push funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\MultipushfundspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmultipushfundsWithHttpInfo($x_client_transaction_id, $multipushfundspost_payload)
    {
        // verify the required parameter 'x_client_transaction_id' is set
        if ($x_client_transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_client_transaction_id when calling postmultipushfunds');
        }
        // verify the required parameter 'multipushfundspost_payload' is set
        if ($multipushfundspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $multipushfundspost_payload when calling postmultipushfunds');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/multipushfundstransactions";
        $resourcePath = "multipushfundstransactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_client_transaction_id !== null) {
            $headerParams['X-Client-Transaction-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_client_transaction_id);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($multipushfundspost_payload)) {
            $_tempBody = $multipushfundspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\MultipushfundspostResponse',
                '/visadirect/fundstransfer/v1/multipushfundstransactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\MultipushfundspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\MultipushfundspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postmultireversefunds
     *
     * 
     *
     * @param \ft_100\model\MultireversefundspostPayload $multireversefundspost_payload Request body for creating in multi reverse funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\MultireversefundspostResponse
     */
    public function postmultireversefunds($multireversefundspost_payload)
    {
        list($response) = $this->postmultireversefundsWithHttpInfo($multireversefundspost_payload);
        return $response;
    }

    /**
     * Operation postmultireversefundsWithHttpInfo
     *
     * 
     *
     * @param \ft_100\model\MultireversefundspostPayload $multireversefundspost_payload Request body for creating in multi reverse funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\MultireversefundspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postmultireversefundsWithHttpInfo($multireversefundspost_payload)
    {
        // verify the required parameter 'multireversefundspost_payload' is set
        if ($multireversefundspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $multireversefundspost_payload when calling postmultireversefunds');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/multireversefundstransactions";
        $resourcePath = "multireversefundstransactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($multireversefundspost_payload)) {
            $_tempBody = $multireversefundspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\MultireversefundspostResponse',
                '/visadirect/fundstransfer/v1/multireversefundstransactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\MultireversefundspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\MultireversefundspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postpullfunds
     *
     * 
     *
     * @param \ft_100\model\PullfundspostPayload $pullfundspost_payload Request body for creating in pull funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\PullfundspostResponse
     */
    public function postpullfunds($pullfundspost_payload)
    {
        list($response) = $this->postpullfundsWithHttpInfo($pullfundspost_payload);
        return $response;
    }

    /**
     * Operation postpullfundsWithHttpInfo
     *
     * 
     *
     * @param \ft_100\model\PullfundspostPayload $pullfundspost_payload Request body for creating in pull funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\PullfundspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postpullfundsWithHttpInfo($pullfundspost_payload)
    {
        // verify the required parameter 'pullfundspost_payload' is set
        if ($pullfundspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pullfundspost_payload when calling postpullfunds');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/pullfundstransactions";
        $resourcePath = "pullfundstransactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pullfundspost_payload)) {
            $_tempBody = $pullfundspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\PullfundspostResponse',
                '/visadirect/fundstransfer/v1/pullfundstransactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\PullfundspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\PullfundspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postpushfunds
     *
     * 
     *
     * @param \ft_100\model\PushfundspostPayload $pushfundspost_payload Request body for creating in push funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\PushfundspostResponse
     */
    public function postpushfunds($pushfundspost_payload)
    {
        list($response) = $this->postpushfundsWithHttpInfo($pushfundspost_payload);
        return $response;
    }

    /**
     * Operation postpushfundsWithHttpInfo
     *
     * 
     *
     * @param \ft_100\model\PushfundspostPayload $pushfundspost_payload Request body for creating in push funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\PushfundspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postpushfundsWithHttpInfo($pushfundspost_payload)
    {
        // verify the required parameter 'pushfundspost_payload' is set
        if ($pushfundspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pushfundspost_payload when calling postpushfunds');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/pushfundstransactions";
        $resourcePath = "pushfundstransactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($pushfundspost_payload)) {
            $_tempBody = $pushfundspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\PushfundspostResponse',
                '/visadirect/fundstransfer/v1/pushfundstransactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\PushfundspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\PushfundspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postreversefunds
     *
     * 
     *
     * @param \ft_100\model\ReversefundspostPayload $reversefundspost_payload Request body for creating in reverse funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return \ft_100\model\ReversefundspostResponse
     */
    public function postreversefunds($reversefundspost_payload)
    {
        list($response) = $this->postreversefundsWithHttpInfo($reversefundspost_payload);
        return $response;
    }

    /**
     * Operation postreversefundsWithHttpInfo
     *
     * 
     *
     * @param \ft_100\model\ReversefundspostPayload $reversefundspost_payload Request body for creating in reverse funds transfer (required)
     * @throws \ft_100\ApiException on non-2xx response
     * @return array of \ft_100\model\ReversefundspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postreversefundsWithHttpInfo($reversefundspost_payload)
    {
        // verify the required parameter 'reversefundspost_payload' is set
        if ($reversefundspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reversefundspost_payload when calling postreversefunds');
        }
        // parse inputs
        $path = "/visadirect/fundstransfer/v1/reversefundstransactions";
        $resourcePath = "reversefundstransactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($reversefundspost_payload)) {
            $_tempBody = $reversefundspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ft_100\model\ReversefundspostResponse',
                '/visadirect/fundstransfer/v1/reversefundstransactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\ft_100\model\ReversefundspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ft_100\model\ReversefundspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/