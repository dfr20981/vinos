<?php
/**
 * Funds_transferApiTest
 * PHP version 5
 *
 * @category Class
 * @package  ft_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Funds Transfer API
 *
 * The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace ft_100\apitest;

require_once (__DIR__.'/../../globalConfig.php');

use \globalConfig\GlobalConfig;

use \ft_100\Configuration;
use \ft_100\api\Funds_transferApi;

/**
 * Funds_transferApiTest Class Doc Comment
 *
 * @category Class
 * @package  ft_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Funds_transferApiTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

        $gc=new GlobalConfig();
        $config = Configuration::getDefaultConfiguration();

        // Configure HTTP basic authorization
        $config->setUsername($gc->getUserName());
        $config->setPassword($gc->getPassword());
        $config->setCertificatePath($gc->getCertificatePath());
        $config->setPrivateKey($gc->getPrivateKeyPath());
        $config->setCaCertPath($gc->getCaCertPath());

        // Configure API key authorization:
        $config->setSharedSecret($gc->getSharedSecret());
        $config->setApiKey("apikey", $gc->getApiKey());

        // Configure proxy settings
        $config->setCurlProxyHost($gc->getProxyHost());
        $config->setCurlProxyPort($gc->getProxyPort());
        $config->setCurlProxyUser($gc->getProxyUser());
        $config->setCurlProxyPassword($gc->getProxyPassword());

        echo '\n.................Testing Funds_transferApi...........................\n';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }
    public function transformPayload($oldPayload){
        $payload = $this->editLocalTime($oldPayload);
        $payload = $this->addRandom($payload);
        $payload= json_decode($payload,true);
        return $payload;
    }
    public function editLocalTime($oldPayload){

        date_default_timezone_set("America/Los_Angeles");
        $timestamp = date("Y-m-d\TH:i:s");
        $pattern = '/"localTransactionDateTime":".{19}"/i';
        $replacement = '"localTransactionDateTime": "'.$timestamp.'"';
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $timestamp = date("mdHis");
        $pattern = '/"dateTimeLocal":".{10}"/i';
        $replacement = '"dateTimeLocal": "'.$timestamp.'"';
        return preg_replace($pattern, $replacement, $oldPayload);

    }
    public function addRandom($oldPayload){
        $pattern = '/random/i';
        $replacement = $this->generateRandomString(5);
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $pattern = '/random_integer/i';
        return preg_replace($pattern, '1', $oldPayload);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }
    function generateRandomString($length = 10)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     * Test case for getmultipullfundstransactions
     *
     * .
     *
     */
    public function testGetmultipullfundstransactions()
    {
        echo "\nMaking a call to Getmultipullfundstransactions()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Getmultipullfundstransactions($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getmultipushfundstransactions
     *
     * .
     *
     */
    public function testGetmultipushfundstransactions()
    {
        echo "\nMaking a call to Getmultipushfundstransactions()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Getmultipushfundstransactions($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getmultireversefundstransactions
     *
     * .
     *
     */
    public function testGetmultireversefundstransactions()
    {
        echo "\nMaking a call to Getmultireversefundstransactions()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Getmultireversefundstransactions($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getpullfundstransactions
     *
     * .
     *
     */
    public function testGetpullfundstransactions()
    {
        echo "\nMaking a call to Getpullfundstransactions()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Getpullfundstransactions($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getpushfundstransactions
     *
     * .
     *
     */
    public function testGetpushfundstransactions()
    {
        echo "\nMaking a call to Getpushfundstransactions()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Getpushfundstransactions($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getreversefundstransactions
     *
     * .
     *
     */
    public function testGetreversefundstransactions()
    {
        echo "\nMaking a call to Getreversefundstransactions()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Getreversefundstransactions($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postmultipullfunds
     *
     * .
     *
     */
    public function testPostmultipullfunds()
    {
        echo "\nMaking a call to Postmultipullfunds()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Postmultipullfunds($this->addRandom('random'), $this->transformPayload('{"localTransactionDateTime":"2016-11-17T00:24:00","businessApplicationId":"AA","merchantCategoryCode":"6012","acquirerCountryCode":"608","request":[{"localTransactionDateTime":"2016-11-17T00:24:00","senderCardExpiryDate":"2020-12","amount":"100.00","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","cavv":"0700020718799100000002980179911000000000","senderPrimaryAccountNumber":"4895140000066666"},{"localTransactionDateTime":"2016-11-17T00:24:00","senderCardExpiryDate":"2020-12","amount":"100.00","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","cavv":"0700020718799100000002980179911000000000","senderPrimaryAccountNumber":"4895140000066666"}],"acquiringBin":"408999"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postmultipushfunds
     *
     * .
     *
     */
    public function testPostmultipushfunds()
    {
        echo "\nMaking a call to Postmultipushfunds()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Postmultipushfunds($this->addRandom('random'), $this->transformPayload('{"localTransactionDateTime":"2016-11-17T18:24:24","businessApplicationId":"AA","merchantCategoryCode":"6012","acquirerCountryCode":"840","request":[{"senderCity":"My City","senderAccountNumber":"4005520000011126","senderStateCode":"CA","feeProgramIndicator":"123","localTransactionDateTime":"2016-11-17T18:24:24","recipientPrimaryAccountNumber":"4957030420210454","transactionCurrencyCode":"USD","transactionIdentifier":"234234234234234","sourceOfFundsCode":"01","senderReference":"","senderAddress":"My Address","retrievalReferenceNumber":"401010101011","systemsTraceAuditNumber":"101011","senderCountryCode":"USA","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"recipientName":"Akhila","amount":"100.00","senderName":"Mr Name"},{"senderCity":"My City","senderAccountNumber":"4840920103511221","senderStateCode":"CA","feeProgramIndicator":"123","localTransactionDateTime":"2016-11-17T18:24:24","recipientPrimaryAccountNumber":"4957030420210454","transactionCurrencyCode":"USD","transactionIdentifier":"234234234234234","sourceOfFundsCode":"01","senderReference":"","senderAddress":"My Address","retrievalReferenceNumber":"401010101012","systemsTraceAuditNumber":"101012","senderCountryCode":"USA","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"recipientName":"Akhila","amount":"100.00","senderName":"Mr Name"}],"acquiringBin":"408999"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postmultireversefunds
     *
     * .
     *
     */
    public function testPostmultireversefunds()
    {
        echo "\nMaking a call to Postmultireversefunds()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Postmultireversefunds($this->transformPayload('{"localTransactionDateTime":"2016-11-17T19:24:44","acquiringBin":"408999","businessApplicationId":"AA","acquirerCountryCode":"840","request":[{"localTransactionDateTime":"2016-11-17T19:24:44","senderCardExpiryDate":"2020-12","transactionIdentifier":"101010101010","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"originalDataElements":{"acquiringBin":"408999","systemsTraceAuditNumber":"228112","approvalCode":"1ABCDE","transmissionDateTime":"2016-11-17T19:24:44"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","amount":"100.00","senderPrimaryAccountNumber":"4485810000000131"},{"localTransactionDateTime":"2016-11-17T19:24:44","senderCardExpiryDate":"2020-12","transactionIdentifier":"101010101010","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"originalDataElements":{"acquiringBin":"408999","systemsTraceAuditNumber":"228112","approvalCode":"1ABCDE","transmissionDateTime":"2016-11-17T19:24:44"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","amount":"100.00","senderPrimaryAccountNumber":"4485810000000131"}]}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postpullfunds
     *
     * .
     *
     */
    public function testPostpullfunds()
    {
        echo "\nMaking a call to Postpullfunds()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Postpullfunds($this->transformPayload('{"localTransactionDateTime":"2016-11-16T23:33:06","businessApplicationId":"AA","cpsAuthorizationCharacteristicsIndicator":"Y","senderCardExpiryDate":"2015-10","amount":"124.02","acquirerCountryCode":"840","retrievalReferenceNumber":"330000550000","cardAcceptor":{"idCode":"ABCD1234ABCD123","address":{"county":"081","country":"USA","state":"CA","zipCode":"94404"},"terminalId":"ABCD1234","name":"Visa Inc. USA-Foster City"},"acquiringBin":"408999","systemsTraceAuditNumber":"451001","nationalReimbursementFee":"11.22","senderCurrencyCode":"USD","cavv":"0700100038238906000013405823891061668252","foreignExchangeFeeTransaction":"11.99","addressVerificationData":{"postalCode":"12345","street":"XYZ St"},"senderPrimaryAccountNumber":"4895142232120006","surcharge":"11.99"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postpushfunds
     *
     * .
     *
     */
    public function testPostpushfunds()
    {
        echo "\nMaking a call to Postpushfunds()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Postpushfunds($this->transformPayload('{"businessApplicationId":"AA","transactionIdentifier":"381228649430015","cardAcceptor":{"idCode":"CA-IDCode-77765","address":{"county":"San Mateo","country":"USA","state":"CA","zipCode":"94404"},"terminalId":"TID-9999","name":"Visa Inc. USA-Foster City"},"senderAddress":"901 Metro Center Blvd","sourceOfFundsCode":"05","recipientName":"rohan","senderName":"Mohammed Qasim","senderStateCode":"CA","merchantCategoryCode":"6012","acquirerCountryCode":"840","senderReference":"","recipientPrimaryAccountNumber":"4957030420210496","retrievalReferenceNumber":"412770451018","senderAccountNumber":"4653459515756154","transactionCurrencyCode":"USD","acquiringBin":"408999","pointOfServiceData":{"posConditionCode":"00","panEntryMode":"90","motoECIIndicator":"0"},"senderCity":"Foster City","localTransactionDateTime":"2016-11-17T00:39:13","amount":"124.05","systemsTraceAuditNumber":"451018","senderCountryCode":"124"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postreversefunds
     *
     * .
     *
     */
    public function testPostreversefunds()
    {
        echo "\nMaking a call to Postreversefunds()\n";

        $api_instance = new Funds_transferApi;
        $result = $api_instance->Postreversefunds($this->transformPayload('{"localTransactionDateTime":"2016-11-17T19:04:06","businessApplicationId":"AA","senderCardExpiryDate":"2015-10","transactionIdentifier":"381228649430011","acquirerCountryCode":"608","retrievalReferenceNumber":"330000550000","cardAcceptor":{"idCode":"VMT200911026070","address":{"county":"San Mateo","country":"USA","state":"CA","zipCode":"94404"},"terminalId":"365539","name":"Visa Inc. USA-Foster City"},"originalDataElements":{"acquiringBin":"408999","systemsTraceAuditNumber":"897825","approvalCode":"20304B","transmissionDateTime":"2016-11-17T19:04:06"},"acquiringBin":"408999","systemsTraceAuditNumber":"451050","senderCurrencyCode":"USD","pointOfServiceCapability":{"posTerminalType":"4","posTerminalEntryCapability":"2"},"amount":"24.01","pointOfServiceData":{"posConditionCode":"00","panEntryMode":"90","motoECIIndicator":"0"},"senderPrimaryAccountNumber":"4895100000055127"}'));

        $this->assertNotNull($result);

    }

}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/