<?php
/**
 * TransactionQuerygetResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  qury_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Query API
 *
 * The Transaction Query API can be used to determine the processing status of a transaction or to retreive the lifecycle of a transaction. This API can be used to check whether a PullFunds, PushFunds or ReverseFunds transaction processed successfully if received by Visa. This API could also be used to retrieve the detailed lifecycle or history of a transaction (e.g. original transaction, chargeback, chargeback reversal etc).
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace qury_100\model;

use \ArrayAccess;

/**
 * TransactionQuerygetResponse Class Doc Comment
 *
 * @category    Class
 * @description Query Transaction Response
 * @package     qury_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TransactionQuerygetResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'transactionQuerygetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'business_application_id' => 'string',
        'settlement_date' => 'string',
        'transaction_date' => 'string',
        'retrieval_reference_number' => 'string',
        'currency_conversion_rate' => 'string',
        'processing_date' => 'string',
        'transaction_time' => 'string',
        'reason_code' => 'string',
        'transaction_identifier' => 'string',
        'network_id' => 'string',
        'amount' => 'string',
        'account_number_masked' => 'string',
        'amount_in_transaction_currency' => 'string',
        'product_identifier_platform_code' => 'string',
        'settlement_time' => 'string',
        'fee_program_indicator' => 'string',
        'transaction_currency_code' => 'string',
        'reason_code_value' => 'string',
        'card_acceptor' => '\qury_100\model\CardAcceptor',
        'transaction_state_code' => 'string',
        'card_type' => 'string',
        'action_code' => 'string',
        'acquiring_bin' => 'int',
        'approval_code' => 'string',
        'reject_reason_code' => 'int',
        'reject_reason_text' => 'string',
        'fee_program_desc' => 'string',
        'systems_trace_audit_number' => 'string',
        'response_code' => 'string',
        'transaction_type' => 'string',
        'status_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'business_application_id' => 'businessApplicationId',
        'settlement_date' => 'settlementDate',
        'transaction_date' => 'transactionDate',
        'retrieval_reference_number' => 'retrievalReferenceNumber',
        'currency_conversion_rate' => 'currencyConversionRate',
        'processing_date' => 'processingDate',
        'transaction_time' => 'transactionTime',
        'reason_code' => 'reasonCode',
        'transaction_identifier' => 'transactionIdentifier',
        'network_id' => 'networkId',
        'amount' => 'amount',
        'account_number_masked' => 'accountNumberMasked',
        'amount_in_transaction_currency' => 'amountInTransactionCurrency',
        'product_identifier_platform_code' => 'productIdentifierPlatformCode',
        'settlement_time' => 'settlementTime',
        'fee_program_indicator' => 'feeProgramIndicator',
        'transaction_currency_code' => 'transactionCurrencyCode',
        'reason_code_value' => 'reasonCodeValue',
        'card_acceptor' => 'cardAcceptor',
        'transaction_state_code' => 'transactionStateCode',
        'card_type' => 'cardType',
        'action_code' => 'actionCode',
        'acquiring_bin' => 'acquiringBin',
        'approval_code' => 'approvalCode',
        'reject_reason_code' => 'rejectReasonCode',
        'reject_reason_text' => 'rejectReasonText',
        'fee_program_desc' => 'feeProgramDesc',
        'systems_trace_audit_number' => 'systemsTraceAuditNumber',
        'response_code' => 'responseCode',
        'transaction_type' => 'transactionType',
        'status_code' => 'statusCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'business_application_id' => 'setBusinessApplicationId',
        'settlement_date' => 'setSettlementDate',
        'transaction_date' => 'setTransactionDate',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber',
        'currency_conversion_rate' => 'setCurrencyConversionRate',
        'processing_date' => 'setProcessingDate',
        'transaction_time' => 'setTransactionTime',
        'reason_code' => 'setReasonCode',
        'transaction_identifier' => 'setTransactionIdentifier',
        'network_id' => 'setNetworkId',
        'amount' => 'setAmount',
        'account_number_masked' => 'setAccountNumberMasked',
        'amount_in_transaction_currency' => 'setAmountInTransactionCurrency',
        'product_identifier_platform_code' => 'setProductIdentifierPlatformCode',
        'settlement_time' => 'setSettlementTime',
        'fee_program_indicator' => 'setFeeProgramIndicator',
        'transaction_currency_code' => 'setTransactionCurrencyCode',
        'reason_code_value' => 'setReasonCodeValue',
        'card_acceptor' => 'setCardAcceptor',
        'transaction_state_code' => 'setTransactionStateCode',
        'card_type' => 'setCardType',
        'action_code' => 'setActionCode',
        'acquiring_bin' => 'setAcquiringBin',
        'approval_code' => 'setApprovalCode',
        'reject_reason_code' => 'setRejectReasonCode',
        'reject_reason_text' => 'setRejectReasonText',
        'fee_program_desc' => 'setFeeProgramDesc',
        'systems_trace_audit_number' => 'setSystemsTraceAuditNumber',
        'response_code' => 'setResponseCode',
        'transaction_type' => 'setTransactionType',
        'status_code' => 'setStatusCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'business_application_id' => 'getBusinessApplicationId',
        'settlement_date' => 'getSettlementDate',
        'transaction_date' => 'getTransactionDate',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber',
        'currency_conversion_rate' => 'getCurrencyConversionRate',
        'processing_date' => 'getProcessingDate',
        'transaction_time' => 'getTransactionTime',
        'reason_code' => 'getReasonCode',
        'transaction_identifier' => 'getTransactionIdentifier',
        'network_id' => 'getNetworkId',
        'amount' => 'getAmount',
        'account_number_masked' => 'getAccountNumberMasked',
        'amount_in_transaction_currency' => 'getAmountInTransactionCurrency',
        'product_identifier_platform_code' => 'getProductIdentifierPlatformCode',
        'settlement_time' => 'getSettlementTime',
        'fee_program_indicator' => 'getFeeProgramIndicator',
        'transaction_currency_code' => 'getTransactionCurrencyCode',
        'reason_code_value' => 'getReasonCodeValue',
        'card_acceptor' => 'getCardAcceptor',
        'transaction_state_code' => 'getTransactionStateCode',
        'card_type' => 'getCardType',
        'action_code' => 'getActionCode',
        'acquiring_bin' => 'getAcquiringBin',
        'approval_code' => 'getApprovalCode',
        'reject_reason_code' => 'getRejectReasonCode',
        'reject_reason_text' => 'getRejectReasonText',
        'fee_program_desc' => 'getFeeProgramDesc',
        'systems_trace_audit_number' => 'getSystemsTraceAuditNumber',
        'response_code' => 'getResponseCode',
        'transaction_type' => 'getTransactionType',
        'status_code' => 'getStatusCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_application_id'] = isset($data['business_application_id']) ? $data['business_application_id'] : null;
        $this->container['settlement_date'] = isset($data['settlement_date']) ? $data['settlement_date'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['retrieval_reference_number'] = isset($data['retrieval_reference_number']) ? $data['retrieval_reference_number'] : null;
        $this->container['currency_conversion_rate'] = isset($data['currency_conversion_rate']) ? $data['currency_conversion_rate'] : null;
        $this->container['processing_date'] = isset($data['processing_date']) ? $data['processing_date'] : null;
        $this->container['transaction_time'] = isset($data['transaction_time']) ? $data['transaction_time'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['transaction_identifier'] = isset($data['transaction_identifier']) ? $data['transaction_identifier'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['account_number_masked'] = isset($data['account_number_masked']) ? $data['account_number_masked'] : null;
        $this->container['amount_in_transaction_currency'] = isset($data['amount_in_transaction_currency']) ? $data['amount_in_transaction_currency'] : null;
        $this->container['product_identifier_platform_code'] = isset($data['product_identifier_platform_code']) ? $data['product_identifier_platform_code'] : null;
        $this->container['settlement_time'] = isset($data['settlement_time']) ? $data['settlement_time'] : null;
        $this->container['fee_program_indicator'] = isset($data['fee_program_indicator']) ? $data['fee_program_indicator'] : null;
        $this->container['transaction_currency_code'] = isset($data['transaction_currency_code']) ? $data['transaction_currency_code'] : null;
        $this->container['reason_code_value'] = isset($data['reason_code_value']) ? $data['reason_code_value'] : null;
        $this->container['card_acceptor'] = isset($data['card_acceptor']) ? $data['card_acceptor'] : null;
        $this->container['transaction_state_code'] = isset($data['transaction_state_code']) ? $data['transaction_state_code'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['action_code'] = isset($data['action_code']) ? $data['action_code'] : null;
        $this->container['acquiring_bin'] = isset($data['acquiring_bin']) ? $data['acquiring_bin'] : null;
        $this->container['approval_code'] = isset($data['approval_code']) ? $data['approval_code'] : null;
        $this->container['reject_reason_code'] = isset($data['reject_reason_code']) ? $data['reject_reason_code'] : null;
        $this->container['reject_reason_text'] = isset($data['reject_reason_text']) ? $data['reject_reason_text'] : null;
        $this->container['fee_program_desc'] = isset($data['fee_program_desc']) ? $data['fee_program_desc'] : null;
        $this->container['systems_trace_audit_number'] = isset($data['systems_trace_audit_number']) ? $data['systems_trace_audit_number'] : null;
        $this->container['response_code'] = isset($data['response_code']) ? $data['response_code'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['transaction_date'] === null) {
            $invalid_properties[] = "'transaction_date' can't be null";
        }
        if ($this->container['retrieval_reference_number'] === null) {
            $invalid_properties[] = "'retrieval_reference_number' can't be null";
        }
        if ($this->container['transaction_time'] === null) {
            $invalid_properties[] = "'transaction_time' can't be null";
        }
        if ($this->container['transaction_identifier'] === null) {
            $invalid_properties[] = "'transaction_identifier' can't be null";
        }
        if ($this->container['action_code'] === null) {
            $invalid_properties[] = "'action_code' can't be null";
        }
        if ($this->container['acquiring_bin'] === null) {
            $invalid_properties[] = "'acquiring_bin' can't be null";
        }
        if ($this->container['approval_code'] === null) {
            $invalid_properties[] = "'approval_code' can't be null";
        }
        if ($this->container['systems_trace_audit_number'] === null) {
            $invalid_properties[] = "'systems_trace_audit_number' can't be null";
        }
        if ($this->container['response_code'] === null) {
            $invalid_properties[] = "'response_code' can't be null";
        }
        if ($this->container['transaction_type'] === null) {
            $invalid_properties[] = "'transaction_type' can't be null";
        }
        if ($this->container['status_code'] === null) {
            $invalid_properties[] = "'status_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['transaction_date'] === null) {
            return false;
        }
        if ($this->container['retrieval_reference_number'] === null) {
            return false;
        }
        if ($this->container['transaction_time'] === null) {
            return false;
        }
        if ($this->container['transaction_identifier'] === null) {
            return false;
        }
        if ($this->container['action_code'] === null) {
            return false;
        }
        if ($this->container['acquiring_bin'] === null) {
            return false;
        }
        if ($this->container['approval_code'] === null) {
            return false;
        }
        if ($this->container['systems_trace_audit_number'] === null) {
            return false;
        }
        if ($this->container['response_code'] === null) {
            return false;
        }
        if ($this->container['transaction_type'] === null) {
            return false;
        }
        if ($this->container['status_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets business_application_id
     * @return string
     */
    public function getBusinessApplicationId()
    {
        return $this->container['business_application_id'];
    }

    /**
     * Sets business_application_id
     * @param string $business_application_id Business Application ID indicates to the type of Transaction that has taken place. <br/> Valid Values include* <br/> <ul> <li> AA - Account to Account </li> <li> BB - Business to Business </li> <li> BI - Money Transfer (bank-initiated) </li> <li> CP - Card Bill Payment </li> </ul> <br/> For more information visit <a href=\"/request_response_codes#businessApplicationId\">Visa Developer Platform Documentation </a>
     * @return $this
     */
    public function setBusinessApplicationId($business_application_id)
    {
        $this->container['business_application_id'] = $business_application_id;

        return $this;
    }

    /**
     * Gets settlement_date
     * @return string
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     * @param string $settlement_date This field contains the settlement date for the transaction processed by VisaNet.
     * @return $this
     */
    public function setSettlementDate($settlement_date)
    {
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets transaction_date
     * @return string
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     * @param string $transaction_date The date the transaction was submitted to VisaNet.
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     * @return string
     */
    public function getRetrievalReferenceNumber()
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     * @param string $retrieval_reference_number A value used to tie together service calls related to a single financial transaction. This is the same as retrievalReferenceNumber previously sent in the request for PullFunds, PushFunds or ReverseFunds transaction API calls.
     * @return $this
     */
    public function setRetrievalReferenceNumber($retrieval_reference_number)
    {
        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }

    /**
     * Gets currency_conversion_rate
     * @return string
     */
    public function getCurrencyConversionRate()
    {
        return $this->container['currency_conversion_rate'];
    }

    /**
     * Sets currency_conversion_rate
     * @param string $currency_conversion_rate Currency conversion rate taken place at Acquirer's end.
     * @return $this
     */
    public function setCurrencyConversionRate($currency_conversion_rate)
    {
        $this->container['currency_conversion_rate'] = $currency_conversion_rate;

        return $this;
    }

    /**
     * Gets processing_date
     * @return string
     */
    public function getProcessingDate()
    {
        return $this->container['processing_date'];
    }

    /**
     * Sets processing_date
     * @param string $processing_date The date on which VisaNet created the log (record).
     * @return $this
     */
    public function setProcessingDate($processing_date)
    {
        $this->container['processing_date'] = $processing_date;

        return $this;
    }

    /**
     * Gets transaction_time
     * @return string
     */
    public function getTransactionTime()
    {
        return $this->container['transaction_time'];
    }

    /**
     * Sets transaction_time
     * @param string $transaction_time The time the transaction was submitted to VisaNet.
     * @return $this
     */
    public function setTransactionTime($transaction_time)
    {
        $this->container['transaction_time'] = $transaction_time;

        return $this;
    }

    /**
     * Gets reason_code
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     * @param string $reason_code The reason code description contains the reason explaining:<ul><li> An acquirer-generated advice, reversal, cancellation, adjustment, chargeback (validation request or advice).</li><li> A chargeback reversal, representment (validation request or advice). </li> etc.
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets transaction_identifier
     * @return string
     */
    public function getTransactionIdentifier()
    {
        return $this->container['transaction_identifier'];
    }

    /**
     * Sets transaction_identifier
     * @param string $transaction_identifier The VisaNet reference number for the transaction. This is the same transactionIdentifier previously received in the response for PullFunds, PushFunds or ReverseFunds transaction API calls.
     * @return $this
     */
    public function setTransactionIdentifier($transaction_identifier)
    {
        $this->container['transaction_identifier'] = $transaction_identifier;

        return $this;
    }

    /**
     * Gets network_id
     * @return string
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     * @param string $network_id Network ID on which the transaction was performed. <br/> Takes the format of 000x where x is a number. <br/> Valid Values include* <br/> 0002 - Visa/PLUS <br/> 0016 - Maestro <br/> 0003 - Interlink <br/> 0008,0010,0011,0012,0015 - Star
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets amount
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param string $amount This is the transaction amount expressed in U.S. Dollars. Derived internally.
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets account_number_masked
     * @return string
     */
    public function getAccountNumberMasked()
    {
        return $this->container['account_number_masked'];
    }

    /**
     * Sets account_number_masked
     * @param string $account_number_masked Contains the masked PAN number. Populated from the primary account number (PAN) contained in the original authorization request.
     * @return $this
     */
    public function setAccountNumberMasked($account_number_masked)
    {
        $this->container['account_number_masked'] = $account_number_masked;

        return $this;
    }

    /**
     * Gets amount_in_transaction_currency
     * @return string
     */
    public function getAmountInTransactionCurrency()
    {
        return $this->container['amount_in_transaction_currency'];
    }

    /**
     * Sets amount_in_transaction_currency
     * @param string $amount_in_transaction_currency This is the transaction amount in original transaction currency.
     * @return $this
     */
    public function setAmountInTransactionCurrency($amount_in_transaction_currency)
    {
        $this->container['amount_in_transaction_currency'] = $amount_in_transaction_currency;

        return $this;
    }

    /**
     * Gets product_identifier_platform_code
     * @return string
     */
    public function getProductIdentifierPlatformCode()
    {
        return $this->container['product_identifier_platform_code'];
    }

    /**
     * Sets product_identifier_platform_code
     * @param string $product_identifier_platform_code Product Identifier Platform Code. <br/> Valid Values include* <br/> BZ - Business <br/> CN - Consumer <br/> CO - Commercial <br/> GV - Government
     * @return $this
     */
    public function setProductIdentifierPlatformCode($product_identifier_platform_code)
    {
        $this->container['product_identifier_platform_code'] = $product_identifier_platform_code;

        return $this;
    }

    /**
     * Gets settlement_time
     * @return string
     */
    public function getSettlementTime()
    {
        return $this->container['settlement_time'];
    }

    /**
     * Sets settlement_time
     * @param string $settlement_time This field contains the settlement time for the transaction processed by VisaNet. <br/> Note: The exact time of settlement may vary and is indicative only.
     * @return $this
     */
    public function setSettlementTime($settlement_time)
    {
        $this->container['settlement_time'] = $settlement_time;

        return $this;
    }

    /**
     * Gets fee_program_indicator
     * @return string
     */
    public function getFeeProgramIndicator()
    {
        return $this->container['fee_program_indicator'];
    }

    /**
     * Sets fee_program_indicator
     * @param string $fee_program_indicator This field contains an interchange reimbursement fee program indicator (FPI), which is used in assessing the fee amount applied to financial transactions that were originally sent.
     * @return $this
     */
    public function setFeeProgramIndicator($fee_program_indicator)
    {
        $this->container['fee_program_indicator'] = $fee_program_indicator;

        return $this;
    }

    /**
     * Gets transaction_currency_code
     * @return string
     */
    public function getTransactionCurrencyCode()
    {
        return $this->container['transaction_currency_code'];
    }

    /**
     * Sets transaction_currency_code
     * @param string $transaction_currency_code 3-character numeric currency code of the transaction.
     * @return $this
     */
    public function setTransactionCurrencyCode($transaction_currency_code)
    {
        $this->container['transaction_currency_code'] = $transaction_currency_code;

        return $this;
    }

    /**
     * Gets reason_code_value
     * @return string
     */
    public function getReasonCodeValue()
    {
        return $this->container['reason_code_value'];
    }

    /**
     * Sets reason_code_value
     * @param string $reason_code_value While reasonCode property explains the reason in details, reasonCodeValue property is a four digit number that corelates to reasonCode. <br/> Valid Values include* <br/> 0000 - NOT APPLICABLE <br/> 0083 - FRAUD; CARD ABSENT ENVIRONMENT
     * @return $this
     */
    public function setReasonCodeValue($reason_code_value)
    {
        $this->container['reason_code_value'] = $reason_code_value;

        return $this;
    }

    /**
     * Gets card_acceptor
     * @return \qury_100\model\CardAcceptor
     */
    public function getCardAcceptor()
    {
        return $this->container['card_acceptor'];
    }

    /**
     * Sets card_acceptor
     * @param \qury_100\model\CardAcceptor $card_acceptor
     * @return $this
     */
    public function setCardAcceptor($card_acceptor)
    {
        $this->container['card_acceptor'] = $card_acceptor;

        return $this;
    }

    /**
     * Gets transaction_state_code
     * @return string
     */
    public function getTransactionStateCode()
    {
        return $this->container['transaction_state_code'];
    }

    /**
     * Sets transaction_state_code
     * @param string $transaction_state_code Code explaining the state of the transaction.
     * @return $this
     */
    public function setTransactionStateCode($transaction_state_code)
    {
        $this->container['transaction_state_code'] = $transaction_state_code;

        return $this;
    }

    /**
     * Gets card_type
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     * @param string $card_type Product type of the card on which the transaction is performed. <br/> Valid Values include* <br/> Credit  <br/> Debit <br/> Prepaid
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets action_code
     * @return string
     */
    public function getActionCode()
    {
        return $this->container['action_code'];
    }

    /**
     * Sets action_code
     * @param string $action_code The results of the transaction request <br/> Refer to <a href='/request_response_codes#action_code'>actionCode</a><br/> Note: The VisaNet Response Code for the transaction
     * @return $this
     */
    public function setActionCode($action_code)
    {
        $this->container['action_code'] = $action_code;

        return $this;
    }

    /**
     * Gets acquiring_bin
     * @return int
     */
    public function getAcquiringBin()
    {
        return $this->container['acquiring_bin'];
    }

    /**
     * Sets acquiring_bin
     * @param int $acquiring_bin The Bank Identification Number (BIN) under which the Visa Direct solution is registered. This must match the information provided during enrollment.
     * @return $this
     */
    public function setAcquiringBin($acquiring_bin)
    {
        $this->container['acquiring_bin'] = $acquiring_bin;

        return $this;
    }

    /**
     * Gets approval_code
     * @return string
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     * @param string $approval_code The authorization code from the issuer. A code provided by the issuer (or VIP STIP) when a transaction is approved, or a no reason to decline code is provided.
     * @return $this
     */
    public function setApprovalCode($approval_code)
    {
        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets reject_reason_code
     * @return int
     */
    public function getRejectReasonCode()
    {
        return $this->container['reject_reason_code'];
    }

    /**
     * Sets reject_reason_code
     * @param int $reject_reason_code This field contains reject reason code if the the transaction was rejected by VisaNet. <br/> A positive number not greater than 9999.
     * @return $this
     */
    public function setRejectReasonCode($reject_reason_code)
    {
        $this->container['reject_reason_code'] = $reject_reason_code;

        return $this;
    }

    /**
     * Gets reject_reason_text
     * @return string
     */
    public function getRejectReasonText()
    {
        return $this->container['reject_reason_text'];
    }

    /**
     * Sets reject_reason_text
     * @param string $reject_reason_text This field contains reject reason text if the transaction was rejected by VisaNet.
     * @return $this
     */
    public function setRejectReasonText($reject_reason_text)
    {
        $this->container['reject_reason_text'] = $reject_reason_text;

        return $this;
    }

    /**
     * Gets fee_program_desc
     * @return string
     */
    public function getFeeProgramDesc()
    {
        return $this->container['fee_program_desc'];
    }

    /**
     * Sets fee_program_desc
     * @param string $fee_program_desc Short text description of the Acquirer IRF (Interchange Reimbursement Fee) indicator. (Interchange fees are paid by issuers and acquirers to each other for transactions entered into interchange and their reversals).
     * @return $this
     */
    public function setFeeProgramDesc($fee_program_desc)
    {
        $this->container['fee_program_desc'] = $fee_program_desc;

        return $this;
    }

    /**
     * Gets systems_trace_audit_number
     * @return string
     */
    public function getSystemsTraceAuditNumber()
    {
        return $this->container['systems_trace_audit_number'];
    }

    /**
     * Sets systems_trace_audit_number
     * @param string $systems_trace_audit_number A number assigned by the message initiator that uniquely identifies a transaction. This is the same as systemsTraceAuditNumber previously sent in the request for the PullFunds, PushFunds or ReverseFunds transaction API calls.
     * @return $this
     */
    public function setSystemsTraceAuditNumber($systems_trace_audit_number)
    {
        $this->container['systems_trace_audit_number'] = $systems_trace_audit_number;

        return $this;
    }

    /**
     * Gets response_code
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     * @param string $response_code The source for the response; typically, either the recipient issuer or a Visa system. <br/> Refer to <a href='/request_response_codes#response_code'>responseCode</a><br/> Note: The VisaNet Response Source for the transaction
     * @return $this
     */
    public function setResponseCode($response_code)
    {
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets transaction_type
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     * @param string $transaction_type Identifies the type of transaction originally sent <br/> Valid Values include*: <br/>  CRED VOUCHER <br/> CRED REVERSAL <br/> CRED CHGBK <br/> CRED CHGBK REVERSAL <br/> SALES DRAFT <br/> SALES CHGBK <br/> SALES REVERSAL <br/> CASH DISBURSEMT <br/> CASH CHGBK
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets status_code
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     * @param string $status_code Specifies status of the transaction processing. <br/> Valid values are <ul> <li>COMPLETED - Transaction was processed by Visa </li> <li> IN_PROGRESS - Transaction is in progress, being processed by Visa </li> <li> FAILED - Transaction was received & rejected by Visa</li></ul>
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\qury_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\qury_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/