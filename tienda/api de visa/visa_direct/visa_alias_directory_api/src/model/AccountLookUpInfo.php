<?php
/**
 * AccountLookUpInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  alias_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Alias Directory API
 *
 * Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace alias_100\model;

use \ArrayAccess;

/**
 * AccountLookUpInfo Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     alias_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccountLookUpInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'accountLookUpInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'push_funds_block_indicator' => 'string',
        'billing_currency_code' => 'int',
        'billing_currency_code_minor_digits' => 'string',
        'fast_funds_indicator' => 'string',
        'card_issuer_country_code' => 'string',
        'online_gambing_block_indicator' => 'string',
        'issuer_name' => 'string',
        'geo_restriction_ind' => 'string',
        'card_type_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'push_funds_block_indicator' => 'pushFundsBlockIndicator',
        'billing_currency_code' => 'billingCurrencyCode',
        'billing_currency_code_minor_digits' => 'billingCurrencyCodeMinorDigits',
        'fast_funds_indicator' => 'fastFundsIndicator',
        'card_issuer_country_code' => 'cardIssuerCountryCode',
        'online_gambing_block_indicator' => 'onlineGambingBlockIndicator',
        'issuer_name' => 'issuerName',
        'geo_restriction_ind' => 'geoRestrictionInd',
        'card_type_code' => 'cardTypeCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'push_funds_block_indicator' => 'setPushFundsBlockIndicator',
        'billing_currency_code' => 'setBillingCurrencyCode',
        'billing_currency_code_minor_digits' => 'setBillingCurrencyCodeMinorDigits',
        'fast_funds_indicator' => 'setFastFundsIndicator',
        'card_issuer_country_code' => 'setCardIssuerCountryCode',
        'online_gambing_block_indicator' => 'setOnlineGambingBlockIndicator',
        'issuer_name' => 'setIssuerName',
        'geo_restriction_ind' => 'setGeoRestrictionInd',
        'card_type_code' => 'setCardTypeCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'push_funds_block_indicator' => 'getPushFundsBlockIndicator',
        'billing_currency_code' => 'getBillingCurrencyCode',
        'billing_currency_code_minor_digits' => 'getBillingCurrencyCodeMinorDigits',
        'fast_funds_indicator' => 'getFastFundsIndicator',
        'card_issuer_country_code' => 'getCardIssuerCountryCode',
        'online_gambing_block_indicator' => 'getOnlineGambingBlockIndicator',
        'issuer_name' => 'getIssuerName',
        'geo_restriction_ind' => 'getGeoRestrictionInd',
        'card_type_code' => 'getCardTypeCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['push_funds_block_indicator'] = isset($data['push_funds_block_indicator']) ? $data['push_funds_block_indicator'] : null;
        $this->container['billing_currency_code'] = isset($data['billing_currency_code']) ? $data['billing_currency_code'] : null;
        $this->container['billing_currency_code_minor_digits'] = isset($data['billing_currency_code_minor_digits']) ? $data['billing_currency_code_minor_digits'] : null;
        $this->container['fast_funds_indicator'] = isset($data['fast_funds_indicator']) ? $data['fast_funds_indicator'] : null;
        $this->container['card_issuer_country_code'] = isset($data['card_issuer_country_code']) ? $data['card_issuer_country_code'] : null;
        $this->container['online_gambing_block_indicator'] = isset($data['online_gambing_block_indicator']) ? $data['online_gambing_block_indicator'] : null;
        $this->container['issuer_name'] = isset($data['issuer_name']) ? $data['issuer_name'] : null;
        $this->container['geo_restriction_ind'] = isset($data['geo_restriction_ind']) ? $data['geo_restriction_ind'] : null;
        $this->container['card_type_code'] = isset($data['card_type_code']) ? $data['card_type_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['push_funds_block_indicator'] === null) {
            $invalid_properties[] = "'push_funds_block_indicator' can't be null";
        }
        if ($this->container['billing_currency_code'] === null) {
            $invalid_properties[] = "'billing_currency_code' can't be null";
        }
        if ($this->container['fast_funds_indicator'] === null) {
            $invalid_properties[] = "'fast_funds_indicator' can't be null";
        }
        if ($this->container['card_issuer_country_code'] === null) {
            $invalid_properties[] = "'card_issuer_country_code' can't be null";
        }
        if ($this->container['online_gambing_block_indicator'] === null) {
            $invalid_properties[] = "'online_gambing_block_indicator' can't be null";
        }
        if ($this->container['issuer_name'] === null) {
            $invalid_properties[] = "'issuer_name' can't be null";
        }
        if ($this->container['geo_restriction_ind'] === null) {
            $invalid_properties[] = "'geo_restriction_ind' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['push_funds_block_indicator'] === null) {
            return false;
        }
        if ($this->container['billing_currency_code'] === null) {
            return false;
        }
        if ($this->container['fast_funds_indicator'] === null) {
            return false;
        }
        if ($this->container['card_issuer_country_code'] === null) {
            return false;
        }
        if ($this->container['online_gambing_block_indicator'] === null) {
            return false;
        }
        if ($this->container['issuer_name'] === null) {
            return false;
        }
        if ($this->container['geo_restriction_ind'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets push_funds_block_indicator
     * @return string
     */
    public function getPushFundsBlockIndicator()
    {
        return $this->container['push_funds_block_indicator'];
    }

    /**
     * Sets push_funds_block_indicator
     * @param string $push_funds_block_indicator Indicates whether the PAN submitted in the request can receive Push Funds(OCTs).<br>Refer to <a href=\"/request_response_codes#pushFundsIndicator\">pushFundsBlockIndicator</a>
     * @return $this
     */
    public function setPushFundsBlockIndicator($push_funds_block_indicator)
    {
        $this->container['push_funds_block_indicator'] = $push_funds_block_indicator;

        return $this;
    }

    /**
     * Gets billing_currency_code
     * @return int
     */
    public function getBillingCurrencyCode()
    {
        return $this->container['billing_currency_code'];
    }

    /**
     * Sets billing_currency_code
     * @param int $billing_currency_code Use a 3-digit numeric currency code for the card billing currency of the PAN.<br>Refer to <a href=\"/request_response_codes#currency_codes\">ISO Codes</a>
     * @return $this
     */
    public function setBillingCurrencyCode($billing_currency_code)
    {
        $this->container['billing_currency_code'] = $billing_currency_code;

        return $this;
    }

    /**
     * Gets billing_currency_code_minor_digits
     * @return string
     */
    public function getBillingCurrencyCodeMinorDigits()
    {
        return $this->container['billing_currency_code_minor_digits'];
    }

    /**
     * Sets billing_currency_code_minor_digits
     * @param string $billing_currency_code_minor_digits Identifies the number of decimal positions that should be present in any amounts for the requested card's billing currency.
     * @return $this
     */
    public function setBillingCurrencyCodeMinorDigits($billing_currency_code_minor_digits)
    {
        $this->container['billing_currency_code_minor_digits'] = $billing_currency_code_minor_digits;

        return $this;
    }

    /**
     * Gets fast_funds_indicator
     * @return string
     */
    public function getFastFundsIndicator()
    {
        return $this->container['fast_funds_indicator'];
    }

    /**
     * Sets fast_funds_indicator
     * @param string $fast_funds_indicator Indicates the funds delivery speed of the PAN submitted in the request. If the value is 'B', 'C', or 'D', funds will be available to the recipient within 30 minutes of successful transfer. If the value is 'N', the funds will be available within 2 business days of successful transfer.<br>Refer to <a href=\"/request_response_codes#fastFundsIndicator\">fastFundsIndicator</a>
     * @return $this
     */
    public function setFastFundsIndicator($fast_funds_indicator)
    {
        $this->container['fast_funds_indicator'] = $fast_funds_indicator;

        return $this;
    }

    /**
     * Gets card_issuer_country_code
     * @return string
     */
    public function getCardIssuerCountryCode()
    {
        return $this->container['card_issuer_country_code'];
    }

    /**
     * Sets card_issuer_country_code
     * @param string $card_issuer_country_code Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>
     * @return $this
     */
    public function setCardIssuerCountryCode($card_issuer_country_code)
    {
        $this->container['card_issuer_country_code'] = $card_issuer_country_code;

        return $this;
    }

    /**
     * Gets online_gambing_block_indicator
     * @return string
     */
    public function getOnlineGambingBlockIndicator()
    {
        return $this->container['online_gambing_block_indicator'];
    }

    /**
     * Sets online_gambing_block_indicator
     * @param string $online_gambing_block_indicator Indicates whether the PAN submitted in the request can receive Push Funds(OCTs) for gambling-type transactions. If the value is 'Y', then the account cannot receive gambling Push Funds (OCTs). If the value is 'N', the account can receive gambling Push Funds (OCTs).
     * @return $this
     */
    public function setOnlineGambingBlockIndicator($online_gambing_block_indicator)
    {
        $this->container['online_gambing_block_indicator'] = $online_gambing_block_indicator;

        return $this;
    }

    /**
     * Gets issuer_name
     * @return string
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     * @param string $issuer_name Issuer name of the consumer card.
     * @return $this
     */
    public function setIssuerName($issuer_name)
    {
        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets geo_restriction_ind
     * @return string
     */
    public function getGeoRestrictionInd()
    {
        return $this->container['geo_restriction_ind'];
    }

    /**
     * Sets geo_restriction_ind
     * @param string $geo_restriction_ind This field will determine if the recipient issuer can accept transactions from the Originator country. If the value is 'Y', transactions cannot be accepted from the sender country. If the value is 'N', transactions are allowed.
     * @return $this
     */
    public function setGeoRestrictionInd($geo_restriction_ind)
    {
        $this->container['geo_restriction_ind'] = $geo_restriction_ind;

        return $this;
    }

    /**
     * Gets card_type_code
     * @return string
     */
    public function getCardTypeCode()
    {
        return $this->container['card_type_code'];
    }

    /**
     * Sets card_type_code
     * @param string $card_type_code The code of account funding source for the card, e.g. Credit, Debit, Prepaid, Charge, Deferred Debit.<br>Refer to <a href=\"/request_response_codes#cardTypeCode\">cardTypeCode</a>
     * @return $this
     */
    public function setCardTypeCode($card_type_code)
    {
        $this->container['card_type_code'] = $card_type_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\alias_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\alias_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/