<?php
/**
 * ResolvepostPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  alias_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Alias Directory API
 *
 * Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace alias_100\model;

use \ArrayAccess;

/**
 * ResolvepostPayload Class Doc Comment
 *
 * @category    Class
 * @description Request body for resolve alias API
 * @package     alias_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ResolvepostPayload implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ResolvepostPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alias' => 'string',
        'business_application_id' => 'string',
        'account_look_up' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'alias' => 'alias',
        'business_application_id' => 'businessApplicationId',
        'account_look_up' => 'accountLookUp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'alias' => 'setAlias',
        'business_application_id' => 'setBusinessApplicationId',
        'account_look_up' => 'setAccountLookUp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'alias' => 'getAlias',
        'business_application_id' => 'getBusinessApplicationId',
        'account_look_up' => 'getAccountLookUp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['business_application_id'] = isset($data['business_application_id']) ? $data['business_application_id'] : null;
        $this->container['account_look_up'] = isset($data['account_look_up']) ? $data['account_look_up'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['alias'] === null) {
            $invalid_properties[] = "'alias' can't be null";
        }
        if ($this->container['business_application_id'] === null) {
            $invalid_properties[] = "'business_application_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['alias'] === null) {
            return false;
        }
        if ($this->container['business_application_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets alias
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     * @param string $alias This attribute is used to retrieve recipient's Primary Account Number (PAN) of the card holder which can then be used in subsequent services such as Visa Direct. <br>This attribute can contain information of a mobile phone number, email address, merchant ID, agent ID, etc. <br>If phone number is used for alias, this should be provided in accordance with ITU-T E.164 (2010) number structure.  Below are some examples of phone numbers with different country codes:<br><table><tr><td>Country</td><td>Country Code</td><td>Examples</td><tr><td>United States</td><td>1</td><td><b>1</b>650xxxxxxx</td></tr><tr><td>Russia</td><td>7</td><td><b>7</b>495xxxxxxx</td></tr><tr><td>United Kingdom</td><td>44</td><td><b>44</b>78xxxxxxxx</td></tr><tr><td>Singapore</td><td>65</td><td><b>65</b>9xxxxxxx</td></tr><tr><td>Hong Kong</td><td>852</td><td>8529xxxxxxx</td></tr><tr><td>Kenya</td><td>254</td><td><b>254</b>701xxxxxx</td></tr></table>
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets business_application_id
     * @return string
     */
    public function getBusinessApplicationId()
    {
        return $this->container['business_application_id'];
    }

    /**
     * Sets business_application_id
     * @param string $business_application_id Used to identify program’s business application type for VisaNet transaction processing. It can be PP for Personal payment, MP for Merchant Payment, CO for Cash Out, CI for Cash In
     * @return $this
     */
    public function setBusinessApplicationId($business_application_id)
    {
        $this->container['business_application_id'] = $business_application_id;

        return $this;
    }

    /**
     * Gets account_look_up
     * @return string
     */
    public function getAccountLookUp()
    {
        return $this->container['account_look_up'];
    }

    /**
     * Sets account_look_up
     * @param string $account_look_up Retrieve the attributes that determine the key characteristics of a recipient payment account before initiating a funds transfer by providing the Primary Account Number (PAN).<br>If such attributes are required, set the value as 'Y'. Default is set as 'N'
     * @return $this
     */
    public function setAccountLookUp($account_look_up)
    {
        $this->container['account_look_up'] = $account_look_up;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\alias_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\alias_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/