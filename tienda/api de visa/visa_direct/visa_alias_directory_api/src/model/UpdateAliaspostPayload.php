<?php
/**
 * UpdateAliaspostPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  alias_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Alias Directory API
 *
 * Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace alias_100\model;

use \ArrayAccess;

/**
 * UpdateAliaspostPayload Class Doc Comment
 *
 * @category    Class
 * @description Request body for updating alias API
 * @package     alias_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UpdateAliaspostPayload implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UpdateAliaspostPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recipient_middle_name' => 'string',
        'city' => 'string',
        'recipient_first_name' => 'string',
        'contact_phone_number' => 'string',
        'address1' => 'string',
        'new_guid' => 'string',
        'recipient_primary_account_number' => 'string',
        'consent_date_time' => 'string',
        'contact_email' => 'string',
        'alias' => 'string',
        'card_type' => 'string',
        'recipient_last_name' => 'string',
        'country' => 'string',
        'postal_code' => 'string',
        'issuer_name' => 'string',
        'guid' => 'string',
        'address2' => 'string',
        'alias_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'recipient_middle_name' => 'recipientMiddleName',
        'city' => 'city',
        'recipient_first_name' => 'recipientFirstName',
        'contact_phone_number' => 'contactPhoneNumber',
        'address1' => 'address1',
        'new_guid' => 'newGuid',
        'recipient_primary_account_number' => 'recipientPrimaryAccountNumber',
        'consent_date_time' => 'consentDateTime',
        'contact_email' => 'contactEmail',
        'alias' => 'alias',
        'card_type' => 'cardType',
        'recipient_last_name' => 'recipientLastName',
        'country' => 'country',
        'postal_code' => 'postalCode',
        'issuer_name' => 'issuerName',
        'guid' => 'guid',
        'address2' => 'address2',
        'alias_type' => 'aliasType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'recipient_middle_name' => 'setRecipientMiddleName',
        'city' => 'setCity',
        'recipient_first_name' => 'setRecipientFirstName',
        'contact_phone_number' => 'setContactPhoneNumber',
        'address1' => 'setAddress1',
        'new_guid' => 'setNewGuid',
        'recipient_primary_account_number' => 'setRecipientPrimaryAccountNumber',
        'consent_date_time' => 'setConsentDateTime',
        'contact_email' => 'setContactEmail',
        'alias' => 'setAlias',
        'card_type' => 'setCardType',
        'recipient_last_name' => 'setRecipientLastName',
        'country' => 'setCountry',
        'postal_code' => 'setPostalCode',
        'issuer_name' => 'setIssuerName',
        'guid' => 'setGuid',
        'address2' => 'setAddress2',
        'alias_type' => 'setAliasType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'recipient_middle_name' => 'getRecipientMiddleName',
        'city' => 'getCity',
        'recipient_first_name' => 'getRecipientFirstName',
        'contact_phone_number' => 'getContactPhoneNumber',
        'address1' => 'getAddress1',
        'new_guid' => 'getNewGuid',
        'recipient_primary_account_number' => 'getRecipientPrimaryAccountNumber',
        'consent_date_time' => 'getConsentDateTime',
        'contact_email' => 'getContactEmail',
        'alias' => 'getAlias',
        'card_type' => 'getCardType',
        'recipient_last_name' => 'getRecipientLastName',
        'country' => 'getCountry',
        'postal_code' => 'getPostalCode',
        'issuer_name' => 'getIssuerName',
        'guid' => 'getGuid',
        'address2' => 'getAddress2',
        'alias_type' => 'getAliasType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipient_middle_name'] = isset($data['recipient_middle_name']) ? $data['recipient_middle_name'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['recipient_first_name'] = isset($data['recipient_first_name']) ? $data['recipient_first_name'] : null;
        $this->container['contact_phone_number'] = isset($data['contact_phone_number']) ? $data['contact_phone_number'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['new_guid'] = isset($data['new_guid']) ? $data['new_guid'] : null;
        $this->container['recipient_primary_account_number'] = isset($data['recipient_primary_account_number']) ? $data['recipient_primary_account_number'] : null;
        $this->container['consent_date_time'] = isset($data['consent_date_time']) ? $data['consent_date_time'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['recipient_last_name'] = isset($data['recipient_last_name']) ? $data['recipient_last_name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['issuer_name'] = isset($data['issuer_name']) ? $data['issuer_name'] : null;
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['alias_type'] = isset($data['alias_type']) ? $data['alias_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['guid'] === null) {
            $invalid_properties[] = "'guid' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['guid'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets recipient_middle_name
     * @return string
     */
    public function getRecipientMiddleName()
    {
        return $this->container['recipient_middle_name'];
    }

    /**
     * Sets recipient_middle_name
     * @param string $recipient_middle_name Consumer’s middle name.
     * @return $this
     */
    public function setRecipientMiddleName($recipient_middle_name)
    {
        $this->container['recipient_middle_name'] = $recipient_middle_name;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city Consumer's City
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets recipient_first_name
     * @return string
     */
    public function getRecipientFirstName()
    {
        return $this->container['recipient_first_name'];
    }

    /**
     * Sets recipient_first_name
     * @param string $recipient_first_name Consumer’s first name.
     * @return $this
     */
    public function setRecipientFirstName($recipient_first_name)
    {
        $this->container['recipient_first_name'] = $recipient_first_name;

        return $this;
    }

    /**
     * Gets contact_phone_number
     * @return string
     */
    public function getContactPhoneNumber()
    {
        return $this->container['contact_phone_number'];
    }

    /**
     * Sets contact_phone_number
     * @param string $contact_phone_number Consumer’s contact phone number for all communications.
     * @return $this
     */
    public function setContactPhoneNumber($contact_phone_number)
    {
        $this->container['contact_phone_number'] = $contact_phone_number;

        return $this;
    }

    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param string $address1 Address line 1.
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets new_guid
     * @return string
     */
    public function getNewGuid()
    {
        return $this->container['new_guid'];
    }

    /**
     * Sets new_guid
     * @param string $new_guid New unique identifier generated by issuer for a consumer if issuer would like to change the existing guid to a new value.
     * @return $this
     */
    public function setNewGuid($new_guid)
    {
        $this->container['new_guid'] = $new_guid;

        return $this;
    }

    /**
     * Gets recipient_primary_account_number
     * @return string
     */
    public function getRecipientPrimaryAccountNumber()
    {
        return $this->container['recipient_primary_account_number'];
    }

    /**
     * Sets recipient_primary_account_number
     * @param string $recipient_primary_account_number Consumer's card number.
     * @return $this
     */
    public function setRecipientPrimaryAccountNumber($recipient_primary_account_number)
    {
        $this->container['recipient_primary_account_number'] = $recipient_primary_account_number;

        return $this;
    }

    /**
     * Gets consent_date_time
     * @return string
     */
    public function getConsentDateTime()
    {
        return $this->container['consent_date_time'];
    }

    /**
     * Sets consent_date_time
     * @param string $consent_date_time Date & time when consumer has provided their consent to issuer about the use of their personal personal data for VAD service. Format: YYYY-MM-DD hh:nn:ss.  Local date and time should be converted to Coordinated Universal Time (UTC) before submitting this value in API request.
     * @return $this
     */
    public function setConsentDateTime($consent_date_time)
    {
        $this->container['consent_date_time'] = $consent_date_time;

        return $this;
    }

    /**
     * Gets contact_email
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     * @param string $contact_email Consumer’s contact email for all communications.
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets alias
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     * @param string $alias This attribute contains the alias data, e.g. phone number, email address, etc. <br>If phone number is used for alias, this should be provided in accordance with ITU-T E.164 (2010) number structure.<br>Below are some examples of phone numbers with different country codes:<br><table><tr><td>Country</td><td>Country Code</td><td>Examples</td><tr><td>United States</td><td>1</td><td><b>1</b>650xxxxxxx</td></tr><tr><td>Russia</td><td>7</td><td><b>7</b>495xxxxxxx</td></tr><tr><td>United Kingdom</td><td>44</td><td><b>44</b>78xxxxxxxx</td></tr><tr><td>Singapore</td><td>65</td><td><b>65</b>9xxxxxxx</td></tr><tr><td>Hong Kong</td><td>852</td><td>8529xxxxxxx</td></tr><tr><td>Kenya</td><td>254</td><td><b>254</b>701xxxxxx</td></tr></table>
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets card_type
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     * @param string $card_type <b>Conditional</b>. Card type description. Reference to Field 62.23—Product ID of available card products. e.g. Visa Classic, Visa Platinum. <br>This field is required if recipientPrimaryAccountNumber is present in request
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets recipient_last_name
     * @return string
     */
    public function getRecipientLastName()
    {
        return $this->container['recipient_last_name'];
    }

    /**
     * Sets recipient_last_name
     * @param string $recipient_last_name Last name of the consumer.
     * @return $this
     */
    public function setRecipientLastName($recipient_last_name)
    {
        $this->container['recipient_last_name'] = $recipient_last_name;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Country code of the consumer as defined by ISO 3166.  ISO 3166 alpha-2 is recommended to be used if alias may be used for QR.
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets postal_code
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     * @param string $postal_code Consumer’s postal code
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets issuer_name
     * @return string
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     * @param string $issuer_name <b>Conditional</b>. This is the issuer name of recipient’s card.<br> This field is required if recipientPrimaryAccountNumber is present in request
     * @return $this
     */
    public function setIssuerName($issuer_name)
    {
        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets guid
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     * @param string $guid This attribute is uniquely used by issuer to identify their customer (i.e. consumer cardholder).<br>Issuer may pass their existing unique identifier of a cardholder of their system to VAD as a guid.
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 Address line 2.
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets alias_type
     * @return string
     */
    public function getAliasType()
    {
        return $this->container['alias_type'];
    }

    /**
     * Sets alias_type
     * @param string $alias_type <b>Conditional</b>. <br>“01” – Phone number <br>“02” – email address
     * @return $this
     */
    public function setAliasType($alias_type)
    {
        $this->container['alias_type'] = $alias_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\alias_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\alias_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/