<?php
/**
 * Alias_apiApi
 * PHP version 5
 *
 * @category Class
 * @package  alias_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Alias Directory API
 *
 * Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace alias_100\api;

use \alias_100\ApiClient;
use \alias_100\ApiException;
use \alias_100\Configuration;
use \alias_100\ObjectSerializer;

/**
 * Alias_apiApi Class Doc Comment
 *
 * @category Class
 * @package  alias_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Alias_apiApi
{
    /**
     * API Client
     *
     * @var \alias_100\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \alias_100\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\alias_100\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \alias_100\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \alias_100\ApiClient $apiClient set the API client
     *
     * @return Alias_apiApi
     */
    public function setApiClient(\alias_100\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getGetAlias
     *
     * 
     *
     * @param string $guid This attribute is uniquely used by Issuer to identify their customer (i.e. consumer cardholder). (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\GetAliasgetResponse
     */
    public function getGetAlias($guid)
    {
        list($response) = $this->getGetAliasWithHttpInfo($guid);
        return $response;
    }

    /**
     * Operation getGetAliasWithHttpInfo
     *
     * 
     *
     * @param string $guid This attribute is uniquely used by Issuer to identify their customer (i.e. consumer cardholder). (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\GetAliasgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGetAliasWithHttpInfo($guid)
    {
        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling getGetAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/manage/{guid}";
        $resourcePath = "manage/{guid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($guid !== null) {
            $path = str_replace(
                "{" . "guid" . "}",
                $this->apiClient->getSerializer()->toPathValue($guid),
                $path
            );
            $resourcePath = str_replace(
                "{" . "guid" . "}",
                $this->apiClient->getSerializer()->toPathValue($guid),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\GetAliasgetResponse',
                '/visaaliasdirectory/v1/manage/{guid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\GetAliasgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\GetAliasgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGetMerchantAlias
     *
     * 
     *
     * @param string $merchantaliasid This attribute is uniquely used by acquirer to identify their merchant or agent. (required)
     * @param string $type Valid type value is &#39;agent&#39;. If type is not provided, default search for merchant alias records only. (optional)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\GetMerchantAliasgetResponse
     */
    public function getGetMerchantAlias($merchantaliasid, $type = null)
    {
        list($response) = $this->getGetMerchantAliasWithHttpInfo($merchantaliasid, $type);
        return $response;
    }

    /**
     * Operation getGetMerchantAliasWithHttpInfo
     *
     * 
     *
     * @param string $merchantaliasid This attribute is uniquely used by acquirer to identify their merchant or agent. (required)
     * @param string $type Valid type value is &#39;agent&#39;. If type is not provided, default search for merchant alias records only. (optional)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\GetMerchantAliasgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGetMerchantAliasWithHttpInfo($merchantaliasid, $type = null)
    {
        // verify the required parameter 'merchantaliasid' is set
        if ($merchantaliasid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchantaliasid when calling getGetMerchantAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/managemerchant";
        $resourcePath = "managemerchant";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($merchantaliasid !== null) {
            $queryParams['merchantaliasid'] = $this->apiClient->getSerializer()->toQueryValue($merchantaliasid);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\GetMerchantAliasgetResponse',
                '/visaaliasdirectory/v1/managemerchant'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\GetMerchantAliasgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\GetMerchantAliasgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGetReport
     *
     * 
     *
     * @param string $reportid This attribute is uniquely generated by Visa Alias directory to identify the report generation request.  This is used to retrieve the alias report together with the page ID.&lt;br&gt;The format is {BID}-{TYPE}-{NUMERIC STRING}, where &lt;b&gt;BID&lt;/b&gt; is the Business Identifier of the client used by Visa, &lt;b&gt;TYPE&lt;/b&gt; can be &#39;CONSUMER&#39;, &#39;MERCHANT&#39; or &#39;AGENT&#39; alias report. (required)
     * @param string $pageid Numeric only. This attribute is used to specify the page number of the report. (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\GetReportgetResponse
     */
    public function getGetReport($reportid, $pageid)
    {
        list($response) = $this->getGetReportWithHttpInfo($reportid, $pageid);
        return $response;
    }

    /**
     * Operation getGetReportWithHttpInfo
     *
     * 
     *
     * @param string $reportid This attribute is uniquely generated by Visa Alias directory to identify the report generation request.  This is used to retrieve the alias report together with the page ID.&lt;br&gt;The format is {BID}-{TYPE}-{NUMERIC STRING}, where &lt;b&gt;BID&lt;/b&gt; is the Business Identifier of the client used by Visa, &lt;b&gt;TYPE&lt;/b&gt; can be &#39;CONSUMER&#39;, &#39;MERCHANT&#39; or &#39;AGENT&#39; alias report. (required)
     * @param string $pageid Numeric only. This attribute is used to specify the page number of the report. (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\GetReportgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGetReportWithHttpInfo($reportid, $pageid)
    {
        // verify the required parameter 'reportid' is set
        if ($reportid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reportid when calling getGetReport');
        }
        // verify the required parameter 'pageid' is set
        if ($pageid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pageid when calling getGetReport');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/managereport";
        $resourcePath = "managereport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($reportid !== null) {
            $queryParams['reportid'] = $this->apiClient->getSerializer()->toQueryValue($reportid);
        }
        // query params
        if ($pageid !== null) {
            $queryParams['pageid'] = $this->apiClient->getSerializer()->toQueryValue($pageid);
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\GetReportgetResponse',
                '/visaaliasdirectory/v1/managereport'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\GetReportgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\GetReportgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postCreateAlias
     *
     * 
     *
     * @param \alias_100\model\CreateAliaspostPayload $create_aliaspost_payload Request body for creating alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\CreateAliaspostResponse
     */
    public function postCreateAlias($create_aliaspost_payload)
    {
        list($response) = $this->postCreateAliasWithHttpInfo($create_aliaspost_payload);
        return $response;
    }

    /**
     * Operation postCreateAliasWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\CreateAliaspostPayload $create_aliaspost_payload Request body for creating alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\CreateAliaspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCreateAliasWithHttpInfo($create_aliaspost_payload)
    {
        // verify the required parameter 'create_aliaspost_payload' is set
        if ($create_aliaspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_aliaspost_payload when calling postCreateAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/manage/createalias";
        $resourcePath = "manage/createalias";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_aliaspost_payload)) {
            $_tempBody = $create_aliaspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\CreateAliaspostResponse',
                '/visaaliasdirectory/v1/manage/createalias'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\CreateAliaspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\CreateAliaspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postCreateMerchantAlias
     *
     * 
     *
     * @param \alias_100\model\CreateMerchantAliaspostPayload $create_merchant_aliaspost_payload Request body for creating merchant or agent alias (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\CreateMerchantAliaspostResponse
     */
    public function postCreateMerchantAlias($create_merchant_aliaspost_payload)
    {
        list($response) = $this->postCreateMerchantAliasWithHttpInfo($create_merchant_aliaspost_payload);
        return $response;
    }

    /**
     * Operation postCreateMerchantAliasWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\CreateMerchantAliaspostPayload $create_merchant_aliaspost_payload Request body for creating merchant or agent alias (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\CreateMerchantAliaspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCreateMerchantAliasWithHttpInfo($create_merchant_aliaspost_payload)
    {
        // verify the required parameter 'create_merchant_aliaspost_payload' is set
        if ($create_merchant_aliaspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_merchant_aliaspost_payload when calling postCreateMerchantAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/managemerchant/createalias";
        $resourcePath = "managemerchant/createalias";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_merchant_aliaspost_payload)) {
            $_tempBody = $create_merchant_aliaspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\CreateMerchantAliaspostResponse',
                '/visaaliasdirectory/v1/managemerchant/createalias'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\CreateMerchantAliaspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\CreateMerchantAliaspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postDeleteAlias
     *
     * 
     *
     * @param \alias_100\model\DeleteAliaspostPayload $delete_aliaspost_payload Request body for deleting an alias (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\DeleteAliaspostResponse
     */
    public function postDeleteAlias($delete_aliaspost_payload)
    {
        list($response) = $this->postDeleteAliasWithHttpInfo($delete_aliaspost_payload);
        return $response;
    }

    /**
     * Operation postDeleteAliasWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\DeleteAliaspostPayload $delete_aliaspost_payload Request body for deleting an alias (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\DeleteAliaspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDeleteAliasWithHttpInfo($delete_aliaspost_payload)
    {
        // verify the required parameter 'delete_aliaspost_payload' is set
        if ($delete_aliaspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $delete_aliaspost_payload when calling postDeleteAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/manage/deletealias";
        $resourcePath = "manage/deletealias";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($delete_aliaspost_payload)) {
            $_tempBody = $delete_aliaspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\DeleteAliaspostResponse',
                '/visaaliasdirectory/v1/manage/deletealias'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\DeleteAliaspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\DeleteAliaspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postDeleteMerchantAlias
     *
     * 
     *
     * @param \alias_100\model\DeleteMerchantAliaspostPayload $delete_merchant_aliaspost_payload Request body for deleting a merchant or agent alias (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\DeleteMerchantAliaspostResponse
     */
    public function postDeleteMerchantAlias($delete_merchant_aliaspost_payload)
    {
        list($response) = $this->postDeleteMerchantAliasWithHttpInfo($delete_merchant_aliaspost_payload);
        return $response;
    }

    /**
     * Operation postDeleteMerchantAliasWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\DeleteMerchantAliaspostPayload $delete_merchant_aliaspost_payload Request body for deleting a merchant or agent alias (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\DeleteMerchantAliaspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDeleteMerchantAliasWithHttpInfo($delete_merchant_aliaspost_payload)
    {
        // verify the required parameter 'delete_merchant_aliaspost_payload' is set
        if ($delete_merchant_aliaspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $delete_merchant_aliaspost_payload when calling postDeleteMerchantAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/managemerchant/deletealias";
        $resourcePath = "managemerchant/deletealias";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($delete_merchant_aliaspost_payload)) {
            $_tempBody = $delete_merchant_aliaspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\DeleteMerchantAliaspostResponse',
                '/visaaliasdirectory/v1/managemerchant/deletealias'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\DeleteMerchantAliaspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\DeleteMerchantAliaspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postGenerateReport
     *
     * 
     *
     * @param \alias_100\model\GenerateReportpostPayload $generate_reportpost_payload Request body for generating a report (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\GenerateReportpostResponse
     */
    public function postGenerateReport($generate_reportpost_payload)
    {
        list($response) = $this->postGenerateReportWithHttpInfo($generate_reportpost_payload);
        return $response;
    }

    /**
     * Operation postGenerateReportWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\GenerateReportpostPayload $generate_reportpost_payload Request body for generating a report (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\GenerateReportpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGenerateReportWithHttpInfo($generate_reportpost_payload)
    {
        // verify the required parameter 'generate_reportpost_payload' is set
        if ($generate_reportpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $generate_reportpost_payload when calling postGenerateReport');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/managereport/generate";
        $resourcePath = "managereport/generate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($generate_reportpost_payload)) {
            $_tempBody = $generate_reportpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\GenerateReportpostResponse',
                '/visaaliasdirectory/v1/managereport/generate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\GenerateReportpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\GenerateReportpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postResolve
     *
     * 
     *
     * @param \alias_100\model\ResolvepostPayload $resolvepost_payload Request body for resolve alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\ResolvepostResponse
     */
    public function postResolve($resolvepost_payload)
    {
        list($response) = $this->postResolveWithHttpInfo($resolvepost_payload);
        return $response;
    }

    /**
     * Operation postResolveWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\ResolvepostPayload $resolvepost_payload Request body for resolve alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\ResolvepostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postResolveWithHttpInfo($resolvepost_payload)
    {
        // verify the required parameter 'resolvepost_payload' is set
        if ($resolvepost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resolvepost_payload when calling postResolve');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/resolve";
        $resourcePath = "resolve";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($resolvepost_payload)) {
            $_tempBody = $resolvepost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\ResolvepostResponse',
                '/visaaliasdirectory/v1/resolve'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\ResolvepostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\ResolvepostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUpdateAlias
     *
     * 
     *
     * @param \alias_100\model\UpdateAliaspostPayload $update_aliaspost_payload Request body for updating alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\UpdateAliaspostResponse
     */
    public function postUpdateAlias($update_aliaspost_payload)
    {
        list($response) = $this->postUpdateAliasWithHttpInfo($update_aliaspost_payload);
        return $response;
    }

    /**
     * Operation postUpdateAliasWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\UpdateAliaspostPayload $update_aliaspost_payload Request body for updating alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\UpdateAliaspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUpdateAliasWithHttpInfo($update_aliaspost_payload)
    {
        // verify the required parameter 'update_aliaspost_payload' is set
        if ($update_aliaspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_aliaspost_payload when calling postUpdateAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/manage/updatealias";
        $resourcePath = "manage/updatealias";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_aliaspost_payload)) {
            $_tempBody = $update_aliaspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\UpdateAliaspostResponse',
                '/visaaliasdirectory/v1/manage/updatealias'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\UpdateAliaspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\UpdateAliaspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUpdateMerchantAlias
     *
     * 
     *
     * @param \alias_100\model\UpdateMerchantAliaspostPayload $update_merchant_aliaspost_payload Request body for updating merchant or agent alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return \alias_100\model\UpdateMerchantAliaspostResponse
     */
    public function postUpdateMerchantAlias($update_merchant_aliaspost_payload)
    {
        list($response) = $this->postUpdateMerchantAliasWithHttpInfo($update_merchant_aliaspost_payload);
        return $response;
    }

    /**
     * Operation postUpdateMerchantAliasWithHttpInfo
     *
     * 
     *
     * @param \alias_100\model\UpdateMerchantAliaspostPayload $update_merchant_aliaspost_payload Request body for updating merchant or agent alias API (required)
     * @throws \alias_100\ApiException on non-2xx response
     * @return array of \alias_100\model\UpdateMerchantAliaspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUpdateMerchantAliasWithHttpInfo($update_merchant_aliaspost_payload)
    {
        // verify the required parameter 'update_merchant_aliaspost_payload' is set
        if ($update_merchant_aliaspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_merchant_aliaspost_payload when calling postUpdateMerchantAlias');
        }
        // parse inputs
        $path = "/visaaliasdirectory/v1/managemerchant/updatealias";
        $resourcePath = "managemerchant/updatealias";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_merchant_aliaspost_payload)) {
            $_tempBody = $update_merchant_aliaspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\alias_100\model\UpdateMerchantAliaspostResponse',
                '/visaaliasdirectory/v1/managemerchant/updatealias'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\alias_100\model\UpdateMerchantAliaspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\alias_100\model\UpdateMerchantAliaspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/