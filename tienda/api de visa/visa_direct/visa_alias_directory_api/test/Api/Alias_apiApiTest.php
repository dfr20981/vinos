<?php
/**
 * Alias_apiApiTest
 * PHP version 5
 *
 * @category Class
 * @package  alias_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visa Alias Directory API
 *
 * Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace alias_100\apitest;

require_once (__DIR__.'/../../globalConfig.php');

use \globalConfig\GlobalConfig;

use \alias_100\Configuration;
use \alias_100\api\Alias_apiApi;

/**
 * Alias_apiApiTest Class Doc Comment
 *
 * @category Class
 * @package  alias_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Alias_apiApiTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

        $gc=new GlobalConfig();
        $config = Configuration::getDefaultConfiguration();

        // Configure HTTP basic authorization
        $config->setUsername($gc->getUserName());
        $config->setPassword($gc->getPassword());
        $config->setCertificatePath($gc->getCertificatePath());
        $config->setPrivateKey($gc->getPrivateKeyPath());
        $config->setCaCertPath($gc->getCaCertPath());

        // Configure API key authorization:
        $config->setSharedSecret($gc->getSharedSecret());
        $config->setApiKey("apikey", $gc->getApiKey());

        // Configure proxy settings
        $config->setCurlProxyHost($gc->getProxyHost());
        $config->setCurlProxyPort($gc->getProxyPort());
        $config->setCurlProxyUser($gc->getProxyUser());
        $config->setCurlProxyPassword($gc->getProxyPassword());

        echo '\n.................Testing Alias_apiApi...........................\n';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }
    public function transformPayload($oldPayload){
        $payload = $this->editLocalTime($oldPayload);
        $payload = $this->addRandom($payload);
        $payload= json_decode($payload,true);
        return $payload;
    }
    public function editLocalTime($oldPayload){

        date_default_timezone_set("America/Los_Angeles");
        $timestamp = date("Y-m-d\TH:i:s");
        $pattern = '/"localTransactionDateTime":".{19}"/i';
        $replacement = '"localTransactionDateTime": "'.$timestamp.'"';
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $timestamp = date("mdHis");
        $pattern = '/"dateTimeLocal":".{10}"/i';
        $replacement = '"dateTimeLocal": "'.$timestamp.'"';
        return preg_replace($pattern, $replacement, $oldPayload);

    }
    public function addRandom($oldPayload){
        $pattern = '/random/i';
        $replacement = $this->generateRandomString(5);
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $pattern = '/random_integer/i';
        return preg_replace($pattern, '1', $oldPayload);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }
    function generateRandomString($length = 10)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     * Test case for getGetAlias
     *
     * .
     *
     */
    public function testGetGetAlias()
    {
        echo "\nMaking a call to GetGetAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->GetGetAlias($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getGetMerchantAlias
     *
     * .
     *
     */
    public function testGetGetMerchantAlias()
    {
        echo "\nMaking a call to GetGetMerchantAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->GetGetMerchantAlias($this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getGetReport
     *
     * .
     *
     */
    public function testGetGetReport()
    {
        echo "\nMaking a call to GetGetReport()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->GetGetReport($this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postCreateAlias
     *
     * .
     *
     */
    public function testPostCreateAlias()
    {
        echo "\nMaking a call to PostCreateAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostCreateAlias($this->transformPayload('{"recipientMiddleName":"M","city":"Nairobi","recipientFirstName":"Jamie","address1":"Street 1","address2":"Region 1","consentDateTime":"2018-03-01 01:02:03","recipientPrimaryAccountNumber":"4895140000066666","alias":"254711333888","cardType":"Visa Classic","recipientLastName":"Bakari","country":"KE","postalCode":"00111","issuerName":"Test Bank 1","guid":"574f4b6a4c2b70472f306f300099515a789092348832455975343637a4d3170","aliasType":"01"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postCreateMerchantAlias
     *
     * .
     *
     */
    public function testPostCreateMerchantAlias()
    {
        echo "\nMaking a call to PostCreateMerchantAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostCreateMerchantAlias($this->transformPayload('{"city":"Nairobi","merchantCategoryCode":"6012","payloadFormatIndicator":"01","transactionCurrencyCode":"404","pointOfInitiationMethod":"11","recipientName":"Bob's Ice Cream","country":"KE","aliasId":"888000","merchantId":"4761100090708271"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postDeleteAlias
     *
     * .
     *
     */
    public function testPostDeleteAlias()
    {
        echo "\nMaking a call to PostDeleteAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostDeleteAlias($this->transformPayload('{"alias":"254711333888","guid":"574f4b6a4c2b70472f306f300099515a789092348832455975343637a4d3170"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postDeleteMerchantAlias
     *
     * .
     *
     */
    public function testPostDeleteMerchantAlias()
    {
        echo "\nMaking a call to PostDeleteMerchantAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostDeleteMerchantAlias($this->transformPayload('{"aliasId":"888000","merchantId":"4761100090708271"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postGenerateReport
     *
     * .
     *
     */
    public function testPostGenerateReport()
    {
        echo "\nMaking a call to PostGenerateReport()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostGenerateReport($this->transformPayload('{"status":"ACTIVE,DISABLED","type":"CONSUMER","limit":"100","reportStartDate":"2018-09-01"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postResolve
     *
     * .
     *
     */
    public function testPostResolve()
    {
        echo "\nMaking a call to PostResolve()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostResolve($this->transformPayload('{"alias":"254711001987","businessApplicationId":"PP"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postUpdateAlias
     *
     * .
     *
     */
    public function testPostUpdateAlias()
    {
        echo "\nMaking a call to PostUpdateAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostUpdateAlias($this->transformPayload('{"consentDateTime":"2018-02-01 12:20:22","guid":"574f4b6a4c2b70472f306f300099515a789092348832455975343637a4d3170"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postUpdateMerchantAlias
     *
     * .
     *
     */
    public function testPostUpdateMerchantAlias()
    {
        echo "\nMaking a call to PostUpdateMerchantAlias()\n";

        $api_instance = new Alias_apiApi;
        $result = $api_instance->PostUpdateMerchantAlias($this->transformPayload('{"city":"Nairobi","merchantCategoryCode":"6012","payloadFormatIndicator":"01","transactionCurrencyCode":"404","recipientName":"Bob's Ice Cream","email":"bob@example.com","pointOfInitiationMethod":"11","tipConvenienceFeeIndicator":"01","country":"KE","aliasId":"888000","merchantId":"4761100090708271"}'));

        $this->assertNotNull($result);

    }

}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/