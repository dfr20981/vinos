<?php
/**
 * MvisaApiTest
 * PHP version 5
 *
 * @category Class
 * @package  mvs_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * mVisa API
 *
 * mVisa is a simple, secure and fast way to pay and be paid using mobile phones. mVisa enables a range of payment use cases and is technology agnostic-leveraging evolving POS environment such as QR codes and works on both smart or feature phones.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace mvs_100\apitest;

require_once (__DIR__.'/../../globalConfig.php');

use \globalConfig\GlobalConfig;

use \mvs_100\Configuration;
use \mvs_100\api\MvisaApi;

/**
 * MvisaApiTest Class Doc Comment
 *
 * @category Class
 * @package  mvs_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MvisaApiTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

        $gc=new GlobalConfig();
        $config = Configuration::getDefaultConfiguration();

        // Configure HTTP basic authorization
        $config->setUsername($gc->getUserName());
        $config->setPassword($gc->getPassword());
        $config->setCertificatePath($gc->getCertificatePath());
        $config->setPrivateKey($gc->getPrivateKeyPath());
        $config->setCaCertPath($gc->getCaCertPath());

        // Configure API key authorization:
        $config->setSharedSecret($gc->getSharedSecret());
        $config->setApiKey("apikey", $gc->getApiKey());

        // Configure proxy settings
        $config->setCurlProxyHost($gc->getProxyHost());
        $config->setCurlProxyPort($gc->getProxyPort());
        $config->setCurlProxyUser($gc->getProxyUser());
        $config->setCurlProxyPassword($gc->getProxyPassword());

        echo '\n.................Testing MvisaApi...........................\n';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }
    public function transformPayload($oldPayload){
        $payload = $this->editLocalTime($oldPayload);
        $payload = $this->addRandom($payload);
        $payload= json_decode($payload,true);
        return $payload;
    }
    public function editLocalTime($oldPayload){

        date_default_timezone_set("America/Los_Angeles");
        $timestamp = date("Y-m-d\TH:i:s");
        $pattern = '/"localTransactionDateTime":".{19}"/i';
        $replacement = '"localTransactionDateTime": "'.$timestamp.'"';
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $timestamp = date("mdHis");
        $pattern = '/"dateTimeLocal":".{10}"/i';
        $replacement = '"dateTimeLocal": "'.$timestamp.'"';
        return preg_replace($pattern, $replacement, $oldPayload);

    }
    public function addRandom($oldPayload){
        $pattern = '/random/i';
        $replacement = $this->generateRandomString(5);
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $pattern = '/random_integer/i';
        return preg_replace($pattern, '1', $oldPayload);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }
    function generateRandomString($length = 10)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     * Test case for getcashInPushPaymentsGet
     *
     * .
     *
     */
    public function testGetcashInPushPaymentsGet()
    {
        echo "\nMaking a call to GetcashInPushPaymentsGet()\n";

        $api_instance = new MvisaApi;
        $result = $api_instance->GetcashInPushPaymentsGet($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getcashOutPaymentsGet
     *
     * .
     *
     */
    public function testGetcashOutPaymentsGet()
    {
        echo "\nMaking a call to GetcashOutPaymentsGet()\n";

        $api_instance = new MvisaApi;
        $result = $api_instance->GetcashOutPaymentsGet($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getmerchantPushPaymentGet
     *
     * .
     *
     */
    public function testGetmerchantPushPaymentGet()
    {
        echo "\nMaking a call to GetmerchantPushPaymentGet()\n";

        $api_instance = new MvisaApi;
        $result = $api_instance->GetmerchantPushPaymentGet($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postcashInPushPayments
     *
     * .
     *
     */
    public function testPostcashInPushPayments()
    {
        echo "\nMaking a call to PostcashInPushPayments()\n";

        $api_instance = new MvisaApi;
        $result = $api_instance->PostcashInPushPayments($this->transformPayload('{"senderAccountNumber":"4541237895236","localTransactionDateTime":"2018-05-30T09:29:29","businessApplicationId":"CI","merchantCategoryCode":"6012","transactionCurrencyCode":"840","acquiringBin":"400171","acquirerCountryCode":"643","retrievalReferenceNumber":"430000367618","senderReference":"1234","cardAcceptor":{"idCode":"ID-Code123","name":"Test Merchant","address":{"country":"IN","city":"Bangalore"}},"recipientPrimaryAccountNumber":"4123640062698797","systemsTraceAuditNumber":"313042","amount":"124.05","senderName":"Mohammed Qasim"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postcashOutPushPaymentsPost
     *
     * .
     *
     */
    public function testPostcashOutPushPaymentsPost()
    {
        echo "\nMaking a call to PostcashOutPushPaymentsPost()\n";

        $api_instance = new MvisaApi;
        $result = $api_instance->PostcashOutPushPaymentsPost($this->transformPayload('{"senderAccountNumber":"456789123456","localTransactionDateTime":"2018-05-30T09:51:18","businessApplicationId":"CO","merchantCategoryCode":"6012","transactionCurrencyCode":"356","acquiringBin":"400171","acquirerCountryCode":"643","retrievalReferenceNumber":"412123412878","senderReference":"REFNUM123","cardAcceptor":{"idCode":"CA-IDCode-77765","name":"Test merchant","address":{"country":"IN","city":"merchant city"}},"recipientPrimaryAccountNumber":"4123640062698797","systemsTraceAuditNumber":"567889","amount":"124.05","senderName":"Mohammed Qasim"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postmerchantPushPaymentsPost
     *
     * .
     *
     */
    public function testPostmerchantPushPaymentsPost()
    {
        echo "\nMaking a call to PostmerchantPushPaymentsPost()\n";

        $api_instance = new MvisaApi;
        $result = $api_instance->PostmerchantPushPaymentsPost($this->transformPayload('{"senderAccountNumber":"4027290077881587","localTransactionDateTime":"2018-05-30T05:36:14","purchaseIdentifier":{"type":"0","referenceNumber":"REF_123456789123456789123"},"merchantCategoryCode":"5812","feeProgramIndicator":"123","transactionCurrencyCode":"356","acquiringBin":"408972","acquirerCountryCode":"356","retrievalReferenceNumber":"412770451035","senderReference":"","secondaryId":"123TEST","cardAcceptor":{"idCode":"CA-IDCode-77765","name":"Visa Inc. USA-Foster City","address":{"country":"IN","city":"KOLKATA"}},"recipientPrimaryAccountNumber":"4123640062698797","systemsTraceAuditNumber":"451035","businessApplicationId":"MP","amount":"124.05","senderName":"Jasper"}'));

        $this->assertNotNull($result);

    }

}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/