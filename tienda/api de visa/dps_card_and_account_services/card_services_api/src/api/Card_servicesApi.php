<?php
/**
 * Card_servicesApi
 * PHP version 5
 *
 * @category Class
 * @package  dcas_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Card Services API
 *
 * Manage cardholder’s card and account information, notification settings, and balance information.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace dcas_101\api;

use \dcas_101\ApiClient;
use \dcas_101\ApiException;
use \dcas_101\Configuration;
use \dcas_101\ObjectSerializer;

/**
 * Card_servicesApi Class Doc Comment
 *
 * @category Class
 * @package  dcas_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Card_servicesApi
{
    /**
     * API Client
     *
     * @var \dcas_101\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \dcas_101\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\dcas_101\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \dcas_101\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \dcas_101\ApiClient $apiClient set the API client
     *
     * @return Card_servicesApi
     */
    public function setApiClient(\dcas_101\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getcardStatus
     *
     * 
     *
     * @param string $card_id CardId unique Indentifier (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\CardStatusgetResponse
     */
    public function getcardStatus($card_id)
    {
        list($response) = $this->getcardStatusWithHttpInfo($card_id);
        return $response;
    }

    /**
     * Operation getcardStatusWithHttpInfo
     *
     * 
     *
     * @param string $card_id CardId unique Indentifier (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\CardStatusgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getcardStatusWithHttpInfo($card_id)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getcardStatus');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/cardstatus";
        $resourcePath = "cards/{cardId}/cardstatus";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\CardStatusgetResponse',
                '/dcas/cardservices/v1/cards/{cardId}/cardstatus'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\CardStatusgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\CardStatusgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getgetAccountDetails
     *
     * 
     *
     * @param string $look_up_balances Flag for looking up account balances (required)
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\GetAccountDetailsgetResponse
     */
    public function getgetAccountDetails($look_up_balances, $card_id)
    {
        list($response) = $this->getgetAccountDetailsWithHttpInfo($look_up_balances, $card_id);
        return $response;
    }

    /**
     * Operation getgetAccountDetailsWithHttpInfo
     *
     * 
     *
     * @param string $look_up_balances Flag for looking up account balances (required)
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\GetAccountDetailsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getgetAccountDetailsWithHttpInfo($look_up_balances, $card_id)
    {
        // verify the required parameter 'look_up_balances' is set
        if ($look_up_balances === null) {
            throw new \InvalidArgumentException('Missing the required parameter $look_up_balances when calling getgetAccountDetails');
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getgetAccountDetails');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/accounts?lookUpBalances&#x3D;{lookUpBalances}";
        $resourcePath = "cards/{cardId}/accounts?lookUpBalances&#x3D;{lookUpBalances}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($look_up_balances !== null) {
            $queryParams['lookUpBalances'] = $this->apiClient->getSerializer()->toQueryValue($look_up_balances);
        }
        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\GetAccountDetailsgetResponse',
                '/dcas/cardservices/v1/cards/{cardId}/accounts?lookUpBalances&#x3D;{lookUpBalances}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\GetAccountDetailsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\GetAccountDetailsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getgetCardByAlias
     *
     * 
     *
     * @param string $look_up_balances Flag for looking up account balances (required)
     * @param string $card_id Card alias Id unique Indentifier (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\GetCardByAliasgetResponse
     */
    public function getgetCardByAlias($look_up_balances, $card_id)
    {
        list($response) = $this->getgetCardByAliasWithHttpInfo($look_up_balances, $card_id);
        return $response;
    }

    /**
     * Operation getgetCardByAliasWithHttpInfo
     *
     * 
     *
     * @param string $look_up_balances Flag for looking up account balances (required)
     * @param string $card_id Card alias Id unique Indentifier (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\GetCardByAliasgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getgetCardByAliasWithHttpInfo($look_up_balances, $card_id)
    {
        // verify the required parameter 'look_up_balances' is set
        if ($look_up_balances === null) {
            throw new \InvalidArgumentException('Missing the required parameter $look_up_balances when calling getgetCardByAlias');
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getgetCardByAlias');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}";
        $resourcePath = "cards/{cardId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($look_up_balances !== null) {
            $queryParams['lookUpBalances'] = $this->apiClient->getSerializer()->toQueryValue($look_up_balances);
        }
        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\GetCardByAliasgetResponse',
                '/dcas/cardservices/v1/cards/{cardId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\GetCardByAliasgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\GetCardByAliasgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getgetCardholderDetails
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\GetCardholderDetailsgetResponse
     */
    public function getgetCardholderDetails($card_id)
    {
        list($response) = $this->getgetCardholderDetailsWithHttpInfo($card_id);
        return $response;
    }

    /**
     * Operation getgetCardholderDetailsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\GetCardholderDetailsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getgetCardholderDetailsWithHttpInfo($card_id)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getgetCardholderDetails');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/cardholderdetails";
        $resourcePath = "cards/{cardId}/cardholderdetails";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\GetCardholderDetailsgetResponse',
                '/dcas/cardservices/v1/cards/{cardId}/cardholderdetails'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\GetCardholderDetailsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\GetCardholderDetailsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getgetNotificationSettings
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $push_id Unique indentifier assigned to the push device (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\GetNotificationSettingsgetResponse
     */
    public function getgetNotificationSettings($card_id, $push_id = null)
    {
        list($response) = $this->getgetNotificationSettingsWithHttpInfo($card_id, $push_id);
        return $response;
    }

    /**
     * Operation getgetNotificationSettingsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $push_id Unique indentifier assigned to the push device (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\GetNotificationSettingsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getgetNotificationSettingsWithHttpInfo($card_id, $push_id = null)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getgetNotificationSettings');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/notifications";
        $resourcePath = "cards/{cardId}/notifications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($push_id !== null) {
            $queryParams['pushId'] = $this->apiClient->getSerializer()->toQueryValue($push_id);
        }
        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\GetNotificationSettingsgetResponse',
                '/dcas/cardservices/v1/cards/{cardId}/notifications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\GetNotificationSettingsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\GetNotificationSettingsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getgetSingleAccountDetails
     *
     * 
     *
     * @param string $look_up_balances Flag for looking up account balances (required)
     * @param string $account_alias_id Unique indentifier assigned to an account (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\GetSingleAccountDetailsgetResponse
     */
    public function getgetSingleAccountDetails($look_up_balances, $account_alias_id)
    {
        list($response) = $this->getgetSingleAccountDetailsWithHttpInfo($look_up_balances, $account_alias_id);
        return $response;
    }

    /**
     * Operation getgetSingleAccountDetailsWithHttpInfo
     *
     * 
     *
     * @param string $look_up_balances Flag for looking up account balances (required)
     * @param string $account_alias_id Unique indentifier assigned to an account (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\GetSingleAccountDetailsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getgetSingleAccountDetailsWithHttpInfo($look_up_balances, $account_alias_id)
    {
        // verify the required parameter 'look_up_balances' is set
        if ($look_up_balances === null) {
            throw new \InvalidArgumentException('Missing the required parameter $look_up_balances when calling getgetSingleAccountDetails');
        }
        // verify the required parameter 'account_alias_id' is set
        if ($account_alias_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_alias_id when calling getgetSingleAccountDetails');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/accounts/{accountAliasId}?lookUpBalances&#x3D;{lookUpBalances}";
        $resourcePath = "accounts/{accountAliasId}?lookUpBalances&#x3D;{lookUpBalances}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($look_up_balances !== null) {
            $queryParams['lookUpBalances'] = $this->apiClient->getSerializer()->toQueryValue($look_up_balances);
        }
        // path params
        if ($account_alias_id !== null) {
            $path = str_replace(
                "{" . "accountAliasId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_alias_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "accountAliasId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_alias_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\GetSingleAccountDetailsgetResponse',
                '/dcas/cardservices/v1/accounts/{accountAliasId}?lookUpBalances&#x3D;{lookUpBalances}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\GetSingleAccountDetailsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\GetSingleAccountDetailsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getgetTransactionHistory
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $index_row Unique indentifier assigned to the PAN (optional)
     * @param string $rows_on_page Unique indentifier assigned to the PAN (optional)
     * @param string $account_alias_id Unique indentifier assigned to the PAN (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\GetTransactionHistorygetResponse
     */
    public function getgetTransactionHistory($card_id, $index_row = null, $rows_on_page = null, $account_alias_id = null)
    {
        list($response) = $this->getgetTransactionHistoryWithHttpInfo($card_id, $index_row, $rows_on_page, $account_alias_id);
        return $response;
    }

    /**
     * Operation getgetTransactionHistoryWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $index_row Unique indentifier assigned to the PAN (optional)
     * @param string $rows_on_page Unique indentifier assigned to the PAN (optional)
     * @param string $account_alias_id Unique indentifier assigned to the PAN (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\GetTransactionHistorygetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getgetTransactionHistoryWithHttpInfo($card_id, $index_row = null, $rows_on_page = null, $account_alias_id = null)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getgetTransactionHistory');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/transactions";
        $resourcePath = "cards/{cardId}/transactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($index_row !== null) {
            $queryParams['indexRow'] = $this->apiClient->getSerializer()->toQueryValue($index_row);
        }
        // query params
        if ($rows_on_page !== null) {
            $queryParams['rowsOnPage'] = $this->apiClient->getSerializer()->toQueryValue($rows_on_page);
        }
        // query params
        if ($account_alias_id !== null) {
            $queryParams['accountAliasId'] = $this->apiClient->getSerializer()->toQueryValue($account_alias_id);
        }
        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\GetTransactionHistorygetResponse',
                '/dcas/cardservices/v1/cards/{cardId}/transactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\GetTransactionHistorygetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\GetTransactionHistorygetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getnotificationDetails
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\NotificationDetailsgetResponse
     */
    public function getnotificationDetails($card_id)
    {
        list($response) = $this->getnotificationDetailsWithHttpInfo($card_id);
        return $response;
    }

    /**
     * Operation getnotificationDetailsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\NotificationDetailsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getnotificationDetailsWithHttpInfo($card_id)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getnotificationDetails');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/notifications/settings";
        $resourcePath = "cards/{cardId}/notifications/settings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\NotificationDetailsgetResponse',
                '/dcas/cardservices/v1/cards/{cardId}/notifications/settings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\NotificationDetailsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\NotificationDetailsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getnotificationSubscriptions
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $push_id Unique indentifier assigned to a push enabled device (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\NotificationSubscriptionsgetResponse
     */
    public function getnotificationSubscriptions($card_id, $push_id = null)
    {
        list($response) = $this->getnotificationSubscriptionsWithHttpInfo($card_id, $push_id);
        return $response;
    }

    /**
     * Operation getnotificationSubscriptionsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $push_id Unique indentifier assigned to a push enabled device (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\NotificationSubscriptionsgetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getnotificationSubscriptionsWithHttpInfo($card_id, $push_id = null)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling getnotificationSubscriptions');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/notifications/subscriptions";
        $resourcePath = "cards/{cardId}/notifications/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($push_id !== null) {
            $queryParams['pushId'] = $this->apiClient->getSerializer()->toQueryValue($push_id);
        }
        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\NotificationSubscriptionsgetResponse',
                '/dcas/cardservices/v1/cards/{cardId}/notifications/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\NotificationSubscriptionsgetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\NotificationSubscriptionsgetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postcardActivation
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $app_id VDP Application ID (required)
     * @param \dcas_101\model\CardActivationpostPayload $card_activationpost_payload Activation request with all the card details; expiration and CVV2 being required. (required)
     * @param string $sponsor_id Issuer Sponsor ID (optional)
     * @param string $correlation_id Correlation ID (optional) (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\CardActivationpostResponse
     */
    public function postcardActivation($card_id, $app_id, $card_activationpost_payload, $sponsor_id = null, $correlation_id = null)
    {
        list($response) = $this->postcardActivationWithHttpInfo($card_id, $app_id, $card_activationpost_payload, $sponsor_id, $correlation_id);
        return $response;
    }

    /**
     * Operation postcardActivationWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param string $app_id VDP Application ID (required)
     * @param \dcas_101\model\CardActivationpostPayload $card_activationpost_payload Activation request with all the card details; expiration and CVV2 being required. (required)
     * @param string $sponsor_id Issuer Sponsor ID (optional)
     * @param string $correlation_id Correlation ID (optional) (optional)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\CardActivationpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postcardActivationWithHttpInfo($card_id, $app_id, $card_activationpost_payload, $sponsor_id = null, $correlation_id = null)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling postcardActivation');
        }
        // verify the required parameter 'app_id' is set
        if ($app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $app_id when calling postcardActivation');
        }
        // verify the required parameter 'card_activationpost_payload' is set
        if ($card_activationpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_activationpost_payload when calling postcardActivation');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cardservices/v1/cards/{cardId}/cardactivation";
        $resourcePath = "cardservices/v1/cards/{cardId}/cardactivation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($sponsor_id !== null) {
            $headerParams['Sponsor-ID'] = $this->apiClient->getSerializer()->toHeaderValue($sponsor_id);
        }
        // header params
        if ($app_id !== null) {
            $headerParams['App-ID'] = $this->apiClient->getSerializer()->toHeaderValue($app_id);
        }
        // header params
        if ($correlation_id !== null) {
            $headerParams['Correlation-ID'] = $this->apiClient->getSerializer()->toHeaderValue($correlation_id);
        }
        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($card_activationpost_payload)) {
            $_tempBody = $card_activationpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\CardActivationpostResponse',
                '/dcas/cardservices/v1/cardservices/v1/cards/{cardId}/cardactivation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\CardActivationpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\CardActivationpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postcardVerification
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\CardVerificationpostPayload $card_verificationpost_payload Verification Code (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\CardVerificationpostResponse
     */
    public function postcardVerification($card_id, $card_verificationpost_payload)
    {
        list($response) = $this->postcardVerificationWithHttpInfo($card_id, $card_verificationpost_payload);
        return $response;
    }

    /**
     * Operation postcardVerificationWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\CardVerificationpostPayload $card_verificationpost_payload Verification Code (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\CardVerificationpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postcardVerificationWithHttpInfo($card_id, $card_verificationpost_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling postcardVerification');
        }
        // verify the required parameter 'card_verificationpost_payload' is set
        if ($card_verificationpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_verificationpost_payload when calling postcardVerification');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/cardverification";
        $resourcePath = "cards/{cardId}/cardverification";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($card_verificationpost_payload)) {
            $_tempBody = $card_verificationpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\CardVerificationpostResponse',
                '/dcas/cardservices/v1/cards/{cardId}/cardverification'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\CardVerificationpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\CardVerificationpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postcreateCardIdentifiers
     *
     * 
     *
     * @param \dcas_101\model\CreateCardIdentifierspostPayload $create_card_identifierspost_payload An array containing PANs, expiration Dates and show balances flags (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\CreateCardIdentifierspostResponse
     */
    public function postcreateCardIdentifiers($create_card_identifierspost_payload)
    {
        list($response) = $this->postcreateCardIdentifiersWithHttpInfo($create_card_identifierspost_payload);
        return $response;
    }

    /**
     * Operation postcreateCardIdentifiersWithHttpInfo
     *
     * 
     *
     * @param \dcas_101\model\CreateCardIdentifierspostPayload $create_card_identifierspost_payload An array containing PANs, expiration Dates and show balances flags (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\CreateCardIdentifierspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postcreateCardIdentifiersWithHttpInfo($create_card_identifierspost_payload)
    {
        // verify the required parameter 'create_card_identifierspost_payload' is set
        if ($create_card_identifierspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_card_identifierspost_payload when calling postcreateCardIdentifiers');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards";
        $resourcePath = "cards";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_card_identifierspost_payload)) {
            $_tempBody = $create_card_identifierspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\CreateCardIdentifierspostResponse',
                '/dcas/cardservices/v1/cards'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\CreateCardIdentifierspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\CreateCardIdentifierspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postgetListOfFundTransferAccounts
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\GetListOfFundTransferAccountspostPayload $get_list_of_fund_transfer_accountspost_payload  (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\GetListOfFundTransferAccountspostResponse
     */
    public function postgetListOfFundTransferAccounts($card_id, $get_list_of_fund_transfer_accountspost_payload)
    {
        list($response) = $this->postgetListOfFundTransferAccountsWithHttpInfo($card_id, $get_list_of_fund_transfer_accountspost_payload);
        return $response;
    }

    /**
     * Operation postgetListOfFundTransferAccountsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\GetListOfFundTransferAccountspostPayload $get_list_of_fund_transfer_accountspost_payload  (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\GetListOfFundTransferAccountspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postgetListOfFundTransferAccountsWithHttpInfo($card_id, $get_list_of_fund_transfer_accountspost_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling postgetListOfFundTransferAccounts');
        }
        // verify the required parameter 'get_list_of_fund_transfer_accountspost_payload' is set
        if ($get_list_of_fund_transfer_accountspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $get_list_of_fund_transfer_accountspost_payload when calling postgetListOfFundTransferAccounts');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/fundstransfers/requirementsinquiry";
        $resourcePath = "cards/{cardId}/fundstransfers/requirementsinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($get_list_of_fund_transfer_accountspost_payload)) {
            $_tempBody = $get_list_of_fund_transfer_accountspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\GetListOfFundTransferAccountspostResponse',
                '/dcas/cardservices/v1/cards/{cardId}/fundstransfers/requirementsinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\GetListOfFundTransferAccountspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\GetListOfFundTransferAccountspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postloadFundsToCard
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\LoadFundsToCardpostPayload $load_funds_to_cardpost_payload Card Load Request (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\LoadFundsToCardpostResponse
     */
    public function postloadFundsToCard($card_id, $load_funds_to_cardpost_payload)
    {
        list($response) = $this->postloadFundsToCardWithHttpInfo($card_id, $load_funds_to_cardpost_payload);
        return $response;
    }

    /**
     * Operation postloadFundsToCardWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\LoadFundsToCardpostPayload $load_funds_to_cardpost_payload Card Load Request (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\LoadFundsToCardpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postloadFundsToCardWithHttpInfo($card_id, $load_funds_to_cardpost_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling postloadFundsToCard');
        }
        // verify the required parameter 'load_funds_to_cardpost_payload' is set
        if ($load_funds_to_cardpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $load_funds_to_cardpost_payload when calling postloadFundsToCard');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/cardloads";
        $resourcePath = "cards/{cardId}/cardloads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($load_funds_to_cardpost_payload)) {
            $_tempBody = $load_funds_to_cardpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\LoadFundsToCardpostResponse',
                '/dcas/cardservices/v1/cards/{cardId}/cardloads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\LoadFundsToCardpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\LoadFundsToCardpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postretrieveRequirementsToLoadFunds
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\RetrieveRequirementsToLoadFundspostPayload $retrieve_requirements_to_load_fundspost_payload Funding Requirements Request (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\RetrieveRequirementsToLoadFundspostResponse
     */
    public function postretrieveRequirementsToLoadFunds($card_id, $retrieve_requirements_to_load_fundspost_payload)
    {
        list($response) = $this->postretrieveRequirementsToLoadFundsWithHttpInfo($card_id, $retrieve_requirements_to_load_fundspost_payload);
        return $response;
    }

    /**
     * Operation postretrieveRequirementsToLoadFundsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\RetrieveRequirementsToLoadFundspostPayload $retrieve_requirements_to_load_fundspost_payload Funding Requirements Request (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\RetrieveRequirementsToLoadFundspostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postretrieveRequirementsToLoadFundsWithHttpInfo($card_id, $retrieve_requirements_to_load_fundspost_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling postretrieveRequirementsToLoadFunds');
        }
        // verify the required parameter 'retrieve_requirements_to_load_fundspost_payload' is set
        if ($retrieve_requirements_to_load_fundspost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $retrieve_requirements_to_load_fundspost_payload when calling postretrieveRequirementsToLoadFunds');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/cardloads/requirementsinquiry";
        $resourcePath = "cards/{cardId}/cardloads/requirementsinquiry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($retrieve_requirements_to_load_fundspost_payload)) {
            $_tempBody = $retrieve_requirements_to_load_fundspost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\RetrieveRequirementsToLoadFundspostResponse',
                '/dcas/cardservices/v1/cards/{cardId}/cardloads/requirementsinquiry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\RetrieveRequirementsToLoadFundspostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\RetrieveRequirementsToLoadFundspostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation posttransferFundsToAccount
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\TransferFundsToAccountpostPayload $transfer_funds_to_accountpost_payload Funds Transfer Request (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\TransferFundsToAccountpostResponse
     */
    public function posttransferFundsToAccount($card_id, $transfer_funds_to_accountpost_payload)
    {
        list($response) = $this->posttransferFundsToAccountWithHttpInfo($card_id, $transfer_funds_to_accountpost_payload);
        return $response;
    }

    /**
     * Operation posttransferFundsToAccountWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\TransferFundsToAccountpostPayload $transfer_funds_to_accountpost_payload Funds Transfer Request (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\TransferFundsToAccountpostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function posttransferFundsToAccountWithHttpInfo($card_id, $transfer_funds_to_accountpost_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling posttransferFundsToAccount');
        }
        // verify the required parameter 'transfer_funds_to_accountpost_payload' is set
        if ($transfer_funds_to_accountpost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transfer_funds_to_accountpost_payload when calling posttransferFundsToAccount');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/fundstransfers";
        $resourcePath = "cards/{cardId}/fundstransfers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($transfer_funds_to_accountpost_payload)) {
            $_tempBody = $transfer_funds_to_accountpost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\TransferFundsToAccountpostResponse',
                '/dcas/cardservices/v1/cards/{cardId}/fundstransfers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\TransferFundsToAccountpostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\TransferFundsToAccountpostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postverifyOneTimePasscode
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\VerifyOneTimePasscodepostPayload $verify_one_time_passcodepost_payload Verification Code (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\VerifyOneTimePasscodepostResponse
     */
    public function postverifyOneTimePasscode($card_id, $verify_one_time_passcodepost_payload)
    {
        list($response) = $this->postverifyOneTimePasscodeWithHttpInfo($card_id, $verify_one_time_passcodepost_payload);
        return $response;
    }

    /**
     * Operation postverifyOneTimePasscodeWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\VerifyOneTimePasscodepostPayload $verify_one_time_passcodepost_payload Verification Code (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\VerifyOneTimePasscodepostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postverifyOneTimePasscodeWithHttpInfo($card_id, $verify_one_time_passcodepost_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling postverifyOneTimePasscode');
        }
        // verify the required parameter 'verify_one_time_passcodepost_payload' is set
        if ($verify_one_time_passcodepost_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $verify_one_time_passcodepost_payload when calling postverifyOneTimePasscode');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/notifications/otpverification";
        $resourcePath = "cards/{cardId}/notifications/otpverification";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($verify_one_time_passcodepost_payload)) {
            $_tempBody = $verify_one_time_passcodepost_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\VerifyOneTimePasscodepostResponse',
                '/dcas/cardservices/v1/cards/{cardId}/notifications/otpverification'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\VerifyOneTimePasscodepostResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\VerifyOneTimePasscodepostResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putcardStatus
     *
     * 
     *
     * @param string $card_id Card alias Id unique Indentifier (required)
     * @param \dcas_101\model\CardStatusputPayload $card_statusput_payload Key Value for updating card status (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\CardStatusputResponse
     */
    public function putcardStatus($card_id, $card_statusput_payload)
    {
        list($response) = $this->putcardStatusWithHttpInfo($card_id, $card_statusput_payload);
        return $response;
    }

    /**
     * Operation putcardStatusWithHttpInfo
     *
     * 
     *
     * @param string $card_id Card alias Id unique Indentifier (required)
     * @param \dcas_101\model\CardStatusputPayload $card_statusput_payload Key Value for updating card status (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\CardStatusputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putcardStatusWithHttpInfo($card_id, $card_statusput_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling putcardStatus');
        }
        // verify the required parameter 'card_statusput_payload' is set
        if ($card_statusput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_statusput_payload when calling putcardStatus');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/cardstatus";
        $resourcePath = "cards/{cardId}/cardstatus";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($card_statusput_payload)) {
            $_tempBody = $card_statusput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\CardStatusputResponse',
                '/dcas/cardservices/v1/cards/{cardId}/cardstatus'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\CardStatusputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\CardStatusputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putnotificationDetails
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\NotificationDetailsputPayload $notification_detailsput_payload Notification Settings Update (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\NotificationDetailsputResponse
     */
    public function putnotificationDetails($card_id, $notification_detailsput_payload)
    {
        list($response) = $this->putnotificationDetailsWithHttpInfo($card_id, $notification_detailsput_payload);
        return $response;
    }

    /**
     * Operation putnotificationDetailsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\NotificationDetailsputPayload $notification_detailsput_payload Notification Settings Update (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\NotificationDetailsputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putnotificationDetailsWithHttpInfo($card_id, $notification_detailsput_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling putnotificationDetails');
        }
        // verify the required parameter 'notification_detailsput_payload' is set
        if ($notification_detailsput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $notification_detailsput_payload when calling putnotificationDetails');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/notifications/settings";
        $resourcePath = "cards/{cardId}/notifications/settings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($notification_detailsput_payload)) {
            $_tempBody = $notification_detailsput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\NotificationDetailsputResponse',
                '/dcas/cardservices/v1/cards/{cardId}/notifications/settings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\NotificationDetailsputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\NotificationDetailsputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putnotificationSubscriptions
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\NotificationSubscriptionsputPayload $notification_subscriptionsput_payload Notifications Subscriptions Update (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return \dcas_101\model\NotificationSubscriptionsputResponse
     */
    public function putnotificationSubscriptions($card_id, $notification_subscriptionsput_payload)
    {
        list($response) = $this->putnotificationSubscriptionsWithHttpInfo($card_id, $notification_subscriptionsput_payload);
        return $response;
    }

    /**
     * Operation putnotificationSubscriptionsWithHttpInfo
     *
     * 
     *
     * @param string $card_id Unique indentifier assigned to the PAN (required)
     * @param \dcas_101\model\NotificationSubscriptionsputPayload $notification_subscriptionsput_payload Notifications Subscriptions Update (required)
     * @throws \dcas_101\ApiException on non-2xx response
     * @return array of \dcas_101\model\NotificationSubscriptionsputResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putnotificationSubscriptionsWithHttpInfo($card_id, $notification_subscriptionsput_payload)
    {
        // verify the required parameter 'card_id' is set
        if ($card_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $card_id when calling putnotificationSubscriptions');
        }
        // verify the required parameter 'notification_subscriptionsput_payload' is set
        if ($notification_subscriptionsput_payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $notification_subscriptionsput_payload when calling putnotificationSubscriptions');
        }
        // parse inputs
        $path = "/dcas/cardservices/v1/cards/{cardId}/notifications/subscriptions";
        $resourcePath = "cards/{cardId}/notifications/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($card_id !== null) {
            $path = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $path
            );
            $resourcePath = str_replace(
                "{" . "cardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($card_id),
                $resourcePath
            );
        }
        // default format to json
        $path = str_replace("{format}", "json", $path);
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($notification_subscriptionsput_payload)) {
            $_tempBody = $notification_subscriptionsput_payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }

        if (sizeof($queryParams) !== 0){
            ksort($queryParams);
        }

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $path,
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\dcas_101\model\NotificationSubscriptionsputResponse',
                '/dcas/cardservices/v1/cards/{cardId}/notifications/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\dcas_101\model\NotificationSubscriptionsputResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\dcas_101\model\NotificationSubscriptionsputResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/