<?php
/**
 * Accounts
 *
 * PHP version 5
 *
 * @category Class
 * @package  dcas_101
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Card Services API
 *
 * Manage cardholder’s card and account information, notification settings, and balance information.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace dcas_101\model;

use \ArrayAccess;

/**
 * Accounts Class Doc Comment
 *
 * @category    Class
 * @description Array of accounts tied to the given cardId.
 * @package     dcas_101
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Accounts implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'accounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_funding' => 'bool',
        'is_funding_computed' => 'bool',
        'account_number' => 'string',
        'institution_id' => 'string',
        'account_alias_id' => 'string',
        'account_type_description' => 'string',
        'account_opened_date' => 'string',
        'account_indicator_code' => 'string',
        'account_indicator_description' => 'string',
        'balances' => '\dcas_101\model\Balances',
        'account_type_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'is_funding' => 'isFunding',
        'is_funding_computed' => 'isFundingComputed',
        'account_number' => 'accountNumber',
        'institution_id' => 'institutionId',
        'account_alias_id' => 'accountAliasId',
        'account_type_description' => 'accountTypeDescription',
        'account_opened_date' => 'accountOpenedDate',
        'account_indicator_code' => 'accountIndicatorCode',
        'account_indicator_description' => 'accountIndicatorDescription',
        'balances' => 'balances',
        'account_type_code' => 'accountTypeCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'is_funding' => 'setIsFunding',
        'is_funding_computed' => 'setIsFundingComputed',
        'account_number' => 'setAccountNumber',
        'institution_id' => 'setInstitutionId',
        'account_alias_id' => 'setAccountAliasId',
        'account_type_description' => 'setAccountTypeDescription',
        'account_opened_date' => 'setAccountOpenedDate',
        'account_indicator_code' => 'setAccountIndicatorCode',
        'account_indicator_description' => 'setAccountIndicatorDescription',
        'balances' => 'setBalances',
        'account_type_code' => 'setAccountTypeCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'is_funding' => 'getIsFunding',
        'is_funding_computed' => 'getIsFundingComputed',
        'account_number' => 'getAccountNumber',
        'institution_id' => 'getInstitutionId',
        'account_alias_id' => 'getAccountAliasId',
        'account_type_description' => 'getAccountTypeDescription',
        'account_opened_date' => 'getAccountOpenedDate',
        'account_indicator_code' => 'getAccountIndicatorCode',
        'account_indicator_description' => 'getAccountIndicatorDescription',
        'balances' => 'getBalances',
        'account_type_code' => 'getAccountTypeCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_funding'] = isset($data['is_funding']) ? $data['is_funding'] : null;
        $this->container['is_funding_computed'] = isset($data['is_funding_computed']) ? $data['is_funding_computed'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['institution_id'] = isset($data['institution_id']) ? $data['institution_id'] : null;
        $this->container['account_alias_id'] = isset($data['account_alias_id']) ? $data['account_alias_id'] : null;
        $this->container['account_type_description'] = isset($data['account_type_description']) ? $data['account_type_description'] : null;
        $this->container['account_opened_date'] = isset($data['account_opened_date']) ? $data['account_opened_date'] : null;
        $this->container['account_indicator_code'] = isset($data['account_indicator_code']) ? $data['account_indicator_code'] : null;
        $this->container['account_indicator_description'] = isset($data['account_indicator_description']) ? $data['account_indicator_description'] : null;
        $this->container['balances'] = isset($data['balances']) ? $data['balances'] : null;
        $this->container['account_type_code'] = isset($data['account_type_code']) ? $data['account_type_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets is_funding
     * @return bool
     */
    public function getIsFunding()
    {
        return $this->container['is_funding'];
    }

    /**
     * Sets is_funding
     * @param bool $is_funding True if this instance is funding; otherwise, false.
     * @return $this
     */
    public function setIsFunding($is_funding)
    {
        $this->container['is_funding'] = $is_funding;

        return $this;
    }

    /**
     * Gets is_funding_computed
     * @return bool
     */
    public function getIsFundingComputed()
    {
        return $this->container['is_funding_computed'];
    }

    /**
     * Sets is_funding_computed
     * @param bool $is_funding_computed True if this instance is funding computed; otherwise, false.
     * @return $this
     */
    public function setIsFundingComputed($is_funding_computed)
    {
        $this->container['is_funding_computed'] = $is_funding_computed;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number Masked account number.
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets institution_id
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     * @param string $institution_id Uniquely identifies an institution.
     * @return $this
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets account_alias_id
     * @return string
     */
    public function getAccountAliasId()
    {
        return $this->container['account_alias_id'];
    }

    /**
     * Sets account_alias_id
     * @param string $account_alias_id The account alias identifier which uniquely identifies an account.
     * @return $this
     */
    public function setAccountAliasId($account_alias_id)
    {
        $this->container['account_alias_id'] = $account_alias_id;

        return $this;
    }

    /**
     * Gets account_type_description
     * @return string
     */
    public function getAccountTypeDescription()
    {
        return $this->container['account_type_description'];
    }

    /**
     * Sets account_type_description
     * @param string $account_type_description Account type description.
     * @return $this
     */
    public function setAccountTypeDescription($account_type_description)
    {
        $this->container['account_type_description'] = $account_type_description;

        return $this;
    }

    /**
     * Gets account_opened_date
     * @return string
     */
    public function getAccountOpenedDate()
    {
        return $this->container['account_opened_date'];
    }

    /**
     * Sets account_opened_date
     * @param string $account_opened_date Account opened date.
     * @return $this
     */
    public function setAccountOpenedDate($account_opened_date)
    {
        $this->container['account_opened_date'] = $account_opened_date;

        return $this;
    }

    /**
     * Gets account_indicator_code
     * @return string
     */
    public function getAccountIndicatorCode()
    {
        return $this->container['account_indicator_code'];
    }

    /**
     * Sets account_indicator_code
     * @param string $account_indicator_code Account indicator code.
     * @return $this
     */
    public function setAccountIndicatorCode($account_indicator_code)
    {
        $this->container['account_indicator_code'] = $account_indicator_code;

        return $this;
    }

    /**
     * Gets account_indicator_description
     * @return string
     */
    public function getAccountIndicatorDescription()
    {
        return $this->container['account_indicator_description'];
    }

    /**
     * Sets account_indicator_description
     * @param string $account_indicator_description Account indicator description.
     * @return $this
     */
    public function setAccountIndicatorDescription($account_indicator_description)
    {
        $this->container['account_indicator_description'] = $account_indicator_description;

        return $this;
    }

    /**
     * Gets balances
     * @return \dcas_101\model\Balances
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     * @param \dcas_101\model\Balances $balances
     * @return $this
     */
    public function setBalances($balances)
    {
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets account_type_code
     * @return string
     */
    public function getAccountTypeCode()
    {
        return $this->container['account_type_code'];
    }

    /**
     * Sets account_type_code
     * @param string $account_type_code Account type code (DDA, SAV etc).
     * @return $this
     */
    public function setAccountTypeCode($account_type_code)
    {
        $this->container['account_type_code'] = $account_type_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\dcas_101\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\dcas_101\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/