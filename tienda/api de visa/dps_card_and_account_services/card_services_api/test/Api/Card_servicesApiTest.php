<?php
/**
 * Card_servicesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  dcas_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Card Services API
 *
 * Manage cardholder’s card and account information, notification settings, and balance information.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace dcas_101\apitest;

require_once (__DIR__.'/../../globalConfig.php');

use \globalConfig\GlobalConfig;

use \dcas_101\Configuration;
use \dcas_101\api\Card_servicesApi;

/**
 * Card_servicesApiTest Class Doc Comment
 *
 * @category Class
 * @package  dcas_101
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Card_servicesApiTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

        $gc=new GlobalConfig();
        $config = Configuration::getDefaultConfiguration();

        // Configure HTTP basic authorization
        $config->setUsername($gc->getUserName());
        $config->setPassword($gc->getPassword());
        $config->setCertificatePath($gc->getCertificatePath());
        $config->setPrivateKey($gc->getPrivateKeyPath());
        $config->setCaCertPath($gc->getCaCertPath());

        // Configure API key authorization:
        $config->setSharedSecret($gc->getSharedSecret());
        $config->setApiKey("apikey", $gc->getApiKey());

        // Configure proxy settings
        $config->setCurlProxyHost($gc->getProxyHost());
        $config->setCurlProxyPort($gc->getProxyPort());
        $config->setCurlProxyUser($gc->getProxyUser());
        $config->setCurlProxyPassword($gc->getProxyPassword());

        echo '\n.................Testing Card_servicesApi...........................\n';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }
    public function transformPayload($oldPayload){
        $payload = $this->editLocalTime($oldPayload);
        $payload = $this->addRandom($payload);
        $payload= json_decode($payload,true);
        return $payload;
    }
    public function editLocalTime($oldPayload){

        date_default_timezone_set("America/Los_Angeles");
        $timestamp = date("Y-m-d\TH:i:s");
        $pattern = '/"localTransactionDateTime":".{19}"/i';
        $replacement = '"localTransactionDateTime": "'.$timestamp.'"';
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $timestamp = date("mdHis");
        $pattern = '/"dateTimeLocal":".{10}"/i';
        $replacement = '"dateTimeLocal": "'.$timestamp.'"';
        return preg_replace($pattern, $replacement, $oldPayload);

    }
    public function addRandom($oldPayload){
        $pattern = '/random/i';
        $replacement = $this->generateRandomString(5);
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $pattern = '/random_integer/i';
        return preg_replace($pattern, '1', $oldPayload);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }
    function generateRandomString($length = 10)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     * Test case for getcardStatus
     *
     * .
     *
     */
    public function testGetcardStatus()
    {
        echo "\nMaking a call to GetcardStatus()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetcardStatus($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getgetAccountDetails
     *
     * .
     *
     */
    public function testGetgetAccountDetails()
    {
        echo "\nMaking a call to GetgetAccountDetails()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetgetAccountDetails($this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getgetCardByAlias
     *
     * .
     *
     */
    public function testGetgetCardByAlias()
    {
        echo "\nMaking a call to GetgetCardByAlias()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetgetCardByAlias($this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getgetCardholderDetails
     *
     * .
     *
     */
    public function testGetgetCardholderDetails()
    {
        echo "\nMaking a call to GetgetCardholderDetails()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetgetCardholderDetails($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getgetNotificationSettings
     *
     * .
     *
     */
    public function testGetgetNotificationSettings()
    {
        echo "\nMaking a call to GetgetNotificationSettings()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetgetNotificationSettings($this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getgetSingleAccountDetails
     *
     * .
     *
     */
    public function testGetgetSingleAccountDetails()
    {
        echo "\nMaking a call to GetgetSingleAccountDetails()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetgetSingleAccountDetails($this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getgetTransactionHistory
     *
     * .
     *
     */
    public function testGetgetTransactionHistory()
    {
        echo "\nMaking a call to GetgetTransactionHistory()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetgetTransactionHistory($this->addRandom('random'), $this->addRandom('random'), $this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getnotificationDetails
     *
     * .
     *
     */
    public function testGetnotificationDetails()
    {
        echo "\nMaking a call to GetnotificationDetails()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetnotificationDetails($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getnotificationSubscriptions
     *
     * .
     *
     */
    public function testGetnotificationSubscriptions()
    {
        echo "\nMaking a call to GetnotificationSubscriptions()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->GetnotificationSubscriptions($this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postcardActivation
     *
     * .
     *
     */
    public function testPostcardActivation()
    {
        echo "\nMaking a call to PostcardActivation()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PostcardActivation($this->addRandom('random'), $this->addRandom('random'), $this->transformPayload('{"securityQuestionToken":{"isTokenPresent":true,"securityQuestionAnswer":""},"ssnToken":{"isTokenPresent":true,"ssn":"2233","isLastFourOnly":true},"ExpirationDate":{"mm":"08","yy":"20"},"Cvv2":"393","birthDateToken":{"birthDateMmDdYyyy":"01011960","isTokenPresent":true},"phoneNumberToken":{"isTokenPresent":true,"phoneNumber":"3033891234","countryCode":"1"}}'), $this->addRandom('random'), $this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postcardVerification
     *
     * .
     *
     */
    public function testPostcardVerification()
    {
        echo "\nMaking a call to PostcardVerification()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PostcardVerification($this->addRandom('random'), $this->transformPayload('{"address":{"city":"SomeTown","country":"","region":"CA","addressLine2":"","addressLine3":"","addressLine1":"123 N Street","postalCode":"90210"},"expirationDate":{"yy":"99","mm":"11"},"cvv2":"321"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postcreateCardIdentifiers
     *
     * .
     *
     */
    public function testPostcreateCardIdentifiers()
    {
        echo "\nMaking a call to PostcreateCardIdentifiers()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PostcreateCardIdentifiers($this->transformPayload('{"cardIdModel":[{"pan":"4883836336860016","lookUpBalances":true}]}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postgetListOfFundTransferAccounts
     *
     * .
     *
     */
    public function testPostgetListOfFundTransferAccounts()
    {
        echo "\nMaking a call to PostgetListOfFundTransferAccounts()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PostgetListOfFundTransferAccounts($this->addRandom('random'), $this->transformPayload('{"transferAmount":15}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postloadFundsToCard
     *
     * .
     *
     */
    public function testPostloadFundsToCard()
    {
        echo "\nMaking a call to PostloadFundsToCard()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PostloadFundsToCard($this->addRandom('random'), $this->transformPayload('{"loadType":1,"immediateLoad":{"loadAmount":{"currencyCode":"840","amount":10},"cvv2":"460","feeNumber":"1055","fundingAccountAliasId":"103183331","feeAmount":{"currencyCode":"840","amount":1}}}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postretrieveRequirementsToLoadFunds
     *
     * .
     *
     */
    public function testPostretrieveRequirementsToLoadFunds()
    {
        echo "\nMaking a call to PostretrieveRequirementsToLoadFunds()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PostretrieveRequirementsToLoadFunds($this->addRandom('random'), $this->transformPayload('{"loadAmount":10}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for posttransferFundsToAccount
     *
     * .
     *
     */
    public function testPosttransferFundsToAccount()
    {
        echo "\nMaking a call to PosttransferFundsToAccount()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PosttransferFundsToAccount($this->addRandom('random'), $this->transformPayload('{"toAccountAliasId":"103183329","feeNumber":"1072","transferAmount":{"currencyCode":"840","amount":5},"feeAmount":{"currencyCode":"840","amount":1.72}}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postverifyOneTimePasscode
     *
     * .
     *
     */
    public function testPostverifyOneTimePasscode()
    {
        echo "\nMaking a call to PostverifyOneTimePasscode()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PostverifyOneTimePasscode($this->addRandom('random'), $this->transformPayload('{"verificationCode":"657825"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for putcardStatus
     *
     * .
     *
     */
    public function testPutcardStatus()
    {
        echo "\nMaking a call to PutcardStatus()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PutcardStatus($this->addRandom('random'), $this->transformPayload('{"cardStatus":"Active"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for putnotificationDetails
     *
     * .
     *
     */
    public function testPutnotificationDetails()
    {
        echo "\nMaking a call to PutnotificationDetails()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PutnotificationDetails($this->addRandom('random'), $this->transformPayload('{"textDeviceNumber":"3031112222","profileAliasId":92685773,"regenerateVerificationCode":false,"emailAddress":"nobody@nowhere.nop","pushNotificationIds":["0363e0eb-85a5-abc0-efca-150468806403"]}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for putnotificationSubscriptions
     *
     * .
     *
     */
    public function testPutnotificationSubscriptions()
    {
        echo "\nMaking a call to PutnotificationSubscriptions()\n";

        $api_instance = new Card_servicesApi;
        $result = $api_instance->PutnotificationSubscriptions($this->addRandom('random'), $this->transformPayload('{"cardholderLowBalanceAmount":{"amount":0,"currencyCode":"840"},"pushID":"test","subscriptions":[{"notificationID":"LowBalance_Email","isSubscribed":true},{"notificationID":"ChangeOfCardStatus_Text","isSubscribed":true},{"notificationID":"DailyAvailableBalance_PushNotification","isSubscribed":true}]}'));

        $this->assertNotNull($result);

    }

}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/